{"version":3,"sources":["../../src/utils/findBotByTrigger.ts","../../src/utils/advancedOperatorsSearch.ts"],"sourcesContent":["import { advancedOperatorsSearch } from './advancedOperatorsSearch';\r\n\r\nexport const findBotByTrigger = async (botRepository: any, content: string, instanceId: string) => {\r\n  // Check for triggerType 'all'\r\n  const findTriggerAll = await botRepository.findFirst({\r\n    where: {\r\n      enabled: true,\r\n      triggerType: 'all',\r\n      instanceId: instanceId,\r\n    },\r\n  });\r\n\r\n  if (findTriggerAll) return findTriggerAll;\r\n\r\n  const findTriggerAdvanced = await botRepository.findMany({\r\n    where: {\r\n      enabled: true,\r\n      triggerType: 'advanced',\r\n      instanceId: instanceId,\r\n    },\r\n  });\r\n  for (const advanced of findTriggerAdvanced) {\r\n    if (advancedOperatorsSearch(content, advanced.triggerValue)) {\r\n      return advanced;\r\n    }\r\n  }\r\n\r\n  // Check for exact match\r\n  const findTriggerEquals = await botRepository.findFirst({\r\n    where: {\r\n      enabled: true,\r\n      triggerType: 'keyword',\r\n      triggerOperator: 'equals',\r\n      triggerValue: content,\r\n      instanceId: instanceId,\r\n    },\r\n  });\r\n\r\n  if (findTriggerEquals) return findTriggerEquals;\r\n\r\n  // Check for regex match\r\n  const findRegex = await botRepository.findMany({\r\n    where: {\r\n      enabled: true,\r\n      triggerType: 'keyword',\r\n      triggerOperator: 'regex',\r\n      instanceId: instanceId,\r\n    },\r\n  });\r\n\r\n  let findTriggerRegex = null;\r\n\r\n  for (const regex of findRegex) {\r\n    const regexValue = new RegExp(regex.triggerValue);\r\n\r\n    if (regexValue.test(content)) {\r\n      findTriggerRegex = regex;\r\n      break;\r\n    }\r\n  }\r\n\r\n  if (findTriggerRegex) return findTriggerRegex;\r\n\r\n  // Check for startsWith match\r\n  const findStartsWith = await botRepository.findMany({\r\n    where: {\r\n      enabled: true,\r\n      triggerType: 'keyword',\r\n      triggerOperator: 'startsWith',\r\n      instanceId: instanceId,\r\n    },\r\n  });\r\n\r\n  let findTriggerStartsWith = null;\r\n\r\n  for (const startsWith of findStartsWith) {\r\n    if (content.startsWith(startsWith.triggerValue)) {\r\n      findTriggerStartsWith = startsWith;\r\n      break;\r\n    }\r\n  }\r\n\r\n  if (findTriggerStartsWith) return findTriggerStartsWith;\r\n\r\n  // Check for endsWith match\r\n  const findEndsWith = await botRepository.findMany({\r\n    where: {\r\n      enabled: true,\r\n      triggerType: 'keyword',\r\n      triggerOperator: 'endsWith',\r\n      instanceId: instanceId,\r\n    },\r\n  });\r\n\r\n  let findTriggerEndsWith = null;\r\n\r\n  for (const endsWith of findEndsWith) {\r\n    if (content.endsWith(endsWith.triggerValue)) {\r\n      findTriggerEndsWith = endsWith;\r\n      break;\r\n    }\r\n  }\r\n\r\n  if (findTriggerEndsWith) return findTriggerEndsWith;\r\n\r\n  // Check for contains match\r\n  const findContains = await botRepository.findMany({\r\n    where: {\r\n      enabled: true,\r\n      triggerType: 'keyword',\r\n      triggerOperator: 'contains',\r\n      instanceId: instanceId,\r\n    },\r\n  });\r\n\r\n  let findTriggerContains = null;\r\n\r\n  for (const contains of findContains) {\r\n    if (content.includes(contains.triggerValue)) {\r\n      findTriggerContains = contains;\r\n      break;\r\n    }\r\n  }\r\n\r\n  if (findTriggerContains) return findTriggerContains;\r\n\r\n  return null;\r\n};\r\n","function normalizeString(str: string): string {\r\n  return str\r\n    .normalize('NFD')\r\n    .replace(/[\\u0300-\\u036f]/g, '')\r\n    .toLowerCase();\r\n}\r\n\r\nexport function advancedOperatorsSearch(data: string, query: string): boolean {\r\n  const filters = query.split(' ').reduce((acc: Record<string, string[]>, filter) => {\r\n    const [operator, ...values] = filter.split(':');\r\n    const value = values.join(':');\r\n\r\n    if (!acc[operator]) {\r\n      acc[operator] = [];\r\n    }\r\n    acc[operator].push(value);\r\n    return acc;\r\n  }, {});\r\n\r\n  const normalizedItem = normalizeString(data);\r\n\r\n  return Object.entries(filters).every(([operator, values]) => {\r\n    return values.some((val) => {\r\n      const subValues = val.split(',');\r\n      return subValues.every((subVal) => {\r\n        const normalizedSubVal = normalizeString(subVal);\r\n\r\n        switch (operator.toLowerCase()) {\r\n          case 'contains':\r\n            return normalizedItem.includes(normalizedSubVal);\r\n          case 'notcontains':\r\n            return !normalizedItem.includes(normalizedSubVal);\r\n          case 'startswith':\r\n            return normalizedItem.startsWith(normalizedSubVal);\r\n          case 'endswith':\r\n            return normalizedItem.endsWith(normalizedSubVal);\r\n          case 'exact':\r\n            return normalizedItem === normalizedSubVal;\r\n          default:\r\n            return false;\r\n        }\r\n      });\r\n    });\r\n  });\r\n}\r\n"],"mappings":"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","names":["findBotByTrigger_exports","__export","findBotByTrigger","__toCommonJS","normalizeString","str","advancedOperatorsSearch","data","query","filters","acc","filter","operator","values","value","normalizedItem","val","subVal","normalizedSubVal","findBotByTrigger","botRepository","content","instanceId","findTriggerAll","findTriggerAdvanced","advanced","advancedOperatorsSearch","findTriggerEquals","findRegex","findTriggerRegex","regex","findStartsWith","findTriggerStartsWith","startsWith","findEndsWith","findTriggerEndsWith","endsWith","findContains","findTriggerContains","contains"]}
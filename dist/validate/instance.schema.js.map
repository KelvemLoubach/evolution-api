{"version":3,"sources":["../../src/validate/instance.schema.ts","../../src/api/types/wa.types.ts","../../node_modules/uuid/dist/esm-node/rng.js","../../node_modules/uuid/dist/esm-node/stringify.js","../../node_modules/uuid/dist/esm-node/native.js","../../node_modules/uuid/dist/esm-node/v4.js"],"sourcesContent":["import { Integration } from '@api/types/wa.types';\r\nimport { JSONSchema7 } from 'json-schema';\r\nimport { v4 } from 'uuid';\r\n\r\nconst isNotEmpty = (...propertyNames: string[]): JSONSchema7 => {\r\n  const properties = {};\r\n  propertyNames.forEach(\r\n    (property) =>\r\n      (properties[property] = {\r\n        minLength: 1,\r\n        description: `The \"${property}\" cannot be empty`,\r\n      }),\r\n  );\r\n  return {\r\n    if: {\r\n      propertyNames: {\r\n        enum: [...propertyNames],\r\n      },\r\n    },\r\n    then: { properties },\r\n  };\r\n};\r\n\r\nexport const instanceSchema: JSONSchema7 = {\r\n  $id: v4(),\r\n  type: 'object',\r\n  properties: {\r\n    // Instance\r\n    instanceName: { type: 'string' },\r\n    token: { type: 'string' },\r\n    number: { type: 'string', pattern: '^\\\\d+[\\\\.@\\\\w-]+' },\r\n    businessId: { type: 'string' },\r\n    qrcode: { type: 'boolean' },\r\n    Integration: {\r\n      type: 'string',\r\n      enum: Object.values(Integration),\r\n    },\r\n    // Settings\r\n    rejectCall: { type: 'boolean' },\r\n    msgCall: { type: 'string' },\r\n    groupsIgnore: { type: 'boolean' },\r\n    alwaysOnline: { type: 'boolean' },\r\n    readMessages: { type: 'boolean' },\r\n    readStatus: { type: 'boolean' },\r\n    syncFullHistory: { type: 'boolean' },\r\n    wavoipToken: { type: 'string' },\r\n    // Proxy\r\n    proxyHost: { type: 'string' },\r\n    proxyPort: { type: 'string' },\r\n    proxyProtocol: { type: 'string' },\r\n    proxyUsername: { type: 'string' },\r\n    proxyPassword: { type: 'string' },\r\n    // Webhook\r\n    webhookUrl: { type: 'string' },\r\n    webhookByEvents: { type: 'boolean' },\r\n    webhookBase64: { type: 'boolean' },\r\n    webhookEvents: {\r\n      type: 'array',\r\n      minItems: 0,\r\n      items: {\r\n        type: 'string',\r\n        enum: [\r\n          'APPLICATION_STARTUP',\r\n          'QRCODE_UPDATED',\r\n          'MESSAGES_SET',\r\n          'MESSAGES_UPSERT',\r\n          'MESSAGES_EDITED',\r\n          'MESSAGES_UPDATE',\r\n          'MESSAGES_DELETE',\r\n          'SEND_MESSAGE',\r\n          'CONTACTS_SET',\r\n          'CONTACTS_UPSERT',\r\n          'CONTACTS_UPDATE',\r\n          'PRESENCE_UPDATE',\r\n          'CHATS_SET',\r\n          'CHATS_UPSERT',\r\n          'CHATS_UPDATE',\r\n          'CHATS_DELETE',\r\n          'GROUPS_UPSERT',\r\n          'GROUP_UPDATE',\r\n          'GROUP_PARTICIPANTS_UPDATE',\r\n          'CONNECTION_UPDATE',\r\n          'LABELS_EDIT',\r\n          'LABELS_ASSOCIATION',\r\n          'CALL',\r\n          'TYPEBOT_START',\r\n          'TYPEBOT_CHANGE_STATUS',\r\n        ],\r\n      },\r\n    },\r\n    // RabbitMQ\r\n    rabbitmqEnabled: { type: 'boolean' },\r\n    rabbitmqEvents: {\r\n      type: 'array',\r\n      minItems: 0,\r\n      items: {\r\n        type: 'string',\r\n        enum: [\r\n          'APPLICATION_STARTUP',\r\n          'QRCODE_UPDATED',\r\n          'MESSAGES_SET',\r\n          'MESSAGES_UPSERT',\r\n          'MESSAGES_EDITED',\r\n          'MESSAGES_UPDATE',\r\n          'MESSAGES_DELETE',\r\n          'SEND_MESSAGE',\r\n          'CONTACTS_SET',\r\n          'CONTACTS_UPSERT',\r\n          'CONTACTS_UPDATE',\r\n          'PRESENCE_UPDATE',\r\n          'CHATS_SET',\r\n          'CHATS_UPSERT',\r\n          'CHATS_UPDATE',\r\n          'CHATS_DELETE',\r\n          'GROUPS_UPSERT',\r\n          'GROUP_UPDATE',\r\n          'GROUP_PARTICIPANTS_UPDATE',\r\n          'CONNECTION_UPDATE',\r\n          'LABELS_EDIT',\r\n          'LABELS_ASSOCIATION',\r\n          'CALL',\r\n          'TYPEBOT_START',\r\n          'TYPEBOT_CHANGE_STATUS',\r\n        ],\r\n      },\r\n    },\r\n    // SQS\r\n    sqsEnabled: { type: 'boolean' },\r\n    sqsEvents: {\r\n      type: 'array',\r\n      minItems: 0,\r\n      items: {\r\n        type: 'string',\r\n        enum: [\r\n          'APPLICATION_STARTUP',\r\n          'QRCODE_UPDATED',\r\n          'MESSAGES_SET',\r\n          'MESSAGES_UPSERT',\r\n          'MESSAGES_EDITED',\r\n          'MESSAGES_UPDATE',\r\n          'MESSAGES_DELETE',\r\n          'SEND_MESSAGE',\r\n          'CONTACTS_SET',\r\n          'CONTACTS_UPSERT',\r\n          'CONTACTS_UPDATE',\r\n          'PRESENCE_UPDATE',\r\n          'CHATS_SET',\r\n          'CHATS_UPSERT',\r\n          'CHATS_UPDATE',\r\n          'CHATS_DELETE',\r\n          'GROUPS_UPSERT',\r\n          'GROUP_UPDATE',\r\n          'GROUP_PARTICIPANTS_UPDATE',\r\n          'CONNECTION_UPDATE',\r\n          'LABELS_EDIT',\r\n          'LABELS_ASSOCIATION',\r\n          'CALL',\r\n          'TYPEBOT_START',\r\n          'TYPEBOT_CHANGE_STATUS',\r\n        ],\r\n      },\r\n    },\r\n    // Chatwoot\r\n    chatwootAccountId: { type: 'string' },\r\n    chatwootToken: { type: 'string' },\r\n    chatwootUrl: { type: 'string' },\r\n    chatwootSignMsg: { type: 'boolean' },\r\n    chatwootReopenConversation: { type: 'boolean' },\r\n    chatwootConversationPending: { type: 'boolean' },\r\n    chatwootImportContacts: { type: 'boolean' },\r\n    chatwootNameInbox: { type: 'string' },\r\n    chatwootMergeBrazilContacts: { type: 'boolean' },\r\n    chatwootImportMessages: { type: 'boolean' },\r\n    chatwootDaysLimitImportMessages: { type: 'number' },\r\n  },\r\n  ...isNotEmpty('instanceName'),\r\n};\r\n\r\nexport const presenceOnlySchema: JSONSchema7 = {\r\n  $id: v4(),\r\n  type: 'object',\r\n  properties: {\r\n    presence: {\r\n      type: 'string',\r\n      enum: ['unavailable', 'available', 'composing', 'recording', 'paused'],\r\n    },\r\n  },\r\n  required: ['presence'],\r\n};\r\n","/* eslint-disable @typescript-eslint/no-namespace */\r\nimport { JsonValue } from '@prisma/client/runtime/library';\r\nimport { AuthenticationState, WAConnectionState } from 'baileys';\r\n\r\nexport enum Events {\r\n  APPLICATION_STARTUP = 'application.startup',\r\n  INSTANCE_CREATE = 'instance.create',\r\n  INSTANCE_DELETE = 'instance.delete',\r\n  QRCODE_UPDATED = 'qrcode.updated',\r\n  CONNECTION_UPDATE = 'connection.update',\r\n  STATUS_INSTANCE = 'status.instance',\r\n  MESSAGES_SET = 'messages.set',\r\n  MESSAGES_UPSERT = 'messages.upsert',\r\n  MESSAGES_EDITED = 'messages.edited',\r\n  MESSAGES_UPDATE = 'messages.update',\r\n  MESSAGES_DELETE = 'messages.delete',\r\n  SEND_MESSAGE = 'send.message',\r\n  CONTACTS_SET = 'contacts.set',\r\n  CONTACTS_UPSERT = 'contacts.upsert',\r\n  CONTACTS_UPDATE = 'contacts.update',\r\n  PRESENCE_UPDATE = 'presence.update',\r\n  CHATS_SET = 'chats.set',\r\n  CHATS_UPDATE = 'chats.update',\r\n  CHATS_UPSERT = 'chats.upsert',\r\n  CHATS_DELETE = 'chats.delete',\r\n  GROUPS_UPSERT = 'groups.upsert',\r\n  GROUPS_UPDATE = 'groups.update',\r\n  GROUP_PARTICIPANTS_UPDATE = 'group-participants.update',\r\n  CALL = 'call',\r\n  TYPEBOT_START = 'typebot.start',\r\n  TYPEBOT_CHANGE_STATUS = 'typebot.change-status',\r\n  LABELS_EDIT = 'labels.edit',\r\n  LABELS_ASSOCIATION = 'labels.association',\r\n  CREDS_UPDATE = 'creds.update',\r\n  MESSAGING_HISTORY_SET = 'messaging-history.set',\r\n  REMOVE_INSTANCE = 'remove.instance',\r\n  LOGOUT_INSTANCE = 'logout.instance',\r\n}\r\n\r\nexport declare namespace wa {\r\n  export type QrCode = {\r\n    count?: number;\r\n    pairingCode?: string;\r\n    base64?: string;\r\n    code?: string;\r\n  };\r\n\r\n  export type Instance = {\r\n    id?: string;\r\n    qrcode?: QrCode;\r\n    pairingCode?: string;\r\n    authState?: { state: AuthenticationState; saveCreds: () => void };\r\n    name?: string;\r\n    wuid?: string;\r\n    profileName?: string;\r\n    profilePictureUrl?: string;\r\n    token?: string;\r\n    number?: string;\r\n    integration?: string;\r\n    businessId?: string;\r\n  };\r\n\r\n  export type LocalChatwoot = {\r\n    enabled?: boolean;\r\n    accountId?: string;\r\n    token?: string;\r\n    url?: string;\r\n    nameInbox?: string;\r\n    signMsg?: boolean;\r\n    signDelimiter?: string;\r\n    number?: string;\r\n    reopenConversation?: boolean;\r\n    conversationPending?: boolean;\r\n    mergeBrazilContacts?: boolean;\r\n    importContacts?: boolean;\r\n    importMessages?: boolean;\r\n    daysLimitImportMessages?: number;\r\n  };\r\n\r\n  export type LocalSettings = {\r\n    rejectCall?: boolean;\r\n    msgCall?: string;\r\n    groupsIgnore?: boolean;\r\n    alwaysOnline?: boolean;\r\n    readMessages?: boolean;\r\n    readStatus?: boolean;\r\n    syncFullHistory?: boolean;\r\n    wavoipToken?: string;\r\n  };\r\n\r\n  export type LocalEvent = {\r\n    enabled?: boolean;\r\n    events?: JsonValue;\r\n  };\r\n\r\n  export type LocalWebHook = LocalEvent & {\r\n    url?: string;\r\n    headers?: JsonValue;\r\n    webhookByEvents?: boolean;\r\n    webhookBase64?: boolean;\r\n  };\r\n\r\n  export type LocalPusher = LocalEvent & {\r\n    appId?: string;\r\n    key?: string;\r\n    secret?: string;\r\n    cluster?: string;\r\n    useTLS?: boolean;\r\n  };\r\n\r\n  type Session = {\r\n    remoteJid?: string;\r\n    sessionId?: string;\r\n    createdAt?: number;\r\n  };\r\n\r\n  export type LocalProxy = {\r\n    enabled?: boolean;\r\n    host?: string;\r\n    port?: string;\r\n    protocol?: string;\r\n    username?: string;\r\n    password?: string;\r\n  };\r\n\r\n  export type StateConnection = {\r\n    instance?: string;\r\n    state?: WAConnectionState | 'refused';\r\n    statusReason?: number;\r\n  };\r\n\r\n  export type StatusMessage = 'ERROR' | 'PENDING' | 'SERVER_ACK' | 'DELIVERY_ACK' | 'READ' | 'DELETED' | 'PLAYED';\r\n}\r\n\r\nexport const TypeMediaMessage = [\r\n  'imageMessage',\r\n  'documentMessage',\r\n  'audioMessage',\r\n  'videoMessage',\r\n  'stickerMessage',\r\n  'ptvMessage',\r\n];\r\n\r\nexport const MessageSubtype = [\r\n  'ephemeralMessage',\r\n  'documentWithCaptionMessage',\r\n  'viewOnceMessage',\r\n  'viewOnceMessageV2',\r\n];\r\n\r\nexport const Integration = {\r\n  WHATSAPP_BUSINESS: 'WHATSAPP-BUSINESS',\r\n  WHATSAPP_BAILEYS: 'WHATSAPP-BAILEYS',\r\n  EVOLUTION: 'EVOLUTION',\r\n};\r\n","import crypto from 'crypto';\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\n\nlet poolPtr = rnds8Pool.length;\nexport default function rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    crypto.randomFillSync(rnds8Pool);\n    poolPtr = 0;\n  }\n\n  return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import crypto from 'crypto';\nexport default {\n  randomUUID: crypto.randomUUID\n};","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;"],"mappings":"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,CAAE,KAAM,SAAU,EACjC,cAAe,CACb,KAAM,QACN,SAAU,EACV,MAAO,CACL,KAAM,SACN,KAAM,CACJ,sBACA,iBACA,eACA,kBACA,kBACA,kBACA,kBACA,eACA,eACA,kBACA,kBACA,kBACA,YACA,eACA,eACA,eACA,gBACA,eACA,4BACA,oBACA,cACA,qBACA,OACA,gBACA,uBACF,CACF,CACF,EAEA,gBAAiB,CAAE,KAAM,SAAU,EACnC,eAAgB,CACd,KAAM,QACN,SAAU,EACV,MAAO,CACL,KAAM,SACN,KAAM,CACJ,sBACA,iBACA,eACA,kBACA,kBACA,kBACA,kBACA,eACA,eACA,kBACA,kBACA,kBACA,YACA,eACA,eACA,eACA,gBACA,eACA,4BACA,oBACA,cACA,qBACA,OACA,gBACA,uBACF,CACF,CACF,EAEA,WAAY,CAAE,KAAM,SAAU,EAC9B,UAAW,CACT,KAAM,QACN,SAAU,EACV,MAAO,CACL,KAAM,SACN,KAAM,CACJ,sBACA,iBACA,eACA,kBACA,kBACA,kBACA,kBACA,eACA,eACA,kBACA,kBACA,kBACA,YACA,eACA,eACA,eACA,gBACA,eACA,4BACA,oBACA,cACA,qBACA,OACA,gBACA,uBACF,CACF,CACF,EAEA,kBAAmB,CAAE,KAAM,QAAS,EACpC,cAAe,CAAE,KAAM,QAAS,EAChC,YAAa,CAAE,KAAM,QAAS,EAC9B,gBAAiB,CAAE,KAAM,SAAU,EACnC,2BAA4B,CAAE,KAAM,SAAU,EAC9C,4BAA6B,CAAE,KAAM,SAAU,EAC/C,uBAAwB,CAAE,KAAM,SAAU,EAC1C,kBAAmB,CAAE,KAAM,QAAS,EACpC,4BAA6B,CAAE,KAAM,SAAU,EAC/C,uBAAwB,CAAE,KAAM,SAAU,EAC1C,gCAAiC,CAAE,KAAM,QAAS,CACpD,EACA,GAAGN,EAAW,cAAc,CAC9B,EAEaO,EAAkC,CAC7C,IAAKF,EAAG,EACR,KAAM,SACN,WAAY,CACV,SAAU,CACR,KAAM,SACN,KAAM,CAAC,cAAe,YAAa,YAAa,YAAa,QAAQ,CACvE,CACF,EACA,SAAU,CAAC,UAAU,CACvB","names":["instance_schema_exports","__export","instanceSchema","presenceOnlySchema","__toCommonJS","Integration","import_crypto","rnds8Pool","poolPtr","rng","crypto","byteToHex","i","unsafeStringify","arr","offset","import_crypto","native_default","crypto","v4","options","buf","offset","native_default","rnds","rng","i","unsafeStringify","v4_default","isNotEmpty","propertyNames","properties","property","instanceSchema","v4_default","Integration","presenceOnlySchema"]}
{"version":3,"sources":["../../../src/api/abstract/abstract.repository.ts","../../../src/config/path.config.ts"],"sourcesContent":["import { ConfigService, Database } from '@config/env.config';\r\nimport { ROOT_DIR } from '@config/path.config';\r\nimport { existsSync, mkdirSync, writeFileSync } from 'fs';\r\nimport { join } from 'path';\r\n\r\nexport type IInsert = { insertCount: number };\r\n\r\nexport interface IRepository {\r\n  insert(data: any, instanceName: string, saveDb?: boolean): Promise<IInsert>;\r\n  update(data: any, instanceName: string, saveDb?: boolean): Promise<IInsert>;\r\n  find(query: any): Promise<any>;\r\n  delete(query: any, force?: boolean): Promise<any>;\r\n\r\n  dbSettings: Database;\r\n  readonly storePath: string;\r\n}\r\n\r\ntype WriteStore<U> = {\r\n  path: string;\r\n  fileName: string;\r\n  data: U;\r\n};\r\n\r\nexport abstract class Repository implements IRepository {\r\n  constructor(configService: ConfigService) {\r\n    this.dbSettings = configService.get<Database>('DATABASE');\r\n  }\r\n\r\n  dbSettings: Database;\r\n  readonly storePath = join(ROOT_DIR, 'store');\r\n\r\n  public writeStore = <T = any>(create: WriteStore<T>) => {\r\n    if (!existsSync(create.path)) {\r\n      mkdirSync(create.path, { recursive: true });\r\n    }\r\n    try {\r\n      writeFileSync(join(create.path, create.fileName + '.json'), JSON.stringify({ ...create.data }), {\r\n        encoding: 'utf-8',\r\n      });\r\n\r\n      return { message: 'create - success' };\r\n    } finally {\r\n      create.data = undefined;\r\n    }\r\n  };\r\n\r\n  // eslint-disable-next-line\r\n    public insert(data: any, instanceName: string, saveDb = false): Promise<IInsert> {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  // eslint-disable-next-line\r\n    public update(data: any, instanceName: string, saveDb = false): Promise<IInsert> {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  // eslint-disable-next-line\r\n    public find(query: any): Promise<any> {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  // eslint-disable-next-line\r\n    delete(query: any, force?: boolean): Promise<any> {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n}\r\n","import { join } from 'path';\r\n\r\nexport const ROOT_DIR = process.cwd();\r\nexport const INSTANCE_DIR = join(ROOT_DIR, 'instances');\r\nexport const SRC_DIR = join(ROOT_DIR, 'src');\r\nexport const AUTH_DIR = join(ROOT_DIR, 'store', 'auth');\r\nexport const STORE_DIR = join(ROOT_DIR, 'store');\r\n"],"mappings":"4ZAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,gBAAAE,IAAA,eAAAC,EAAAH,GCAA,IAAAI,EAAqB,gBAERC,EAAW,QAAQ,IAAI,EACvBC,KAAe,QAAKD,EAAU,WAAW,EACzCE,KAAU,QAAKF,EAAU,KAAK,EAC9BG,KAAW,QAAKH,EAAU,QAAS,MAAM,EACzCI,KAAY,QAAKJ,EAAU,OAAO,EDJ/C,IAAAK,EAAqD,cACrDC,EAAqB,gBAoBCC,EAAf,KAAiD,CACtD,YAAYC,EAA8B,CAK1C,KAAS,aAAY,QAAKC,EAAU,OAAO,EAE3C,KAAO,WAAuBC,GAA0B,IACjD,cAAWA,EAAO,IAAI,MACzB,aAAUA,EAAO,KAAM,CAAE,UAAW,EAAK,CAAC,EAE5C,GAAI,CACF,6BAAc,QAAKA,EAAO,KAAMA,EAAO,SAAW,OAAO,EAAG,KAAK,UAAU,CAAE,GAAGA,EAAO,IAAK,CAAC,EAAG,CAC9F,SAAU,OACZ,CAAC,EAEM,CAAE,QAAS,kBAAmB,CACvC,QAAE,CACAA,EAAO,KAAO,MAChB,CACF,EAnBE,KAAK,WAAaF,EAAc,IAAc,UAAU,CAC1D,CAqBS,OAAOG,EAAWC,EAAsBC,EAAS,GAAyB,CACjF,MAAM,IAAI,MAAM,yBAAyB,CAC3C,CAGS,OAAOF,EAAWC,EAAsBC,EAAS,GAAyB,CACjF,MAAM,IAAI,MAAM,yBAAyB,CAC3C,CAGS,KAAKC,EAA0B,CACtC,MAAM,IAAI,MAAM,yBAAyB,CAC3C,CAGE,OAAOA,EAAYC,EAA+B,CAClD,MAAM,IAAI,MAAM,yBAAyB,CAC3C,CACF","names":["abstract_repository_exports","__export","Repository","__toCommonJS","import_path","ROOT_DIR","INSTANCE_DIR","SRC_DIR","AUTH_DIR","STORE_DIR","import_fs","import_path","Repository","configService","ROOT_DIR","create","data","instanceName","saveDb","query","force"]}
{"version":3,"sources":["../../../../../../src/api/integrations/chatbot/chatwoot/utils/chatwoot-import-helper.ts","../../../../../../src/config/env.config.ts","../../../../../../src/config/logger.config.ts","../../../../../../src/api/integrations/chatbot/chatwoot/libs/postgres.client.ts"],"sourcesContent":["import { InstanceDto } from '@api/dto/instance.dto';\r\nimport { ChatwootDto } from '@api/integrations/chatbot/chatwoot/dto/chatwoot.dto';\r\nimport { postgresClient } from '@api/integrations/chatbot/chatwoot/libs/postgres.client';\r\nimport { ChatwootService } from '@api/integrations/chatbot/chatwoot/services/chatwoot.service';\r\nimport { Chatwoot, configService } from '@config/env.config';\r\nimport { Logger } from '@config/logger.config';\r\nimport { inbox } from '@figuro/chatwoot-sdk';\r\nimport { Chatwoot as ChatwootModel, Contact, Message } from '@prisma/client';\r\nimport { proto } from 'baileys';\r\n\r\ntype ChatwootUser = {\r\n  user_type: string;\r\n  user_id: number;\r\n};\r\n\r\ntype FksChatwoot = {\r\n  phone_number: string;\r\n  contact_id: string;\r\n  conversation_id: string;\r\n};\r\n\r\ntype firstLastTimestamp = {\r\n  first: number;\r\n  last: number;\r\n};\r\n\r\ntype IWebMessageInfo = Omit<proto.IWebMessageInfo, 'key'> & Partial<Pick<proto.IWebMessageInfo, 'key'>>;\r\n\r\nclass ChatwootImport {\r\n  private logger = new Logger('ChatwootImport');\r\n  private repositoryMessagesCache = new Map<string, Set<string>>();\r\n  private historyMessages = new Map<string, Message[]>();\r\n  private historyContacts = new Map<string, Contact[]>();\r\n\r\n  public getRepositoryMessagesCache(instance: InstanceDto) {\r\n    return this.repositoryMessagesCache.has(instance.instanceName)\r\n      ? this.repositoryMessagesCache.get(instance.instanceName)\r\n      : null;\r\n  }\r\n\r\n  public setRepositoryMessagesCache(instance: InstanceDto, repositoryMessagesCache: Set<string>) {\r\n    this.repositoryMessagesCache.set(instance.instanceName, repositoryMessagesCache);\r\n  }\r\n\r\n  public deleteRepositoryMessagesCache(instance: InstanceDto) {\r\n    this.repositoryMessagesCache.delete(instance.instanceName);\r\n  }\r\n\r\n  public addHistoryMessages(instance: InstanceDto, messagesRaw: Message[]) {\r\n    const actualValue = this.historyMessages.has(instance.instanceName)\r\n      ? this.historyMessages.get(instance.instanceName)\r\n      : [];\r\n    this.historyMessages.set(instance.instanceName, [...actualValue, ...messagesRaw]);\r\n  }\r\n\r\n  public addHistoryContacts(instance: InstanceDto, contactsRaw: Contact[]) {\r\n    const actualValue = this.historyContacts.has(instance.instanceName)\r\n      ? this.historyContacts.get(instance.instanceName)\r\n      : [];\r\n    this.historyContacts.set(instance.instanceName, actualValue.concat(contactsRaw));\r\n  }\r\n\r\n  public deleteHistoryMessages(instance: InstanceDto) {\r\n    this.historyMessages.delete(instance.instanceName);\r\n  }\r\n\r\n  public deleteHistoryContacts(instance: InstanceDto) {\r\n    this.historyContacts.delete(instance.instanceName);\r\n  }\r\n\r\n  public clearAll(instance: InstanceDto) {\r\n    this.deleteRepositoryMessagesCache(instance);\r\n    this.deleteHistoryMessages(instance);\r\n    this.deleteHistoryContacts(instance);\r\n  }\r\n\r\n  public getHistoryMessagesLenght(instance: InstanceDto) {\r\n    return this.historyMessages.get(instance.instanceName)?.length ?? 0;\r\n  }\r\n\r\n  public async importHistoryContacts(instance: InstanceDto, provider: ChatwootDto) {\r\n    try {\r\n      if (this.getHistoryMessagesLenght(instance) > 0) {\r\n        return;\r\n      }\r\n\r\n      const pgClient = postgresClient.getChatwootConnection();\r\n\r\n      let totalContactsImported = 0;\r\n\r\n      const contacts = this.historyContacts.get(instance.instanceName) || [];\r\n      if (contacts.length === 0) {\r\n        return 0;\r\n      }\r\n\r\n      let contactsChunk: Contact[] = this.sliceIntoChunks(contacts, 3000);\r\n      while (contactsChunk.length > 0) {\r\n        const labelSql = `SELECT id FROM labels WHERE title = '${provider.nameInbox}' AND account_id = ${provider.accountId} LIMIT 1`;\r\n\r\n        let labelId = (await pgClient.query(labelSql))?.rows[0]?.id;\r\n\r\n        if (!labelId) {\r\n          // creating label in chatwoot db and getting the id\r\n          const sqlLabel = `INSERT INTO labels (title, color, show_on_sidebar, account_id, created_at, updated_at) VALUES ('${provider.nameInbox}', '#34039B', true, ${provider.accountId}, NOW(), NOW()) RETURNING id`;\r\n\r\n          labelId = (await pgClient.query(sqlLabel))?.rows[0]?.id;\r\n        }\r\n\r\n        // inserting contacts in chatwoot db\r\n        let sqlInsert = `INSERT INTO contacts\r\n          (name, phone_number, account_id, identifier, created_at, updated_at) VALUES `;\r\n        const bindInsert = [provider.accountId];\r\n\r\n        for (const contact of contactsChunk) {\r\n          bindInsert.push(contact.pushName);\r\n          const bindName = `$${bindInsert.length}`;\r\n\r\n          bindInsert.push(`+${contact.remoteJid.split('@')[0]}`);\r\n          const bindPhoneNumber = `$${bindInsert.length}`;\r\n\r\n          bindInsert.push(contact.remoteJid);\r\n          const bindIdentifier = `$${bindInsert.length}`;\r\n\r\n          sqlInsert += `(${bindName}, ${bindPhoneNumber}, $1, ${bindIdentifier}, NOW(), NOW()),`;\r\n        }\r\n        if (sqlInsert.slice(-1) === ',') {\r\n          sqlInsert = sqlInsert.slice(0, -1);\r\n        }\r\n        sqlInsert += ` ON CONFLICT (identifier, account_id)\r\n                       DO UPDATE SET\r\n                        name = EXCLUDED.name,\r\n                        phone_number = EXCLUDED.phone_number,\r\n                        identifier = EXCLUDED.identifier`;\r\n\r\n        totalContactsImported += (await pgClient.query(sqlInsert, bindInsert))?.rowCount ?? 0;\r\n\r\n        const sqlTags = `SELECT id FROM tags WHERE name = '${provider.nameInbox}' LIMIT 1`;\r\n\r\n        const tagData = (await pgClient.query(sqlTags))?.rows[0];\r\n        let tagId = tagData?.id;\r\n\r\n        const sqlTag = `INSERT INTO tags (name, taggings_count) VALUES ('${provider.nameInbox}', ${totalContactsImported}) ON CONFLICT (name) DO UPDATE SET taggings_count = tags.taggings_count + ${totalContactsImported} RETURNING id`;\r\n\r\n        tagId = (await pgClient.query(sqlTag))?.rows[0]?.id;\r\n\r\n        await pgClient.query(sqlTag);\r\n\r\n        let sqlInsertLabel = `INSERT INTO taggings (tag_id, taggable_type, taggable_id, context, created_at) VALUES `;\r\n\r\n        contactsChunk.forEach((contact) => {\r\n          const bindTaggableId = `(SELECT id FROM contacts WHERE identifier = '${contact.remoteJid}' AND account_id = ${provider.accountId})`;\r\n          sqlInsertLabel += `($1, $2, ${bindTaggableId}, $3, NOW()),`;\r\n        });\r\n\r\n        if (sqlInsertLabel.slice(-1) === ',') {\r\n          sqlInsertLabel = sqlInsertLabel.slice(0, -1);\r\n        }\r\n\r\n        await pgClient.query(sqlInsertLabel, [tagId, 'Contact', 'labels']);\r\n\r\n        contactsChunk = this.sliceIntoChunks(contacts, 3000);\r\n      }\r\n\r\n      this.deleteHistoryContacts(instance);\r\n\r\n      return totalContactsImported;\r\n    } catch (error) {\r\n      this.logger.error(`Error on import history contacts: ${error.toString()}`);\r\n    }\r\n  }\r\n\r\n  public async getExistingSourceIds(sourceIds: string[]): Promise<Set<string>> {\r\n    try {\r\n      const existingSourceIdsSet = new Set<string>();\r\n\r\n      if (sourceIds.length === 0) {\r\n        return existingSourceIdsSet;\r\n      }\r\n\r\n      const formattedSourceIds = sourceIds.map((sourceId) => `WAID:${sourceId.replace('WAID:', '')}`); // Make sure the sourceId is always formatted as WAID:1234567890\r\n      const query = 'SELECT source_id FROM messages WHERE source_id = ANY($1)';\r\n      const pgClient = postgresClient.getChatwootConnection();\r\n      const result = await pgClient.query(query, [formattedSourceIds]);\r\n\r\n      for (const row of result.rows) {\r\n        existingSourceIdsSet.add(row.source_id);\r\n      }\r\n\r\n      return existingSourceIdsSet;\r\n    } catch (error) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  public async importHistoryMessages(\r\n    instance: InstanceDto,\r\n    chatwootService: ChatwootService,\r\n    inbox: inbox,\r\n    provider: ChatwootModel,\r\n  ) {\r\n    try {\r\n      const pgClient = postgresClient.getChatwootConnection();\r\n\r\n      const chatwootUser = await this.getChatwootUser(provider);\r\n      if (!chatwootUser) {\r\n        throw new Error('User not found to import messages.');\r\n      }\r\n\r\n      let totalMessagesImported = 0;\r\n\r\n      let messagesOrdered = this.historyMessages.get(instance.instanceName) || [];\r\n      if (messagesOrdered.length === 0) {\r\n        return 0;\r\n      }\r\n\r\n      // ordering messages by number and timestamp asc\r\n      messagesOrdered.sort((a, b) => {\r\n        const aKey = a.key as {\r\n          remoteJid: string;\r\n        };\r\n\r\n        const bKey = b.key as {\r\n          remoteJid: string;\r\n        };\r\n\r\n        const aMessageTimestamp = a.messageTimestamp as any as number;\r\n        const bMessageTimestamp = b.messageTimestamp as any as number;\r\n\r\n        return parseInt(aKey.remoteJid) - parseInt(bKey.remoteJid) || aMessageTimestamp - bMessageTimestamp;\r\n      });\r\n\r\n      const allMessagesMappedByPhoneNumber = this.createMessagesMapByPhoneNumber(messagesOrdered);\r\n      // Map structure: +552199999999 => { first message timestamp from number, last message timestamp from number}\r\n      const phoneNumbersWithTimestamp = new Map<string, firstLastTimestamp>();\r\n      allMessagesMappedByPhoneNumber.forEach((messages: Message[], phoneNumber: string) => {\r\n        phoneNumbersWithTimestamp.set(phoneNumber, {\r\n          first: messages[0]?.messageTimestamp as any as number,\r\n          last: messages[messages.length - 1]?.messageTimestamp as any as number,\r\n        });\r\n      });\r\n\r\n      const existingSourceIds = await this.getExistingSourceIds(messagesOrdered.map((message: any) => message.key.id));\r\n      messagesOrdered = messagesOrdered.filter((message: any) => !existingSourceIds.has(message.key.id));\r\n      // processing messages in batch\r\n      const batchSize = 4000;\r\n      let messagesChunk: Message[] = this.sliceIntoChunks(messagesOrdered, batchSize);\r\n      while (messagesChunk.length > 0) {\r\n        // Map structure: +552199999999 => Message[]\r\n        const messagesByPhoneNumber = this.createMessagesMapByPhoneNumber(messagesChunk);\r\n\r\n        if (messagesByPhoneNumber.size > 0) {\r\n          const fksByNumber = await this.selectOrCreateFksFromChatwoot(\r\n            provider,\r\n            inbox,\r\n            phoneNumbersWithTimestamp,\r\n            messagesByPhoneNumber,\r\n          );\r\n\r\n          // inserting messages in chatwoot db\r\n          let sqlInsertMsg = `INSERT INTO messages\r\n            (content, processed_message_content, account_id, inbox_id, conversation_id, message_type, private, content_type,\r\n            sender_type, sender_id, source_id, created_at, updated_at) VALUES `;\r\n          const bindInsertMsg = [provider.accountId, inbox.id];\r\n\r\n          messagesByPhoneNumber.forEach((messages: any[], phoneNumber: string) => {\r\n            const fksChatwoot = fksByNumber.get(phoneNumber);\r\n\r\n            messages.forEach((message) => {\r\n              if (!message.message) {\r\n                return;\r\n              }\r\n\r\n              if (!fksChatwoot?.conversation_id || !fksChatwoot?.contact_id) {\r\n                return;\r\n              }\r\n\r\n              const contentMessage = this.getContentMessage(chatwootService, message);\r\n              if (!contentMessage) {\r\n                return;\r\n              }\r\n\r\n              bindInsertMsg.push(contentMessage);\r\n              const bindContent = `$${bindInsertMsg.length}`;\r\n\r\n              bindInsertMsg.push(fksChatwoot.conversation_id);\r\n              const bindConversationId = `$${bindInsertMsg.length}`;\r\n\r\n              bindInsertMsg.push(message.key.fromMe ? '1' : '0');\r\n              const bindMessageType = `$${bindInsertMsg.length}`;\r\n\r\n              bindInsertMsg.push(message.key.fromMe ? chatwootUser.user_type : 'Contact');\r\n              const bindSenderType = `$${bindInsertMsg.length}`;\r\n\r\n              bindInsertMsg.push(message.key.fromMe ? chatwootUser.user_id : fksChatwoot.contact_id);\r\n              const bindSenderId = `$${bindInsertMsg.length}`;\r\n\r\n              bindInsertMsg.push('WAID:' + message.key.id);\r\n              const bindSourceId = `$${bindInsertMsg.length}`;\r\n\r\n              bindInsertMsg.push(message.messageTimestamp as number);\r\n              const bindmessageTimestamp = `$${bindInsertMsg.length}`;\r\n\r\n              sqlInsertMsg += `(${bindContent}, ${bindContent}, $1, $2, ${bindConversationId}, ${bindMessageType}, FALSE, 0,\r\n                  ${bindSenderType},${bindSenderId},${bindSourceId}, to_timestamp(${bindmessageTimestamp}), to_timestamp(${bindmessageTimestamp})),`;\r\n            });\r\n          });\r\n          if (bindInsertMsg.length > 2) {\r\n            if (sqlInsertMsg.slice(-1) === ',') {\r\n              sqlInsertMsg = sqlInsertMsg.slice(0, -1);\r\n            }\r\n            totalMessagesImported += (await pgClient.query(sqlInsertMsg, bindInsertMsg))?.rowCount ?? 0;\r\n          }\r\n        }\r\n        messagesChunk = this.sliceIntoChunks(messagesOrdered, batchSize);\r\n      }\r\n\r\n      this.deleteHistoryMessages(instance);\r\n      this.deleteRepositoryMessagesCache(instance);\r\n\r\n      const providerData: ChatwootDto = {\r\n        ...provider,\r\n        ignoreJids: Array.isArray(provider.ignoreJids) ? provider.ignoreJids.map((event) => String(event)) : [],\r\n      };\r\n\r\n      this.importHistoryContacts(instance, providerData);\r\n\r\n      return totalMessagesImported;\r\n    } catch (error) {\r\n      this.logger.error(`Error on import history messages: ${error.toString()}`);\r\n\r\n      this.deleteHistoryMessages(instance);\r\n      this.deleteRepositoryMessagesCache(instance);\r\n    }\r\n  }\r\n\r\n  public async selectOrCreateFksFromChatwoot(\r\n    provider: ChatwootModel,\r\n    inbox: inbox,\r\n    phoneNumbersWithTimestamp: Map<string, firstLastTimestamp>,\r\n    messagesByPhoneNumber: Map<string, Message[]>,\r\n  ): Promise<Map<string, FksChatwoot>> {\r\n    const pgClient = postgresClient.getChatwootConnection();\r\n\r\n    const bindValues = [provider.accountId, inbox.id];\r\n    const phoneNumberBind = Array.from(messagesByPhoneNumber.keys())\r\n      .map((phoneNumber) => {\r\n        const phoneNumberTimestamp = phoneNumbersWithTimestamp.get(phoneNumber);\r\n\r\n        if (phoneNumberTimestamp) {\r\n          bindValues.push(phoneNumber);\r\n          let bindStr = `($${bindValues.length},`;\r\n\r\n          bindValues.push(phoneNumberTimestamp.first);\r\n          bindStr += `$${bindValues.length},`;\r\n\r\n          bindValues.push(phoneNumberTimestamp.last);\r\n          return `${bindStr}$${bindValues.length})`;\r\n        }\r\n      })\r\n      .join(',');\r\n\r\n    // select (or insert when necessary) data from tables contacts, contact_inboxes, conversations from chatwoot db\r\n    const sqlFromChatwoot = `WITH\r\n              phone_number AS (\r\n                SELECT phone_number, created_at::INTEGER, last_activity_at::INTEGER FROM (\r\n                  VALUES \r\n                   ${phoneNumberBind}\r\n                 ) as t (phone_number, created_at, last_activity_at)\r\n              ),\r\n\r\n              only_new_phone_number AS (\r\n                SELECT * FROM phone_number\r\n                WHERE phone_number NOT IN (\r\n                  SELECT phone_number\r\n                  FROM contacts\r\n                    JOIN contact_inboxes ci ON ci.contact_id = contacts.id AND ci.inbox_id = $2\r\n                    JOIN conversations con ON con.contact_inbox_id = ci.id \r\n                      AND con.account_id = $1\r\n                      AND con.inbox_id = $2\r\n                      AND con.contact_id = contacts.id\r\n                  WHERE contacts.account_id = $1\r\n                )\r\n              ),\r\n\r\n              new_contact AS (\r\n                INSERT INTO contacts (name, phone_number, account_id, identifier, created_at, updated_at)\r\n                SELECT REPLACE(p.phone_number, '+', ''), p.phone_number, $1, CONCAT(REPLACE(p.phone_number, '+', ''),\r\n                  '@s.whatsapp.net'), to_timestamp(p.created_at), to_timestamp(p.last_activity_at)\r\n                FROM only_new_phone_number AS p\r\n                ON CONFLICT(identifier, account_id) DO UPDATE SET updated_at = EXCLUDED.updated_at\r\n                RETURNING id, phone_number, created_at, updated_at\r\n              ),\r\n\r\n              new_contact_inbox AS (\r\n                INSERT INTO contact_inboxes (contact_id, inbox_id, source_id, created_at, updated_at)\r\n                SELECT new_contact.id, $2, gen_random_uuid(), new_contact.created_at, new_contact.updated_at\r\n                FROM new_contact \r\n                RETURNING id, contact_id, created_at, updated_at\r\n              ),\r\n\r\n              new_conversation AS (\r\n                INSERT INTO conversations (account_id, inbox_id, status, contact_id,\r\n                  contact_inbox_id, uuid, last_activity_at, created_at, updated_at)\r\n                SELECT $1, $2, 0, new_contact_inbox.contact_id, new_contact_inbox.id, gen_random_uuid(),\r\n                  new_contact_inbox.updated_at, new_contact_inbox.created_at, new_contact_inbox.updated_at\r\n                FROM new_contact_inbox\r\n                RETURNING id, contact_id\r\n              )\r\n\r\n              SELECT new_contact.phone_number, new_conversation.contact_id, new_conversation.id AS conversation_id\r\n              FROM new_conversation \r\n              JOIN new_contact ON new_conversation.contact_id = new_contact.id\r\n\r\n              UNION\r\n\r\n              SELECT p.phone_number, c.id contact_id, con.id conversation_id\r\n                FROM phone_number p\r\n              JOIN contacts c ON c.phone_number = p.phone_number\r\n              JOIN contact_inboxes ci ON ci.contact_id = c.id AND ci.inbox_id = $2\r\n              JOIN conversations con ON con.contact_inbox_id = ci.id AND con.account_id = $1\r\n                AND con.inbox_id = $2 AND con.contact_id = c.id`;\r\n\r\n    const fksFromChatwoot = await pgClient.query(sqlFromChatwoot, bindValues);\r\n\r\n    return new Map(fksFromChatwoot.rows.map((item: FksChatwoot) => [item.phone_number, item]));\r\n  }\r\n\r\n  public async getChatwootUser(provider: ChatwootModel): Promise<ChatwootUser> {\r\n    try {\r\n      const pgClient = postgresClient.getChatwootConnection();\r\n\r\n      const sqlUser = `SELECT owner_type AS user_type, owner_id AS user_id\r\n                         FROM access_tokens\r\n                       WHERE token = $1`;\r\n\r\n      return (await pgClient.query(sqlUser, [provider.token]))?.rows[0] || false;\r\n    } catch (error) {\r\n      this.logger.error(`Error on getChatwootUser: ${error.toString()}`);\r\n    }\r\n  }\r\n\r\n  public createMessagesMapByPhoneNumber(messages: Message[]): Map<string, Message[]> {\r\n    return messages.reduce((acc: Map<string, Message[]>, message: Message) => {\r\n      const key = message?.key as {\r\n        remoteJid: string;\r\n      };\r\n      if (!this.isIgnorePhoneNumber(key?.remoteJid)) {\r\n        const phoneNumber = key?.remoteJid?.split('@')[0];\r\n        if (phoneNumber) {\r\n          const phoneNumberPlus = `+${phoneNumber}`;\r\n          const messages = acc.has(phoneNumberPlus) ? acc.get(phoneNumberPlus) : [];\r\n          messages.push(message);\r\n          acc.set(phoneNumberPlus, messages);\r\n        }\r\n      }\r\n\r\n      return acc;\r\n    }, new Map());\r\n  }\r\n\r\n  public async getContactsOrderByRecentConversations(\r\n    inbox: inbox,\r\n    provider: ChatwootModel,\r\n    limit = 50,\r\n  ): Promise<{ id: number; phone_number: string; identifier: string }[]> {\r\n    try {\r\n      const pgClient = postgresClient.getChatwootConnection();\r\n\r\n      const sql = `SELECT contacts.id, contacts.identifier, contacts.phone_number\r\n                     FROM conversations\r\n                   JOIN contacts ON contacts.id = conversations.contact_id\r\n                   WHERE conversations.account_id = $1\r\n                     AND inbox_id = $2\r\n                   ORDER BY conversations.last_activity_at DESC\r\n                   LIMIT $3`;\r\n\r\n      return (await pgClient.query(sql, [provider.accountId, inbox.id, limit]))?.rows;\r\n    } catch (error) {\r\n      this.logger.error(`Error on get recent conversations: ${error.toString()}`);\r\n    }\r\n  }\r\n\r\n  public getContentMessage(chatwootService: ChatwootService, msg: IWebMessageInfo) {\r\n    const contentMessage = chatwootService.getConversationMessage(msg.message);\r\n    if (contentMessage) {\r\n      return contentMessage;\r\n    }\r\n\r\n    if (!configService.get<Chatwoot>('CHATWOOT').IMPORT.PLACEHOLDER_MEDIA_MESSAGE) {\r\n      return '';\r\n    }\r\n\r\n    const types = {\r\n      documentMessage: msg.message.documentMessage,\r\n      documentWithCaptionMessage: msg.message.documentWithCaptionMessage?.message?.documentMessage,\r\n      imageMessage: msg.message.imageMessage,\r\n      videoMessage: msg.message.videoMessage,\r\n      audioMessage: msg.message.audioMessage,\r\n      stickerMessage: msg.message.stickerMessage,\r\n      templateMessage: msg.message.templateMessage?.hydratedTemplate?.hydratedContentText,\r\n    };\r\n    const typeKey = Object.keys(types).find((key) => types[key] !== undefined);\r\n\r\n    switch (typeKey) {\r\n      case 'documentMessage':\r\n        return `_<File: ${msg.message.documentMessage.fileName}${\r\n          msg.message.documentMessage.caption ? ` ${msg.message.documentMessage.caption}` : ''\r\n        }>_`;\r\n\r\n      case 'documentWithCaptionMessage':\r\n        return `_<File: ${msg.message.documentWithCaptionMessage.message.documentMessage.fileName}${\r\n          msg.message.documentWithCaptionMessage.message.documentMessage.caption\r\n            ? ` ${msg.message.documentWithCaptionMessage.message.documentMessage.caption}`\r\n            : ''\r\n        }>_`;\r\n\r\n      case 'templateMessage':\r\n        return msg.message.templateMessage.hydratedTemplate.hydratedTitleText\r\n          ? `*${msg.message.templateMessage.hydratedTemplate.hydratedTitleText}*\\\\n`\r\n          : '' + msg.message.templateMessage.hydratedTemplate.hydratedContentText;\r\n\r\n      case 'imageMessage':\r\n        return '_<Image Message>_';\r\n\r\n      case 'videoMessage':\r\n        return '_<Video Message>_';\r\n\r\n      case 'audioMessage':\r\n        return '_<Audio Message>_';\r\n\r\n      case 'stickerMessage':\r\n        return '_<Sticker Message>_';\r\n\r\n      default:\r\n        return '';\r\n    }\r\n  }\r\n\r\n  public sliceIntoChunks(arr: any[], chunkSize: number) {\r\n    return arr.splice(0, chunkSize);\r\n  }\r\n\r\n  public isGroup(remoteJid: string) {\r\n    return remoteJid.includes('@g.us');\r\n  }\r\n\r\n  public isIgnorePhoneNumber(remoteJid: string) {\r\n    return this.isGroup(remoteJid) || remoteJid === 'status@broadcast' || remoteJid === '0@s.whatsapp.net';\r\n  }\r\n\r\n  public updateMessageSourceID(messageId: string | number, sourceId: string) {\r\n    const pgClient = postgresClient.getChatwootConnection();\r\n\r\n    const sql = `UPDATE messages SET source_id = $1, status = 0, created_at = NOW(), updated_at = NOW() WHERE id = $2;`;\r\n\r\n    return pgClient.query(sql, [`WAID:${sourceId}`, messageId]);\r\n  }\r\n}\r\n\r\nexport const chatwootImport = new ChatwootImport();\r\n","import { isBooleanString } from 'class-validator';\r\nimport dotenv from 'dotenv';\r\n\r\ndotenv.config();\r\n\r\nexport type HttpServer = {\r\n  TYPE: 'http' | 'https';\r\n  PORT: number;\r\n  URL: string;\r\n  DISABLE_DOCS: boolean;\r\n  DISABLE_MANAGER: boolean;\r\n};\r\n\r\nexport type HttpMethods = 'POST' | 'GET' | 'PUT' | 'DELETE';\r\nexport type Cors = {\r\n  ORIGIN: string[];\r\n  METHODS: HttpMethods[];\r\n  CREDENTIALS: boolean;\r\n};\r\n\r\nexport type LogBaileys = 'fatal' | 'error' | 'warn' | 'info' | 'debug' | 'trace';\r\n\r\nexport type LogLevel = 'ERROR' | 'WARN' | 'DEBUG' | 'INFO' | 'LOG' | 'VERBOSE' | 'DARK' | 'WEBHOOKS' | 'WEBSOCKET';\r\n\r\nexport type Log = {\r\n  LEVEL: LogLevel[];\r\n  COLOR: boolean;\r\n  BAILEYS: LogBaileys;\r\n};\r\n\r\nexport type ProviderSession = {\r\n  ENABLED: boolean;\r\n  HOST: string;\r\n  PORT: string;\r\n  PREFIX: string;\r\n};\r\n\r\nexport type SaveData = {\r\n  INSTANCE: boolean;\r\n  HISTORIC: boolean;\r\n  NEW_MESSAGE: boolean;\r\n  MESSAGE_UPDATE: boolean;\r\n  CONTACTS: boolean;\r\n  CHATS: boolean;\r\n  LABELS: boolean;\r\n  IS_ON_WHATSAPP: boolean;\r\n  IS_ON_WHATSAPP_DAYS: number;\r\n};\r\n\r\nexport type DBConnection = {\r\n  URI: string;\r\n  CLIENT_NAME: string;\r\n};\r\nexport type Database = {\r\n  CONNECTION: DBConnection;\r\n  PROVIDER: string;\r\n  SAVE_DATA: SaveData;\r\n  DELETE_DATA: DeleteData;\r\n};\r\n\r\nexport type DeleteData = {\r\n  LOGICAL_MESSAGE_DELETE: boolean;\r\n};\r\nexport type EventsRabbitmq = {\r\n  APPLICATION_STARTUP: boolean;\r\n  INSTANCE_CREATE: boolean;\r\n  INSTANCE_DELETE: boolean;\r\n  QRCODE_UPDATED: boolean;\r\n  MESSAGES_SET: boolean;\r\n  MESSAGES_UPSERT: boolean;\r\n  MESSAGES_EDITED: boolean;\r\n  MESSAGES_UPDATE: boolean;\r\n  MESSAGES_DELETE: boolean;\r\n  SEND_MESSAGE: boolean;\r\n  CONTACTS_SET: boolean;\r\n  CONTACTS_UPDATE: boolean;\r\n  CONTACTS_UPSERT: boolean;\r\n  PRESENCE_UPDATE: boolean;\r\n  CHATS_SET: boolean;\r\n  CHATS_UPDATE: boolean;\r\n  CHATS_DELETE: boolean;\r\n  CHATS_UPSERT: boolean;\r\n  CONNECTION_UPDATE: boolean;\r\n  LABELS_EDIT: boolean;\r\n  LABELS_ASSOCIATION: boolean;\r\n  GROUPS_UPSERT: boolean;\r\n  GROUP_UPDATE: boolean;\r\n  GROUP_PARTICIPANTS_UPDATE: boolean;\r\n  CALL: boolean;\r\n  TYPEBOT_START: boolean;\r\n  TYPEBOT_CHANGE_STATUS: boolean;\r\n};\r\n\r\nexport type Rabbitmq = {\r\n  ENABLED: boolean;\r\n  URI: string;\r\n  EXCHANGE_NAME: string;\r\n  GLOBAL_ENABLED: boolean;\r\n  EVENTS: EventsRabbitmq;\r\n  PREFIX_KEY: string;\r\n};\r\n\r\nexport type Sqs = {\r\n  ENABLED: boolean;\r\n  ACCESS_KEY_ID: string;\r\n  SECRET_ACCESS_KEY: string;\r\n  ACCOUNT_ID: string;\r\n  REGION: string;\r\n};\r\n\r\nexport type Websocket = {\r\n  ENABLED: boolean;\r\n  GLOBAL_EVENTS: boolean;\r\n};\r\n\r\nexport type WaBusiness = {\r\n  TOKEN_WEBHOOK: string;\r\n  URL: string;\r\n  VERSION: string;\r\n  LANGUAGE: string;\r\n};\r\n\r\nexport type EventsWebhook = {\r\n  APPLICATION_STARTUP: boolean;\r\n  INSTANCE_CREATE: boolean;\r\n  INSTANCE_DELETE: boolean;\r\n  QRCODE_UPDATED: boolean;\r\n  MESSAGES_SET: boolean;\r\n  MESSAGES_UPSERT: boolean;\r\n  MESSAGES_EDITED: boolean;\r\n  MESSAGES_UPDATE: boolean;\r\n  MESSAGES_DELETE: boolean;\r\n  SEND_MESSAGE: boolean;\r\n  CONTACTS_SET: boolean;\r\n  CONTACTS_UPDATE: boolean;\r\n  CONTACTS_UPSERT: boolean;\r\n  PRESENCE_UPDATE: boolean;\r\n  CHATS_SET: boolean;\r\n  CHATS_UPDATE: boolean;\r\n  CHATS_DELETE: boolean;\r\n  CHATS_UPSERT: boolean;\r\n  CONNECTION_UPDATE: boolean;\r\n  LABELS_EDIT: boolean;\r\n  LABELS_ASSOCIATION: boolean;\r\n  GROUPS_UPSERT: boolean;\r\n  GROUP_UPDATE: boolean;\r\n  GROUP_PARTICIPANTS_UPDATE: boolean;\r\n  CALL: boolean;\r\n  TYPEBOT_START: boolean;\r\n  TYPEBOT_CHANGE_STATUS: boolean;\r\n  ERRORS: boolean;\r\n  ERRORS_WEBHOOK: string;\r\n};\r\n\r\nexport type EventsPusher = {\r\n  APPLICATION_STARTUP: boolean;\r\n  INSTANCE_CREATE: boolean;\r\n  INSTANCE_DELETE: boolean;\r\n  QRCODE_UPDATED: boolean;\r\n  MESSAGES_SET: boolean;\r\n  MESSAGES_UPSERT: boolean;\r\n  MESSAGES_EDITED: boolean;\r\n  MESSAGES_UPDATE: boolean;\r\n  MESSAGES_DELETE: boolean;\r\n  SEND_MESSAGE: boolean;\r\n  CONTACTS_SET: boolean;\r\n  CONTACTS_UPDATE: boolean;\r\n  CONTACTS_UPSERT: boolean;\r\n  PRESENCE_UPDATE: boolean;\r\n  CHATS_SET: boolean;\r\n  CHATS_UPDATE: boolean;\r\n  CHATS_DELETE: boolean;\r\n  CHATS_UPSERT: boolean;\r\n  CONNECTION_UPDATE: boolean;\r\n  LABELS_EDIT: boolean;\r\n  LABELS_ASSOCIATION: boolean;\r\n  GROUPS_UPSERT: boolean;\r\n  GROUP_UPDATE: boolean;\r\n  GROUP_PARTICIPANTS_UPDATE: boolean;\r\n  CALL: boolean;\r\n  TYPEBOT_START: boolean;\r\n  TYPEBOT_CHANGE_STATUS: boolean;\r\n};\r\n\r\nexport type ApiKey = { KEY: string };\r\n\r\nexport type Auth = {\r\n  API_KEY: ApiKey;\r\n  EXPOSE_IN_FETCH_INSTANCES: boolean;\r\n};\r\n\r\nexport type DelInstance = number | boolean;\r\n\r\nexport type Language = string | 'en';\r\n\r\nexport type GlobalWebhook = {\r\n  URL: string;\r\n  ENABLED: boolean;\r\n  WEBHOOK_BY_EVENTS: boolean;\r\n};\r\n\r\nexport type GlobalPusher = {\r\n  ENABLED: boolean;\r\n  APP_ID: string;\r\n  KEY: string;\r\n  SECRET: string;\r\n  CLUSTER: string;\r\n  USE_TLS: boolean;\r\n};\r\n\r\nexport type CacheConfRedis = {\r\n  ENABLED: boolean;\r\n  URI: string;\r\n  PREFIX_KEY: string;\r\n  TTL: number;\r\n  SAVE_INSTANCES: boolean;\r\n};\r\nexport type CacheConfLocal = {\r\n  ENABLED: boolean;\r\n  TTL: number;\r\n};\r\nexport type SslConf = { PRIVKEY: string; FULLCHAIN: string };\r\nexport type Webhook = { GLOBAL?: GlobalWebhook; EVENTS: EventsWebhook };\r\nexport type Pusher = { ENABLED: boolean; GLOBAL?: GlobalPusher; EVENTS: EventsPusher };\r\nexport type ConfigSessionPhone = { CLIENT: string; NAME: string; VERSION: string };\r\nexport type QrCode = { LIMIT: number; COLOR: string };\r\nexport type Typebot = { ENABLED: boolean; API_VERSION: string; SEND_MEDIA_BASE64: boolean };\r\nexport type Chatwoot = {\r\n  ENABLED: boolean;\r\n  MESSAGE_DELETE: boolean;\r\n  MESSAGE_READ: boolean;\r\n  BOT_CONTACT: boolean;\r\n  IMPORT: {\r\n    DATABASE: {\r\n      CONNECTION: {\r\n        URI: string;\r\n      };\r\n    };\r\n    PLACEHOLDER_MEDIA_MESSAGE: boolean;\r\n  };\r\n};\r\nexport type Openai = { ENABLED: boolean; API_KEY_GLOBAL?: string };\r\nexport type Dify = { ENABLED: boolean };\r\n\r\nexport type S3 = {\r\n  ACCESS_KEY: string;\r\n  SECRET_KEY: string;\r\n  ENDPOINT: string;\r\n  BUCKET_NAME: string;\r\n  ENABLE: boolean;\r\n  PORT?: number;\r\n  USE_SSL?: boolean;\r\n  REGION?: string;\r\n};\r\n\r\nexport type CacheConf = { REDIS: CacheConfRedis; LOCAL: CacheConfLocal };\r\nexport type Production = boolean;\r\n\r\nexport interface Env {\r\n  SERVER: HttpServer;\r\n  CORS: Cors;\r\n  SSL_CONF: SslConf;\r\n  PROVIDER: ProviderSession;\r\n  DATABASE: Database;\r\n  RABBITMQ: Rabbitmq;\r\n  SQS: Sqs;\r\n  WEBSOCKET: Websocket;\r\n  WA_BUSINESS: WaBusiness;\r\n  LOG: Log;\r\n  DEL_INSTANCE: DelInstance;\r\n  DEL_TEMP_INSTANCES: boolean;\r\n  LANGUAGE: Language;\r\n  WEBHOOK: Webhook;\r\n  PUSHER: Pusher;\r\n  CONFIG_SESSION_PHONE: ConfigSessionPhone;\r\n  QRCODE: QrCode;\r\n  TYPEBOT: Typebot;\r\n  CHATWOOT: Chatwoot;\r\n  OPENAI: Openai;\r\n  DIFY: Dify;\r\n  CACHE: CacheConf;\r\n  S3?: S3;\r\n  AUTHENTICATION: Auth;\r\n  PRODUCTION?: Production;\r\n}\r\n\r\nexport type Key = keyof Env;\r\n\r\nexport class ConfigService {\r\n  constructor() {\r\n    this.loadEnv();\r\n  }\r\n\r\n  private env: Env;\r\n\r\n  public get<T = any>(key: Key) {\r\n    return this.env[key] as T;\r\n  }\r\n\r\n  private loadEnv() {\r\n    this.env = this.envProcess();\r\n    this.env.PRODUCTION = process.env?.NODE_ENV === 'PROD';\r\n    if (process.env?.DOCKER_ENV === 'true') {\r\n      this.env.SERVER.TYPE = process.env.SERVER_TYPE as 'http' | 'http';\r\n      this.env.SERVER.PORT = Number.parseInt(process.env.SERVER_PORT) || 8080;\r\n    }\r\n  }\r\n\r\n  private envProcess(): Env {\r\n    return {\r\n      SERVER: {\r\n        TYPE: (process.env.SERVER_TYPE as 'http' | 'https') || 'http',\r\n        PORT: Number.parseInt(process.env.SERVER_PORT) || 8080,\r\n        URL: process.env.SERVER_URL,\r\n        DISABLE_DOCS: process.env?.SERVER_DISABLE_DOCS === 'true',\r\n        DISABLE_MANAGER: process.env?.SERVER_DISABLE_MANAGER === 'true',\r\n      },\r\n      CORS: {\r\n        ORIGIN: process.env.CORS_ORIGIN?.split(',') || ['*'],\r\n        METHODS:\r\n          (process.env.CORS_METHODS?.split(',') as HttpMethods[]) ||\r\n          (['POST', 'GET', 'PUT', 'DELETE'] as HttpMethods[]),\r\n        CREDENTIALS: process.env?.CORS_CREDENTIALS === 'true',\r\n      },\r\n      SSL_CONF: {\r\n        PRIVKEY: process.env?.SSL_CONF_PRIVKEY || '',\r\n        FULLCHAIN: process.env?.SSL_CONF_FULLCHAIN || '',\r\n      },\r\n      PROVIDER: {\r\n        ENABLED: process.env?.PROVIDER_ENABLED === 'true',\r\n        HOST: process.env.PROVIDER_HOST,\r\n        PORT: process.env?.PROVIDER_PORT || '5656',\r\n        PREFIX: process.env?.PROVIDER_PREFIX || 'evolution',\r\n      },\r\n      DATABASE: {\r\n        CONNECTION: {\r\n          URI: process.env.DATABASE_CONNECTION_URI || '',\r\n          CLIENT_NAME: process.env.DATABASE_CONNECTION_CLIENT_NAME || 'evolution',\r\n        },\r\n        PROVIDER: process.env.DATABASE_PROVIDER || 'postgresql',\r\n        SAVE_DATA: {\r\n          INSTANCE: process.env?.DATABASE_SAVE_DATA_INSTANCE === 'true',\r\n          NEW_MESSAGE: process.env?.DATABASE_SAVE_DATA_NEW_MESSAGE === 'true',\r\n          MESSAGE_UPDATE: process.env?.DATABASE_SAVE_MESSAGE_UPDATE === 'true',\r\n          CONTACTS: process.env?.DATABASE_SAVE_DATA_CONTACTS === 'true',\r\n          CHATS: process.env?.DATABASE_SAVE_DATA_CHATS === 'true',\r\n          HISTORIC: process.env?.DATABASE_SAVE_DATA_HISTORIC === 'true',\r\n          LABELS: process.env?.DATABASE_SAVE_DATA_LABELS === 'true',\r\n          IS_ON_WHATSAPP: process.env?.DATABASE_SAVE_IS_ON_WHATSAPP === 'true',\r\n          IS_ON_WHATSAPP_DAYS: Number.parseInt(process.env?.DATABASE_SAVE_IS_ON_WHATSAPP_DAYS ?? '7'),\r\n        },\r\n        DELETE_DATA: {\r\n          LOGICAL_MESSAGE_DELETE: process.env?.DATABASE_DELETE_MESSAGE === 'true',\r\n        },\r\n      },\r\n      RABBITMQ: {\r\n        ENABLED: process.env?.RABBITMQ_ENABLED === 'true',\r\n        GLOBAL_ENABLED: process.env?.RABBITMQ_GLOBAL_ENABLED === 'true',\r\n        PREFIX_KEY: process.env?.RABBITMQ_PREFIX_KEY || 'evolution',\r\n        EXCHANGE_NAME: process.env?.RABBITMQ_EXCHANGE_NAME || 'evolution_exchange',\r\n        URI: process.env.RABBITMQ_URI || '',\r\n        EVENTS: {\r\n          APPLICATION_STARTUP: process.env?.RABBITMQ_EVENTS_APPLICATION_STARTUP === 'true',\r\n          INSTANCE_CREATE: process.env?.RABBITMQ_EVENTS_INSTANCE_CREATE === 'true',\r\n          INSTANCE_DELETE: process.env?.RABBITMQ_EVENTS_INSTANCE_DELETE === 'true',\r\n          QRCODE_UPDATED: process.env?.RABBITMQ_EVENTS_QRCODE_UPDATED === 'true',\r\n          MESSAGES_SET: process.env?.RABBITMQ_EVENTS_MESSAGES_SET === 'true',\r\n          MESSAGES_UPSERT: process.env?.RABBITMQ_EVENTS_MESSAGES_UPSERT === 'true',\r\n          MESSAGES_EDITED: process.env?.RABBITMQ_EVENTS_MESSAGES_EDITED === 'true',\r\n          MESSAGES_UPDATE: process.env?.RABBITMQ_EVENTS_MESSAGES_UPDATE === 'true',\r\n          MESSAGES_DELETE: process.env?.RABBITMQ_EVENTS_MESSAGES_DELETE === 'true',\r\n          SEND_MESSAGE: process.env?.RABBITMQ_EVENTS_SEND_MESSAGE === 'true',\r\n          CONTACTS_SET: process.env?.RABBITMQ_EVENTS_CONTACTS_SET === 'true',\r\n          CONTACTS_UPDATE: process.env?.RABBITMQ_EVENTS_CONTACTS_UPDATE === 'true',\r\n          CONTACTS_UPSERT: process.env?.RABBITMQ_EVENTS_CONTACTS_UPSERT === 'true',\r\n          PRESENCE_UPDATE: process.env?.RABBITMQ_EVENTS_PRESENCE_UPDATE === 'true',\r\n          CHATS_SET: process.env?.RABBITMQ_EVENTS_CHATS_SET === 'true',\r\n          CHATS_UPDATE: process.env?.RABBITMQ_EVENTS_CHATS_UPDATE === 'true',\r\n          CHATS_UPSERT: process.env?.RABBITMQ_EVENTS_CHATS_UPSERT === 'true',\r\n          CHATS_DELETE: process.env?.RABBITMQ_EVENTS_CHATS_DELETE === 'true',\r\n          CONNECTION_UPDATE: process.env?.RABBITMQ_EVENTS_CONNECTION_UPDATE === 'true',\r\n          LABELS_EDIT: process.env?.RABBITMQ_EVENTS_LABELS_EDIT === 'true',\r\n          LABELS_ASSOCIATION: process.env?.RABBITMQ_EVENTS_LABELS_ASSOCIATION === 'true',\r\n          GROUPS_UPSERT: process.env?.RABBITMQ_EVENTS_GROUPS_UPSERT === 'true',\r\n          GROUP_UPDATE: process.env?.RABBITMQ_EVENTS_GROUPS_UPDATE === 'true',\r\n          GROUP_PARTICIPANTS_UPDATE: process.env?.RABBITMQ_EVENTS_GROUP_PARTICIPANTS_UPDATE === 'true',\r\n          CALL: process.env?.RABBITMQ_EVENTS_CALL === 'true',\r\n          TYPEBOT_START: process.env?.RABBITMQ_EVENTS_TYPEBOT_START === 'true',\r\n          TYPEBOT_CHANGE_STATUS: process.env?.RABBITMQ_EVENTS_TYPEBOT_CHANGE_STATUS === 'true',\r\n        },\r\n      },\r\n      SQS: {\r\n        ENABLED: process.env?.SQS_ENABLED === 'true',\r\n        ACCESS_KEY_ID: process.env.SQS_ACCESS_KEY_ID || '',\r\n        SECRET_ACCESS_KEY: process.env.SQS_SECRET_ACCESS_KEY || '',\r\n        ACCOUNT_ID: process.env.SQS_ACCOUNT_ID || '',\r\n        REGION: process.env.SQS_REGION || '',\r\n      },\r\n      WEBSOCKET: {\r\n        ENABLED: process.env?.WEBSOCKET_ENABLED === 'true',\r\n        GLOBAL_EVENTS: process.env?.WEBSOCKET_GLOBAL_EVENTS === 'true',\r\n      },\r\n      PUSHER: {\r\n        ENABLED: process.env?.PUSHER_ENABLED === 'true',\r\n        GLOBAL: {\r\n          ENABLED: process.env?.PUSHER_GLOBAL_ENABLED === 'true',\r\n          APP_ID: process.env?.PUSHER_GLOBAL_APP_ID || '',\r\n          KEY: process.env?.PUSHER_GLOBAL_KEY || '',\r\n          SECRET: process.env?.PUSHER_GLOBAL_SECRET || '',\r\n          CLUSTER: process.env?.PUSHER_GLOBAL_CLUSTER || '',\r\n          USE_TLS: process.env?.PUSHER_GLOBAL_USE_TLS === 'true',\r\n        },\r\n        EVENTS: {\r\n          APPLICATION_STARTUP: process.env?.PUSHER_EVENTS_APPLICATION_STARTUP === 'true',\r\n          INSTANCE_CREATE: process.env?.PUSHER_EVENTS_INSTANCE_CREATE === 'true',\r\n          INSTANCE_DELETE: process.env?.PUSHER_EVENTS_INSTANCE_DELETE === 'true',\r\n          QRCODE_UPDATED: process.env?.PUSHER_EVENTS_QRCODE_UPDATED === 'true',\r\n          MESSAGES_SET: process.env?.PUSHER_EVENTS_MESSAGES_SET === 'true',\r\n          MESSAGES_UPSERT: process.env?.PUSHER_EVENTS_MESSAGES_UPSERT === 'true',\r\n          MESSAGES_EDITED: process.env?.PUSHER_EVENTS_MESSAGES_EDITED === 'true',\r\n          MESSAGES_UPDATE: process.env?.PUSHER_EVENTS_MESSAGES_UPDATE === 'true',\r\n          MESSAGES_DELETE: process.env?.PUSHER_EVENTS_MESSAGES_DELETE === 'true',\r\n          SEND_MESSAGE: process.env?.PUSHER_EVENTS_SEND_MESSAGE === 'true',\r\n          CONTACTS_SET: process.env?.PUSHER_EVENTS_CONTACTS_SET === 'true',\r\n          CONTACTS_UPDATE: process.env?.PUSHER_EVENTS_CONTACTS_UPDATE === 'true',\r\n          CONTACTS_UPSERT: process.env?.PUSHER_EVENTS_CONTACTS_UPSERT === 'true',\r\n          PRESENCE_UPDATE: process.env?.PUSHER_EVENTS_PRESENCE_UPDATE === 'true',\r\n          CHATS_SET: process.env?.PUSHER_EVENTS_CHATS_SET === 'true',\r\n          CHATS_UPDATE: process.env?.PUSHER_EVENTS_CHATS_UPDATE === 'true',\r\n          CHATS_UPSERT: process.env?.PUSHER_EVENTS_CHATS_UPSERT === 'true',\r\n          CHATS_DELETE: process.env?.PUSHER_EVENTS_CHATS_DELETE === 'true',\r\n          CONNECTION_UPDATE: process.env?.PUSHER_EVENTS_CONNECTION_UPDATE === 'true',\r\n          LABELS_EDIT: process.env?.PUSHER_EVENTS_LABELS_EDIT === 'true',\r\n          LABELS_ASSOCIATION: process.env?.PUSHER_EVENTS_LABELS_ASSOCIATION === 'true',\r\n          GROUPS_UPSERT: process.env?.PUSHER_EVENTS_GROUPS_UPSERT === 'true',\r\n          GROUP_UPDATE: process.env?.PUSHER_EVENTS_GROUPS_UPDATE === 'true',\r\n          GROUP_PARTICIPANTS_UPDATE: process.env?.PUSHER_EVENTS_GROUP_PARTICIPANTS_UPDATE === 'true',\r\n          CALL: process.env?.PUSHER_EVENTS_CALL === 'true',\r\n          TYPEBOT_START: process.env?.PUSHER_EVENTS_TYPEBOT_START === 'true',\r\n          TYPEBOT_CHANGE_STATUS: process.env?.PUSHER_EVENTS_TYPEBOT_CHANGE_STATUS === 'true',\r\n        },\r\n      },\r\n      WA_BUSINESS: {\r\n        TOKEN_WEBHOOK: process.env.WA_BUSINESS_TOKEN_WEBHOOK || 'evolution',\r\n        URL: process.env.WA_BUSINESS_URL || 'https://graph.facebook.com',\r\n        VERSION: process.env.WA_BUSINESS_VERSION || 'v18.0',\r\n        LANGUAGE: process.env.WA_BUSINESS_LANGUAGE || 'en',\r\n      },\r\n      LOG: {\r\n        LEVEL:\r\n          (process.env?.LOG_LEVEL?.split(',') as LogLevel[]) ||\r\n          (['ERROR', 'WARN', 'DEBUG', 'INFO', 'LOG', 'VERBOSE', 'DARK', 'WEBHOOKS', 'WEBSOCKET'] as LogLevel[]),\r\n        COLOR: process.env?.LOG_COLOR === 'true',\r\n        BAILEYS: (process.env?.LOG_BAILEYS as LogBaileys) || 'error',\r\n      },\r\n      DEL_INSTANCE: isBooleanString(process.env?.DEL_INSTANCE)\r\n        ? process.env.DEL_INSTANCE === 'true'\r\n        : Number.parseInt(process.env.DEL_INSTANCE) || false,\r\n      DEL_TEMP_INSTANCES: isBooleanString(process.env?.DEL_TEMP_INSTANCES)\r\n        ? process.env.DEL_TEMP_INSTANCES === 'true'\r\n        : true,\r\n      LANGUAGE: process.env?.LANGUAGE || 'en',\r\n      WEBHOOK: {\r\n        GLOBAL: {\r\n          URL: process.env?.WEBHOOK_GLOBAL_URL || '',\r\n          ENABLED: process.env?.WEBHOOK_GLOBAL_ENABLED === 'true',\r\n          WEBHOOK_BY_EVENTS: process.env?.WEBHOOK_GLOBAL_WEBHOOK_BY_EVENTS === 'true',\r\n        },\r\n        EVENTS: {\r\n          APPLICATION_STARTUP: process.env?.WEBHOOK_EVENTS_APPLICATION_STARTUP === 'true',\r\n          INSTANCE_CREATE: process.env?.WEBHOOK_EVENTS_INSTANCE_CREATE === 'true',\r\n          INSTANCE_DELETE: process.env?.WEBHOOK_EVENTS_INSTANCE_DELETE === 'true',\r\n          QRCODE_UPDATED: process.env?.WEBHOOK_EVENTS_QRCODE_UPDATED === 'true',\r\n          MESSAGES_SET: process.env?.WEBHOOK_EVENTS_MESSAGES_SET === 'true',\r\n          MESSAGES_UPSERT: process.env?.WEBHOOK_EVENTS_MESSAGES_UPSERT === 'true',\r\n          MESSAGES_EDITED: process.env?.WEBHOOK_EVENTS_MESSAGES_EDITED === 'true',\r\n          MESSAGES_UPDATE: process.env?.WEBHOOK_EVENTS_MESSAGES_UPDATE === 'true',\r\n          MESSAGES_DELETE: process.env?.WEBHOOK_EVENTS_MESSAGES_DELETE === 'true',\r\n          SEND_MESSAGE: process.env?.WEBHOOK_EVENTS_SEND_MESSAGE === 'true',\r\n          CONTACTS_SET: process.env?.WEBHOOK_EVENTS_CONTACTS_SET === 'true',\r\n          CONTACTS_UPDATE: process.env?.WEBHOOK_EVENTS_CONTACTS_UPDATE === 'true',\r\n          CONTACTS_UPSERT: process.env?.WEBHOOK_EVENTS_CONTACTS_UPSERT === 'true',\r\n          PRESENCE_UPDATE: process.env?.WEBHOOK_EVENTS_PRESENCE_UPDATE === 'true',\r\n          CHATS_SET: process.env?.WEBHOOK_EVENTS_CHATS_SET === 'true',\r\n          CHATS_UPDATE: process.env?.WEBHOOK_EVENTS_CHATS_UPDATE === 'true',\r\n          CHATS_UPSERT: process.env?.WEBHOOK_EVENTS_CHATS_UPSERT === 'true',\r\n          CHATS_DELETE: process.env?.WEBHOOK_EVENTS_CHATS_DELETE === 'true',\r\n          CONNECTION_UPDATE: process.env?.WEBHOOK_EVENTS_CONNECTION_UPDATE === 'true',\r\n          LABELS_EDIT: process.env?.WEBHOOK_EVENTS_LABELS_EDIT === 'true',\r\n          LABELS_ASSOCIATION: process.env?.WEBHOOK_EVENTS_LABELS_ASSOCIATION === 'true',\r\n          GROUPS_UPSERT: process.env?.WEBHOOK_EVENTS_GROUPS_UPSERT === 'true',\r\n          GROUP_UPDATE: process.env?.WEBHOOK_EVENTS_GROUPS_UPDATE === 'true',\r\n          GROUP_PARTICIPANTS_UPDATE: process.env?.WEBHOOK_EVENTS_GROUP_PARTICIPANTS_UPDATE === 'true',\r\n          CALL: process.env?.WEBHOOK_EVENTS_CALL === 'true',\r\n          TYPEBOT_START: process.env?.WEBHOOK_EVENTS_TYPEBOT_START === 'true',\r\n          TYPEBOT_CHANGE_STATUS: process.env?.WEBHOOK_EVENTS_TYPEBOT_CHANGE_STATUS === 'true',\r\n          ERRORS: process.env?.WEBHOOK_EVENTS_ERRORS === 'true',\r\n          ERRORS_WEBHOOK: process.env?.WEBHOOK_EVENTS_ERRORS_WEBHOOK || '',\r\n        },\r\n      },\r\n      CONFIG_SESSION_PHONE: {\r\n        CLIENT: process.env?.CONFIG_SESSION_PHONE_CLIENT || 'Evolution API',\r\n        NAME: process.env?.CONFIG_SESSION_PHONE_NAME || 'Chrome',\r\n        VERSION: process.env?.CONFIG_SESSION_PHONE_VERSION || null,\r\n      },\r\n      QRCODE: {\r\n        LIMIT: Number.parseInt(process.env.QRCODE_LIMIT) || 30,\r\n        COLOR: process.env.QRCODE_COLOR || '#198754',\r\n      },\r\n      TYPEBOT: {\r\n        ENABLED: process.env?.TYPEBOT_ENABLED === 'true',\r\n        API_VERSION: process.env?.TYPEBOT_API_VERSION || 'old',\r\n        SEND_MEDIA_BASE64: process.env?.TYPEBOT_SEND_MEDIA_BASE64 === 'true',\r\n      },\r\n      CHATWOOT: {\r\n        ENABLED: process.env?.CHATWOOT_ENABLED === 'true',\r\n        MESSAGE_DELETE: process.env.CHATWOOT_MESSAGE_DELETE === 'true',\r\n        MESSAGE_READ: process.env.CHATWOOT_MESSAGE_READ === 'true',\r\n        BOT_CONTACT: !process.env.CHATWOOT_BOT_CONTACT || process.env.CHATWOOT_BOT_CONTACT === 'true',\r\n        IMPORT: {\r\n          DATABASE: {\r\n            CONNECTION: {\r\n              URI: process.env.CHATWOOT_IMPORT_DATABASE_CONNECTION_URI || '',\r\n            },\r\n          },\r\n          PLACEHOLDER_MEDIA_MESSAGE: process.env?.CHATWOOT_IMPORT_PLACEHOLDER_MEDIA_MESSAGE === 'true',\r\n        },\r\n      },\r\n      OPENAI: {\r\n        ENABLED: process.env?.OPENAI_ENABLED === 'true',\r\n        API_KEY_GLOBAL: process.env?.OPENAI_API_KEY_GLOBAL || null,\r\n      },\r\n      DIFY: {\r\n        ENABLED: process.env?.DIFY_ENABLED === 'true',\r\n      },\r\n      CACHE: {\r\n        REDIS: {\r\n          ENABLED: process.env?.CACHE_REDIS_ENABLED === 'true',\r\n          URI: process.env?.CACHE_REDIS_URI || '',\r\n          PREFIX_KEY: process.env?.CACHE_REDIS_PREFIX_KEY || 'evolution-cache',\r\n          TTL: Number.parseInt(process.env?.CACHE_REDIS_TTL) || 604800,\r\n          SAVE_INSTANCES: process.env?.CACHE_REDIS_SAVE_INSTANCES === 'true',\r\n        },\r\n        LOCAL: {\r\n          ENABLED: process.env?.CACHE_LOCAL_ENABLED === 'true',\r\n          TTL: Number.parseInt(process.env?.CACHE_REDIS_TTL) || 86400,\r\n        },\r\n      },\r\n      S3: {\r\n        ACCESS_KEY: process.env?.S3_ACCESS_KEY,\r\n        SECRET_KEY: process.env?.S3_SECRET_KEY,\r\n        ENDPOINT: process.env?.S3_ENDPOINT,\r\n        BUCKET_NAME: process.env?.S3_BUCKET,\r\n        ENABLE: process.env?.S3_ENABLED === 'true',\r\n        PORT: Number.parseInt(process.env?.S3_PORT || '9000'),\r\n        USE_SSL: process.env?.S3_USE_SSL === 'true',\r\n        REGION: process.env?.S3_REGION,\r\n      },\r\n      AUTHENTICATION: {\r\n        API_KEY: {\r\n          KEY: process.env.AUTHENTICATION_API_KEY || 'BQYHJGJHJ',\r\n        },\r\n        EXPOSE_IN_FETCH_INSTANCES: process.env?.AUTHENTICATION_EXPOSE_IN_FETCH_INSTANCES === 'true',\r\n      },\r\n    };\r\n  }\r\n}\r\n\r\nexport const configService = new ConfigService();\r\n","import dayjs from 'dayjs';\r\nimport fs from 'fs';\r\n\r\nimport { configService, Log } from './env.config';\r\nconst packageJson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));\r\n\r\nconst formatDateLog = (timestamp: number) =>\r\n  dayjs(timestamp)\r\n    .toDate()\r\n    .toString()\r\n    .replace(/\\sGMT.+/, '');\r\n\r\nenum Color {\r\n  LOG = '\\x1b[32m',\r\n  INFO = '\\x1b[34m',\r\n  WARN = '\\x1b[33m',\r\n  ERROR = '\\x1b[31m',\r\n  DEBUG = '\\x1b[36m',\r\n  VERBOSE = '\\x1b[37m',\r\n  DARK = '\\x1b[30m',\r\n}\r\n\r\nenum Command {\r\n  RESET = '\\x1b[0m',\r\n  BRIGHT = '\\x1b[1m',\r\n  UNDERSCORE = '\\x1b[4m',\r\n}\r\n\r\nenum Level {\r\n  LOG = Color.LOG + '%s' + Command.RESET,\r\n  DARK = Color.DARK + '%s' + Command.RESET,\r\n  INFO = Color.INFO + '%s' + Command.RESET,\r\n  WARN = Color.WARN + '%s' + Command.RESET,\r\n  ERROR = Color.ERROR + '%s' + Command.RESET,\r\n  DEBUG = Color.DEBUG + '%s' + Command.RESET,\r\n  VERBOSE = Color.VERBOSE + '%s' + Command.RESET,\r\n}\r\n\r\nenum Type {\r\n  LOG = 'LOG',\r\n  WARN = 'WARN',\r\n  INFO = 'INFO',\r\n  DARK = 'DARK',\r\n  ERROR = 'ERROR',\r\n  DEBUG = 'DEBUG',\r\n  VERBOSE = 'VERBOSE',\r\n}\r\n\r\nenum Background {\r\n  LOG = '\\x1b[42m',\r\n  INFO = '\\x1b[44m',\r\n  WARN = '\\x1b[43m',\r\n  DARK = '\\x1b[40m',\r\n  ERROR = '\\x1b[41m',\r\n  DEBUG = '\\x1b[46m',\r\n  VERBOSE = '\\x1b[47m',\r\n}\r\n\r\nexport class Logger {\r\n  private readonly configService = configService;\r\n  private context: string;\r\n\r\n  constructor(context = 'Logger') {\r\n    this.context = context;\r\n  }\r\n\r\n  private instance = null;\r\n\r\n  public setContext(value: string) {\r\n    this.context = value;\r\n  }\r\n\r\n  public setInstance(value: string) {\r\n    this.instance = value;\r\n  }\r\n\r\n  private console(value: any, type: Type) {\r\n    const types: Type[] = [];\r\n\r\n    this.configService.get<Log>('LOG').LEVEL.forEach((level) => types.push(Type[level]));\r\n\r\n    const typeValue = typeof value;\r\n    if (types.includes(type)) {\r\n      if (configService.get<Log>('LOG').COLOR) {\r\n        console.log(\r\n          /*Command.UNDERSCORE +*/ Command.BRIGHT + Level[type],\r\n          '[Evolution API]',\r\n          Command.BRIGHT + Color[type],\r\n          this.instance ? `[${this.instance}]` : '',\r\n          Command.BRIGHT + Color[type],\r\n          `v${packageJson.version}`,\r\n          Command.BRIGHT + Color[type],\r\n          process.pid.toString(),\r\n          Command.RESET,\r\n          Command.BRIGHT + Color[type],\r\n          '-',\r\n          Command.BRIGHT + Color.VERBOSE,\r\n          `${formatDateLog(Date.now())}  `,\r\n          Command.RESET,\r\n          Color[type] + Background[type] + Command.BRIGHT,\r\n          `${type} ` + Command.RESET,\r\n          Color.WARN + Command.BRIGHT,\r\n          `[${this.context}]` + Command.RESET,\r\n          Color[type] + Command.BRIGHT,\r\n          `[${typeValue}]` + Command.RESET,\r\n          Color[type],\r\n          typeValue !== 'object' ? value : '',\r\n          Command.RESET,\r\n        );\r\n        typeValue === 'object' ? console.log(/*Level.DARK,*/ value, '\\n') : '';\r\n      } else {\r\n        console.log(\r\n          '[Evolution API]',\r\n          this.instance ? `[${this.instance}]` : '',\r\n          process.pid.toString(),\r\n          '-',\r\n          `${formatDateLog(Date.now())}  `,\r\n          `${type} `,\r\n          `[${this.context}]`,\r\n          `[${typeValue}]`,\r\n          value,\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  public log(value: any) {\r\n    this.console(value, Type.LOG);\r\n  }\r\n\r\n  public info(value: any) {\r\n    this.console(value, Type.INFO);\r\n  }\r\n\r\n  public warn(value: any) {\r\n    this.console(value, Type.WARN);\r\n  }\r\n\r\n  public error(value: any) {\r\n    this.console(value, Type.ERROR);\r\n  }\r\n\r\n  public verbose(value: any) {\r\n    this.console(value, Type.VERBOSE);\r\n  }\r\n\r\n  public debug(value: any) {\r\n    this.console(value, Type.DEBUG);\r\n  }\r\n\r\n  public dark(value: any) {\r\n    this.console(value, Type.DARK);\r\n  }\r\n}\r\n","import { Chatwoot, configService } from '@config/env.config';\r\nimport { Logger } from '@config/logger.config';\r\nimport postgresql from 'pg';\r\n\r\nconst { Pool } = postgresql;\r\n\r\nclass Postgres {\r\n  private logger = new Logger('Postgres');\r\n  private pool;\r\n  private connected = false;\r\n\r\n  getConnection(connectionString: string) {\r\n    if (this.connected) {\r\n      return this.pool;\r\n    } else {\r\n      this.pool = new Pool({\r\n        connectionString,\r\n        ssl: {\r\n          rejectUnauthorized: false,\r\n        },\r\n      });\r\n\r\n      this.pool.on('error', () => {\r\n        this.logger.error('postgres disconnected');\r\n        this.connected = false;\r\n      });\r\n\r\n      try {\r\n        this.connected = true;\r\n      } catch (e) {\r\n        this.connected = false;\r\n        this.logger.error('postgres connect exception caught: ' + e);\r\n        return null;\r\n      }\r\n\r\n      return this.pool;\r\n    }\r\n  }\r\n\r\n  getChatwootConnection() {\r\n    const uri = configService.get<Chatwoot>('CHATWOOT').IMPORT.DATABASE.CONNECTION.URI;\r\n\r\n    return this.getConnection(uri);\r\n  }\r\n}\r\n\r\nexport const postgresClient = new Postgres();\r\n"],"mappings":"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","names":["chatwoot_import_helper_exports","__export","chatwootImport","__toCommonJS","import_class_validator","import_dotenv","dotenv","ConfigService","key","configService","import_dayjs","import_fs","packageJson","fs","formatDateLog","timestamp","dayjs","Color","Level","Type","Background","Logger","context","configService","value","type","types","level","typeValue","Color","packageJson","formatDateLog","import_pg","Pool","postgresql","Postgres","Logger","connectionString","e","uri","configService","postgresClient","ChatwootImport","Logger","instance","repositoryMessagesCache","messagesRaw","actualValue","contactsRaw","provider","pgClient","postgresClient","totalContactsImported","contacts","contactsChunk","labelSql","labelId","sqlLabel","sqlInsert","bindInsert","contact","bindName","bindPhoneNumber","bindIdentifier","sqlTags","tagId","sqlTag","sqlInsertLabel","bindTaggableId","error","sourceIds","existingSourceIdsSet","formattedSourceIds","sourceId","result","row","chatwootService","inbox","chatwootUser","totalMessagesImported","messagesOrdered","a","b","aKey","bKey","aMessageTimestamp","bMessageTimestamp","allMessagesMappedByPhoneNumber","phoneNumbersWithTimestamp","messages","phoneNumber","existingSourceIds","message","batchSize","messagesChunk","messagesByPhoneNumber","fksByNumber","sqlInsertMsg","bindInsertMsg","fksChatwoot","contentMessage","bindContent","bindConversationId","bindMessageType","bindSenderType","bindSenderId","bindSourceId","bindmessageTimestamp","providerData","event","bindValues","sqlFromChatwoot","phoneNumberTimestamp","bindStr","fksFromChatwoot","item","acc","key","phoneNumberPlus","limit","msg","configService","types","arr","chunkSize","remoteJid","messageId","chatwootImport"]}
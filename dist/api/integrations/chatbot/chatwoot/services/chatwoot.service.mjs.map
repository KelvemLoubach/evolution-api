{"version":3,"sources":["../../../../../../src/config/env.config.ts","../../../../../../src/config/logger.config.ts","../../../../../../src/api/integrations/chatbot/chatwoot/libs/postgres.client.ts","../../../../../../src/api/integrations/chatbot/chatwoot/utils/chatwoot-import-helper.ts","../../../../../../src/api/integrations/chatbot/chatwoot/services/chatwoot.service.ts","../../../../../../src/utils/i18n.ts","../../../../../../src/utils/sendTelemetry.ts"],"sourcesContent":["import { isBooleanString } from 'class-validator';\r\nimport dotenv from 'dotenv';\r\n\r\ndotenv.config();\r\n\r\nexport type HttpServer = {\r\n  TYPE: 'http' | 'https';\r\n  PORT: number;\r\n  URL: string;\r\n  DISABLE_DOCS: boolean;\r\n  DISABLE_MANAGER: boolean;\r\n};\r\n\r\nexport type HttpMethods = 'POST' | 'GET' | 'PUT' | 'DELETE';\r\nexport type Cors = {\r\n  ORIGIN: string[];\r\n  METHODS: HttpMethods[];\r\n  CREDENTIALS: boolean;\r\n};\r\n\r\nexport type LogBaileys = 'fatal' | 'error' | 'warn' | 'info' | 'debug' | 'trace';\r\n\r\nexport type LogLevel = 'ERROR' | 'WARN' | 'DEBUG' | 'INFO' | 'LOG' | 'VERBOSE' | 'DARK' | 'WEBHOOKS' | 'WEBSOCKET';\r\n\r\nexport type Log = {\r\n  LEVEL: LogLevel[];\r\n  COLOR: boolean;\r\n  BAILEYS: LogBaileys;\r\n};\r\n\r\nexport type ProviderSession = {\r\n  ENABLED: boolean;\r\n  HOST: string;\r\n  PORT: string;\r\n  PREFIX: string;\r\n};\r\n\r\nexport type SaveData = {\r\n  INSTANCE: boolean;\r\n  HISTORIC: boolean;\r\n  NEW_MESSAGE: boolean;\r\n  MESSAGE_UPDATE: boolean;\r\n  CONTACTS: boolean;\r\n  CHATS: boolean;\r\n  LABELS: boolean;\r\n  IS_ON_WHATSAPP: boolean;\r\n  IS_ON_WHATSAPP_DAYS: number;\r\n};\r\n\r\nexport type DBConnection = {\r\n  URI: string;\r\n  CLIENT_NAME: string;\r\n};\r\nexport type Database = {\r\n  CONNECTION: DBConnection;\r\n  PROVIDER: string;\r\n  SAVE_DATA: SaveData;\r\n  DELETE_DATA: DeleteData;\r\n};\r\n\r\nexport type DeleteData = {\r\n  LOGICAL_MESSAGE_DELETE: boolean;\r\n};\r\nexport type EventsRabbitmq = {\r\n  APPLICATION_STARTUP: boolean;\r\n  INSTANCE_CREATE: boolean;\r\n  INSTANCE_DELETE: boolean;\r\n  QRCODE_UPDATED: boolean;\r\n  MESSAGES_SET: boolean;\r\n  MESSAGES_UPSERT: boolean;\r\n  MESSAGES_EDITED: boolean;\r\n  MESSAGES_UPDATE: boolean;\r\n  MESSAGES_DELETE: boolean;\r\n  SEND_MESSAGE: boolean;\r\n  CONTACTS_SET: boolean;\r\n  CONTACTS_UPDATE: boolean;\r\n  CONTACTS_UPSERT: boolean;\r\n  PRESENCE_UPDATE: boolean;\r\n  CHATS_SET: boolean;\r\n  CHATS_UPDATE: boolean;\r\n  CHATS_DELETE: boolean;\r\n  CHATS_UPSERT: boolean;\r\n  CONNECTION_UPDATE: boolean;\r\n  LABELS_EDIT: boolean;\r\n  LABELS_ASSOCIATION: boolean;\r\n  GROUPS_UPSERT: boolean;\r\n  GROUP_UPDATE: boolean;\r\n  GROUP_PARTICIPANTS_UPDATE: boolean;\r\n  CALL: boolean;\r\n  TYPEBOT_START: boolean;\r\n  TYPEBOT_CHANGE_STATUS: boolean;\r\n};\r\n\r\nexport type Rabbitmq = {\r\n  ENABLED: boolean;\r\n  URI: string;\r\n  EXCHANGE_NAME: string;\r\n  GLOBAL_ENABLED: boolean;\r\n  EVENTS: EventsRabbitmq;\r\n  PREFIX_KEY: string;\r\n};\r\n\r\nexport type Sqs = {\r\n  ENABLED: boolean;\r\n  ACCESS_KEY_ID: string;\r\n  SECRET_ACCESS_KEY: string;\r\n  ACCOUNT_ID: string;\r\n  REGION: string;\r\n};\r\n\r\nexport type Websocket = {\r\n  ENABLED: boolean;\r\n  GLOBAL_EVENTS: boolean;\r\n};\r\n\r\nexport type WaBusiness = {\r\n  TOKEN_WEBHOOK: string;\r\n  URL: string;\r\n  VERSION: string;\r\n  LANGUAGE: string;\r\n};\r\n\r\nexport type EventsWebhook = {\r\n  APPLICATION_STARTUP: boolean;\r\n  INSTANCE_CREATE: boolean;\r\n  INSTANCE_DELETE: boolean;\r\n  QRCODE_UPDATED: boolean;\r\n  MESSAGES_SET: boolean;\r\n  MESSAGES_UPSERT: boolean;\r\n  MESSAGES_EDITED: boolean;\r\n  MESSAGES_UPDATE: boolean;\r\n  MESSAGES_DELETE: boolean;\r\n  SEND_MESSAGE: boolean;\r\n  CONTACTS_SET: boolean;\r\n  CONTACTS_UPDATE: boolean;\r\n  CONTACTS_UPSERT: boolean;\r\n  PRESENCE_UPDATE: boolean;\r\n  CHATS_SET: boolean;\r\n  CHATS_UPDATE: boolean;\r\n  CHATS_DELETE: boolean;\r\n  CHATS_UPSERT: boolean;\r\n  CONNECTION_UPDATE: boolean;\r\n  LABELS_EDIT: boolean;\r\n  LABELS_ASSOCIATION: boolean;\r\n  GROUPS_UPSERT: boolean;\r\n  GROUP_UPDATE: boolean;\r\n  GROUP_PARTICIPANTS_UPDATE: boolean;\r\n  CALL: boolean;\r\n  TYPEBOT_START: boolean;\r\n  TYPEBOT_CHANGE_STATUS: boolean;\r\n  ERRORS: boolean;\r\n  ERRORS_WEBHOOK: string;\r\n};\r\n\r\nexport type EventsPusher = {\r\n  APPLICATION_STARTUP: boolean;\r\n  INSTANCE_CREATE: boolean;\r\n  INSTANCE_DELETE: boolean;\r\n  QRCODE_UPDATED: boolean;\r\n  MESSAGES_SET: boolean;\r\n  MESSAGES_UPSERT: boolean;\r\n  MESSAGES_EDITED: boolean;\r\n  MESSAGES_UPDATE: boolean;\r\n  MESSAGES_DELETE: boolean;\r\n  SEND_MESSAGE: boolean;\r\n  CONTACTS_SET: boolean;\r\n  CONTACTS_UPDATE: boolean;\r\n  CONTACTS_UPSERT: boolean;\r\n  PRESENCE_UPDATE: boolean;\r\n  CHATS_SET: boolean;\r\n  CHATS_UPDATE: boolean;\r\n  CHATS_DELETE: boolean;\r\n  CHATS_UPSERT: boolean;\r\n  CONNECTION_UPDATE: boolean;\r\n  LABELS_EDIT: boolean;\r\n  LABELS_ASSOCIATION: boolean;\r\n  GROUPS_UPSERT: boolean;\r\n  GROUP_UPDATE: boolean;\r\n  GROUP_PARTICIPANTS_UPDATE: boolean;\r\n  CALL: boolean;\r\n  TYPEBOT_START: boolean;\r\n  TYPEBOT_CHANGE_STATUS: boolean;\r\n};\r\n\r\nexport type ApiKey = { KEY: string };\r\n\r\nexport type Auth = {\r\n  API_KEY: ApiKey;\r\n  EXPOSE_IN_FETCH_INSTANCES: boolean;\r\n};\r\n\r\nexport type DelInstance = number | boolean;\r\n\r\nexport type Language = string | 'en';\r\n\r\nexport type GlobalWebhook = {\r\n  URL: string;\r\n  ENABLED: boolean;\r\n  WEBHOOK_BY_EVENTS: boolean;\r\n};\r\n\r\nexport type GlobalPusher = {\r\n  ENABLED: boolean;\r\n  APP_ID: string;\r\n  KEY: string;\r\n  SECRET: string;\r\n  CLUSTER: string;\r\n  USE_TLS: boolean;\r\n};\r\n\r\nexport type CacheConfRedis = {\r\n  ENABLED: boolean;\r\n  URI: string;\r\n  PREFIX_KEY: string;\r\n  TTL: number;\r\n  SAVE_INSTANCES: boolean;\r\n};\r\nexport type CacheConfLocal = {\r\n  ENABLED: boolean;\r\n  TTL: number;\r\n};\r\nexport type SslConf = { PRIVKEY: string; FULLCHAIN: string };\r\nexport type Webhook = { GLOBAL?: GlobalWebhook; EVENTS: EventsWebhook };\r\nexport type Pusher = { ENABLED: boolean; GLOBAL?: GlobalPusher; EVENTS: EventsPusher };\r\nexport type ConfigSessionPhone = { CLIENT: string; NAME: string; VERSION: string };\r\nexport type QrCode = { LIMIT: number; COLOR: string };\r\nexport type Typebot = { ENABLED: boolean; API_VERSION: string; SEND_MEDIA_BASE64: boolean };\r\nexport type Chatwoot = {\r\n  ENABLED: boolean;\r\n  MESSAGE_DELETE: boolean;\r\n  MESSAGE_READ: boolean;\r\n  BOT_CONTACT: boolean;\r\n  IMPORT: {\r\n    DATABASE: {\r\n      CONNECTION: {\r\n        URI: string;\r\n      };\r\n    };\r\n    PLACEHOLDER_MEDIA_MESSAGE: boolean;\r\n  };\r\n};\r\nexport type Openai = { ENABLED: boolean; API_KEY_GLOBAL?: string };\r\nexport type Dify = { ENABLED: boolean };\r\n\r\nexport type S3 = {\r\n  ACCESS_KEY: string;\r\n  SECRET_KEY: string;\r\n  ENDPOINT: string;\r\n  BUCKET_NAME: string;\r\n  ENABLE: boolean;\r\n  PORT?: number;\r\n  USE_SSL?: boolean;\r\n  REGION?: string;\r\n};\r\n\r\nexport type CacheConf = { REDIS: CacheConfRedis; LOCAL: CacheConfLocal };\r\nexport type Production = boolean;\r\n\r\nexport interface Env {\r\n  SERVER: HttpServer;\r\n  CORS: Cors;\r\n  SSL_CONF: SslConf;\r\n  PROVIDER: ProviderSession;\r\n  DATABASE: Database;\r\n  RABBITMQ: Rabbitmq;\r\n  SQS: Sqs;\r\n  WEBSOCKET: Websocket;\r\n  WA_BUSINESS: WaBusiness;\r\n  LOG: Log;\r\n  DEL_INSTANCE: DelInstance;\r\n  DEL_TEMP_INSTANCES: boolean;\r\n  LANGUAGE: Language;\r\n  WEBHOOK: Webhook;\r\n  PUSHER: Pusher;\r\n  CONFIG_SESSION_PHONE: ConfigSessionPhone;\r\n  QRCODE: QrCode;\r\n  TYPEBOT: Typebot;\r\n  CHATWOOT: Chatwoot;\r\n  OPENAI: Openai;\r\n  DIFY: Dify;\r\n  CACHE: CacheConf;\r\n  S3?: S3;\r\n  AUTHENTICATION: Auth;\r\n  PRODUCTION?: Production;\r\n}\r\n\r\nexport type Key = keyof Env;\r\n\r\nexport class ConfigService {\r\n  constructor() {\r\n    this.loadEnv();\r\n  }\r\n\r\n  private env: Env;\r\n\r\n  public get<T = any>(key: Key) {\r\n    return this.env[key] as T;\r\n  }\r\n\r\n  private loadEnv() {\r\n    this.env = this.envProcess();\r\n    this.env.PRODUCTION = process.env?.NODE_ENV === 'PROD';\r\n    if (process.env?.DOCKER_ENV === 'true') {\r\n      this.env.SERVER.TYPE = process.env.SERVER_TYPE as 'http' | 'http';\r\n      this.env.SERVER.PORT = Number.parseInt(process.env.SERVER_PORT) || 8080;\r\n    }\r\n  }\r\n\r\n  private envProcess(): Env {\r\n    return {\r\n      SERVER: {\r\n        TYPE: (process.env.SERVER_TYPE as 'http' | 'https') || 'http',\r\n        PORT: Number.parseInt(process.env.SERVER_PORT) || 8080,\r\n        URL: process.env.SERVER_URL,\r\n        DISABLE_DOCS: process.env?.SERVER_DISABLE_DOCS === 'true',\r\n        DISABLE_MANAGER: process.env?.SERVER_DISABLE_MANAGER === 'true',\r\n      },\r\n      CORS: {\r\n        ORIGIN: process.env.CORS_ORIGIN?.split(',') || ['*'],\r\n        METHODS:\r\n          (process.env.CORS_METHODS?.split(',') as HttpMethods[]) ||\r\n          (['POST', 'GET', 'PUT', 'DELETE'] as HttpMethods[]),\r\n        CREDENTIALS: process.env?.CORS_CREDENTIALS === 'true',\r\n      },\r\n      SSL_CONF: {\r\n        PRIVKEY: process.env?.SSL_CONF_PRIVKEY || '',\r\n        FULLCHAIN: process.env?.SSL_CONF_FULLCHAIN || '',\r\n      },\r\n      PROVIDER: {\r\n        ENABLED: process.env?.PROVIDER_ENABLED === 'true',\r\n        HOST: process.env.PROVIDER_HOST,\r\n        PORT: process.env?.PROVIDER_PORT || '5656',\r\n        PREFIX: process.env?.PROVIDER_PREFIX || 'evolution',\r\n      },\r\n      DATABASE: {\r\n        CONNECTION: {\r\n          URI: process.env.DATABASE_CONNECTION_URI || '',\r\n          CLIENT_NAME: process.env.DATABASE_CONNECTION_CLIENT_NAME || 'evolution',\r\n        },\r\n        PROVIDER: process.env.DATABASE_PROVIDER || 'postgresql',\r\n        SAVE_DATA: {\r\n          INSTANCE: process.env?.DATABASE_SAVE_DATA_INSTANCE === 'true',\r\n          NEW_MESSAGE: process.env?.DATABASE_SAVE_DATA_NEW_MESSAGE === 'true',\r\n          MESSAGE_UPDATE: process.env?.DATABASE_SAVE_MESSAGE_UPDATE === 'true',\r\n          CONTACTS: process.env?.DATABASE_SAVE_DATA_CONTACTS === 'true',\r\n          CHATS: process.env?.DATABASE_SAVE_DATA_CHATS === 'true',\r\n          HISTORIC: process.env?.DATABASE_SAVE_DATA_HISTORIC === 'true',\r\n          LABELS: process.env?.DATABASE_SAVE_DATA_LABELS === 'true',\r\n          IS_ON_WHATSAPP: process.env?.DATABASE_SAVE_IS_ON_WHATSAPP === 'true',\r\n          IS_ON_WHATSAPP_DAYS: Number.parseInt(process.env?.DATABASE_SAVE_IS_ON_WHATSAPP_DAYS ?? '7'),\r\n        },\r\n        DELETE_DATA: {\r\n          LOGICAL_MESSAGE_DELETE: process.env?.DATABASE_DELETE_MESSAGE === 'true',\r\n        },\r\n      },\r\n      RABBITMQ: {\r\n        ENABLED: process.env?.RABBITMQ_ENABLED === 'true',\r\n        GLOBAL_ENABLED: process.env?.RABBITMQ_GLOBAL_ENABLED === 'true',\r\n        PREFIX_KEY: process.env?.RABBITMQ_PREFIX_KEY || 'evolution',\r\n        EXCHANGE_NAME: process.env?.RABBITMQ_EXCHANGE_NAME || 'evolution_exchange',\r\n        URI: process.env.RABBITMQ_URI || '',\r\n        EVENTS: {\r\n          APPLICATION_STARTUP: process.env?.RABBITMQ_EVENTS_APPLICATION_STARTUP === 'true',\r\n          INSTANCE_CREATE: process.env?.RABBITMQ_EVENTS_INSTANCE_CREATE === 'true',\r\n          INSTANCE_DELETE: process.env?.RABBITMQ_EVENTS_INSTANCE_DELETE === 'true',\r\n          QRCODE_UPDATED: process.env?.RABBITMQ_EVENTS_QRCODE_UPDATED === 'true',\r\n          MESSAGES_SET: process.env?.RABBITMQ_EVENTS_MESSAGES_SET === 'true',\r\n          MESSAGES_UPSERT: process.env?.RABBITMQ_EVENTS_MESSAGES_UPSERT === 'true',\r\n          MESSAGES_EDITED: process.env?.RABBITMQ_EVENTS_MESSAGES_EDITED === 'true',\r\n          MESSAGES_UPDATE: process.env?.RABBITMQ_EVENTS_MESSAGES_UPDATE === 'true',\r\n          MESSAGES_DELETE: process.env?.RABBITMQ_EVENTS_MESSAGES_DELETE === 'true',\r\n          SEND_MESSAGE: process.env?.RABBITMQ_EVENTS_SEND_MESSAGE === 'true',\r\n          CONTACTS_SET: process.env?.RABBITMQ_EVENTS_CONTACTS_SET === 'true',\r\n          CONTACTS_UPDATE: process.env?.RABBITMQ_EVENTS_CONTACTS_UPDATE === 'true',\r\n          CONTACTS_UPSERT: process.env?.RABBITMQ_EVENTS_CONTACTS_UPSERT === 'true',\r\n          PRESENCE_UPDATE: process.env?.RABBITMQ_EVENTS_PRESENCE_UPDATE === 'true',\r\n          CHATS_SET: process.env?.RABBITMQ_EVENTS_CHATS_SET === 'true',\r\n          CHATS_UPDATE: process.env?.RABBITMQ_EVENTS_CHATS_UPDATE === 'true',\r\n          CHATS_UPSERT: process.env?.RABBITMQ_EVENTS_CHATS_UPSERT === 'true',\r\n          CHATS_DELETE: process.env?.RABBITMQ_EVENTS_CHATS_DELETE === 'true',\r\n          CONNECTION_UPDATE: process.env?.RABBITMQ_EVENTS_CONNECTION_UPDATE === 'true',\r\n          LABELS_EDIT: process.env?.RABBITMQ_EVENTS_LABELS_EDIT === 'true',\r\n          LABELS_ASSOCIATION: process.env?.RABBITMQ_EVENTS_LABELS_ASSOCIATION === 'true',\r\n          GROUPS_UPSERT: process.env?.RABBITMQ_EVENTS_GROUPS_UPSERT === 'true',\r\n          GROUP_UPDATE: process.env?.RABBITMQ_EVENTS_GROUPS_UPDATE === 'true',\r\n          GROUP_PARTICIPANTS_UPDATE: process.env?.RABBITMQ_EVENTS_GROUP_PARTICIPANTS_UPDATE === 'true',\r\n          CALL: process.env?.RABBITMQ_EVENTS_CALL === 'true',\r\n          TYPEBOT_START: process.env?.RABBITMQ_EVENTS_TYPEBOT_START === 'true',\r\n          TYPEBOT_CHANGE_STATUS: process.env?.RABBITMQ_EVENTS_TYPEBOT_CHANGE_STATUS === 'true',\r\n        },\r\n      },\r\n      SQS: {\r\n        ENABLED: process.env?.SQS_ENABLED === 'true',\r\n        ACCESS_KEY_ID: process.env.SQS_ACCESS_KEY_ID || '',\r\n        SECRET_ACCESS_KEY: process.env.SQS_SECRET_ACCESS_KEY || '',\r\n        ACCOUNT_ID: process.env.SQS_ACCOUNT_ID || '',\r\n        REGION: process.env.SQS_REGION || '',\r\n      },\r\n      WEBSOCKET: {\r\n        ENABLED: process.env?.WEBSOCKET_ENABLED === 'true',\r\n        GLOBAL_EVENTS: process.env?.WEBSOCKET_GLOBAL_EVENTS === 'true',\r\n      },\r\n      PUSHER: {\r\n        ENABLED: process.env?.PUSHER_ENABLED === 'true',\r\n        GLOBAL: {\r\n          ENABLED: process.env?.PUSHER_GLOBAL_ENABLED === 'true',\r\n          APP_ID: process.env?.PUSHER_GLOBAL_APP_ID || '',\r\n          KEY: process.env?.PUSHER_GLOBAL_KEY || '',\r\n          SECRET: process.env?.PUSHER_GLOBAL_SECRET || '',\r\n          CLUSTER: process.env?.PUSHER_GLOBAL_CLUSTER || '',\r\n          USE_TLS: process.env?.PUSHER_GLOBAL_USE_TLS === 'true',\r\n        },\r\n        EVENTS: {\r\n          APPLICATION_STARTUP: process.env?.PUSHER_EVENTS_APPLICATION_STARTUP === 'true',\r\n          INSTANCE_CREATE: process.env?.PUSHER_EVENTS_INSTANCE_CREATE === 'true',\r\n          INSTANCE_DELETE: process.env?.PUSHER_EVENTS_INSTANCE_DELETE === 'true',\r\n          QRCODE_UPDATED: process.env?.PUSHER_EVENTS_QRCODE_UPDATED === 'true',\r\n          MESSAGES_SET: process.env?.PUSHER_EVENTS_MESSAGES_SET === 'true',\r\n          MESSAGES_UPSERT: process.env?.PUSHER_EVENTS_MESSAGES_UPSERT === 'true',\r\n          MESSAGES_EDITED: process.env?.PUSHER_EVENTS_MESSAGES_EDITED === 'true',\r\n          MESSAGES_UPDATE: process.env?.PUSHER_EVENTS_MESSAGES_UPDATE === 'true',\r\n          MESSAGES_DELETE: process.env?.PUSHER_EVENTS_MESSAGES_DELETE === 'true',\r\n          SEND_MESSAGE: process.env?.PUSHER_EVENTS_SEND_MESSAGE === 'true',\r\n          CONTACTS_SET: process.env?.PUSHER_EVENTS_CONTACTS_SET === 'true',\r\n          CONTACTS_UPDATE: process.env?.PUSHER_EVENTS_CONTACTS_UPDATE === 'true',\r\n          CONTACTS_UPSERT: process.env?.PUSHER_EVENTS_CONTACTS_UPSERT === 'true',\r\n          PRESENCE_UPDATE: process.env?.PUSHER_EVENTS_PRESENCE_UPDATE === 'true',\r\n          CHATS_SET: process.env?.PUSHER_EVENTS_CHATS_SET === 'true',\r\n          CHATS_UPDATE: process.env?.PUSHER_EVENTS_CHATS_UPDATE === 'true',\r\n          CHATS_UPSERT: process.env?.PUSHER_EVENTS_CHATS_UPSERT === 'true',\r\n          CHATS_DELETE: process.env?.PUSHER_EVENTS_CHATS_DELETE === 'true',\r\n          CONNECTION_UPDATE: process.env?.PUSHER_EVENTS_CONNECTION_UPDATE === 'true',\r\n          LABELS_EDIT: process.env?.PUSHER_EVENTS_LABELS_EDIT === 'true',\r\n          LABELS_ASSOCIATION: process.env?.PUSHER_EVENTS_LABELS_ASSOCIATION === 'true',\r\n          GROUPS_UPSERT: process.env?.PUSHER_EVENTS_GROUPS_UPSERT === 'true',\r\n          GROUP_UPDATE: process.env?.PUSHER_EVENTS_GROUPS_UPDATE === 'true',\r\n          GROUP_PARTICIPANTS_UPDATE: process.env?.PUSHER_EVENTS_GROUP_PARTICIPANTS_UPDATE === 'true',\r\n          CALL: process.env?.PUSHER_EVENTS_CALL === 'true',\r\n          TYPEBOT_START: process.env?.PUSHER_EVENTS_TYPEBOT_START === 'true',\r\n          TYPEBOT_CHANGE_STATUS: process.env?.PUSHER_EVENTS_TYPEBOT_CHANGE_STATUS === 'true',\r\n        },\r\n      },\r\n      WA_BUSINESS: {\r\n        TOKEN_WEBHOOK: process.env.WA_BUSINESS_TOKEN_WEBHOOK || 'evolution',\r\n        URL: process.env.WA_BUSINESS_URL || 'https://graph.facebook.com',\r\n        VERSION: process.env.WA_BUSINESS_VERSION || 'v18.0',\r\n        LANGUAGE: process.env.WA_BUSINESS_LANGUAGE || 'en',\r\n      },\r\n      LOG: {\r\n        LEVEL:\r\n          (process.env?.LOG_LEVEL?.split(',') as LogLevel[]) ||\r\n          (['ERROR', 'WARN', 'DEBUG', 'INFO', 'LOG', 'VERBOSE', 'DARK', 'WEBHOOKS', 'WEBSOCKET'] as LogLevel[]),\r\n        COLOR: process.env?.LOG_COLOR === 'true',\r\n        BAILEYS: (process.env?.LOG_BAILEYS as LogBaileys) || 'error',\r\n      },\r\n      DEL_INSTANCE: isBooleanString(process.env?.DEL_INSTANCE)\r\n        ? process.env.DEL_INSTANCE === 'true'\r\n        : Number.parseInt(process.env.DEL_INSTANCE) || false,\r\n      DEL_TEMP_INSTANCES: isBooleanString(process.env?.DEL_TEMP_INSTANCES)\r\n        ? process.env.DEL_TEMP_INSTANCES === 'true'\r\n        : true,\r\n      LANGUAGE: process.env?.LANGUAGE || 'en',\r\n      WEBHOOK: {\r\n        GLOBAL: {\r\n          URL: process.env?.WEBHOOK_GLOBAL_URL || '',\r\n          ENABLED: process.env?.WEBHOOK_GLOBAL_ENABLED === 'true',\r\n          WEBHOOK_BY_EVENTS: process.env?.WEBHOOK_GLOBAL_WEBHOOK_BY_EVENTS === 'true',\r\n        },\r\n        EVENTS: {\r\n          APPLICATION_STARTUP: process.env?.WEBHOOK_EVENTS_APPLICATION_STARTUP === 'true',\r\n          INSTANCE_CREATE: process.env?.WEBHOOK_EVENTS_INSTANCE_CREATE === 'true',\r\n          INSTANCE_DELETE: process.env?.WEBHOOK_EVENTS_INSTANCE_DELETE === 'true',\r\n          QRCODE_UPDATED: process.env?.WEBHOOK_EVENTS_QRCODE_UPDATED === 'true',\r\n          MESSAGES_SET: process.env?.WEBHOOK_EVENTS_MESSAGES_SET === 'true',\r\n          MESSAGES_UPSERT: process.env?.WEBHOOK_EVENTS_MESSAGES_UPSERT === 'true',\r\n          MESSAGES_EDITED: process.env?.WEBHOOK_EVENTS_MESSAGES_EDITED === 'true',\r\n          MESSAGES_UPDATE: process.env?.WEBHOOK_EVENTS_MESSAGES_UPDATE === 'true',\r\n          MESSAGES_DELETE: process.env?.WEBHOOK_EVENTS_MESSAGES_DELETE === 'true',\r\n          SEND_MESSAGE: process.env?.WEBHOOK_EVENTS_SEND_MESSAGE === 'true',\r\n          CONTACTS_SET: process.env?.WEBHOOK_EVENTS_CONTACTS_SET === 'true',\r\n          CONTACTS_UPDATE: process.env?.WEBHOOK_EVENTS_CONTACTS_UPDATE === 'true',\r\n          CONTACTS_UPSERT: process.env?.WEBHOOK_EVENTS_CONTACTS_UPSERT === 'true',\r\n          PRESENCE_UPDATE: process.env?.WEBHOOK_EVENTS_PRESENCE_UPDATE === 'true',\r\n          CHATS_SET: process.env?.WEBHOOK_EVENTS_CHATS_SET === 'true',\r\n          CHATS_UPDATE: process.env?.WEBHOOK_EVENTS_CHATS_UPDATE === 'true',\r\n          CHATS_UPSERT: process.env?.WEBHOOK_EVENTS_CHATS_UPSERT === 'true',\r\n          CHATS_DELETE: process.env?.WEBHOOK_EVENTS_CHATS_DELETE === 'true',\r\n          CONNECTION_UPDATE: process.env?.WEBHOOK_EVENTS_CONNECTION_UPDATE === 'true',\r\n          LABELS_EDIT: process.env?.WEBHOOK_EVENTS_LABELS_EDIT === 'true',\r\n          LABELS_ASSOCIATION: process.env?.WEBHOOK_EVENTS_LABELS_ASSOCIATION === 'true',\r\n          GROUPS_UPSERT: process.env?.WEBHOOK_EVENTS_GROUPS_UPSERT === 'true',\r\n          GROUP_UPDATE: process.env?.WEBHOOK_EVENTS_GROUPS_UPDATE === 'true',\r\n          GROUP_PARTICIPANTS_UPDATE: process.env?.WEBHOOK_EVENTS_GROUP_PARTICIPANTS_UPDATE === 'true',\r\n          CALL: process.env?.WEBHOOK_EVENTS_CALL === 'true',\r\n          TYPEBOT_START: process.env?.WEBHOOK_EVENTS_TYPEBOT_START === 'true',\r\n          TYPEBOT_CHANGE_STATUS: process.env?.WEBHOOK_EVENTS_TYPEBOT_CHANGE_STATUS === 'true',\r\n          ERRORS: process.env?.WEBHOOK_EVENTS_ERRORS === 'true',\r\n          ERRORS_WEBHOOK: process.env?.WEBHOOK_EVENTS_ERRORS_WEBHOOK || '',\r\n        },\r\n      },\r\n      CONFIG_SESSION_PHONE: {\r\n        CLIENT: process.env?.CONFIG_SESSION_PHONE_CLIENT || 'Evolution API',\r\n        NAME: process.env?.CONFIG_SESSION_PHONE_NAME || 'Chrome',\r\n        VERSION: process.env?.CONFIG_SESSION_PHONE_VERSION || null,\r\n      },\r\n      QRCODE: {\r\n        LIMIT: Number.parseInt(process.env.QRCODE_LIMIT) || 30,\r\n        COLOR: process.env.QRCODE_COLOR || '#198754',\r\n      },\r\n      TYPEBOT: {\r\n        ENABLED: process.env?.TYPEBOT_ENABLED === 'true',\r\n        API_VERSION: process.env?.TYPEBOT_API_VERSION || 'old',\r\n        SEND_MEDIA_BASE64: process.env?.TYPEBOT_SEND_MEDIA_BASE64 === 'true',\r\n      },\r\n      CHATWOOT: {\r\n        ENABLED: process.env?.CHATWOOT_ENABLED === 'true',\r\n        MESSAGE_DELETE: process.env.CHATWOOT_MESSAGE_DELETE === 'true',\r\n        MESSAGE_READ: process.env.CHATWOOT_MESSAGE_READ === 'true',\r\n        BOT_CONTACT: !process.env.CHATWOOT_BOT_CONTACT || process.env.CHATWOOT_BOT_CONTACT === 'true',\r\n        IMPORT: {\r\n          DATABASE: {\r\n            CONNECTION: {\r\n              URI: process.env.CHATWOOT_IMPORT_DATABASE_CONNECTION_URI || '',\r\n            },\r\n          },\r\n          PLACEHOLDER_MEDIA_MESSAGE: process.env?.CHATWOOT_IMPORT_PLACEHOLDER_MEDIA_MESSAGE === 'true',\r\n        },\r\n      },\r\n      OPENAI: {\r\n        ENABLED: process.env?.OPENAI_ENABLED === 'true',\r\n        API_KEY_GLOBAL: process.env?.OPENAI_API_KEY_GLOBAL || null,\r\n      },\r\n      DIFY: {\r\n        ENABLED: process.env?.DIFY_ENABLED === 'true',\r\n      },\r\n      CACHE: {\r\n        REDIS: {\r\n          ENABLED: process.env?.CACHE_REDIS_ENABLED === 'true',\r\n          URI: process.env?.CACHE_REDIS_URI || '',\r\n          PREFIX_KEY: process.env?.CACHE_REDIS_PREFIX_KEY || 'evolution-cache',\r\n          TTL: Number.parseInt(process.env?.CACHE_REDIS_TTL) || 604800,\r\n          SAVE_INSTANCES: process.env?.CACHE_REDIS_SAVE_INSTANCES === 'true',\r\n        },\r\n        LOCAL: {\r\n          ENABLED: process.env?.CACHE_LOCAL_ENABLED === 'true',\r\n          TTL: Number.parseInt(process.env?.CACHE_REDIS_TTL) || 86400,\r\n        },\r\n      },\r\n      S3: {\r\n        ACCESS_KEY: process.env?.S3_ACCESS_KEY,\r\n        SECRET_KEY: process.env?.S3_SECRET_KEY,\r\n        ENDPOINT: process.env?.S3_ENDPOINT,\r\n        BUCKET_NAME: process.env?.S3_BUCKET,\r\n        ENABLE: process.env?.S3_ENABLED === 'true',\r\n        PORT: Number.parseInt(process.env?.S3_PORT || '9000'),\r\n        USE_SSL: process.env?.S3_USE_SSL === 'true',\r\n        REGION: process.env?.S3_REGION,\r\n      },\r\n      AUTHENTICATION: {\r\n        API_KEY: {\r\n          KEY: process.env.AUTHENTICATION_API_KEY || 'BQYHJGJHJ',\r\n        },\r\n        EXPOSE_IN_FETCH_INSTANCES: process.env?.AUTHENTICATION_EXPOSE_IN_FETCH_INSTANCES === 'true',\r\n      },\r\n    };\r\n  }\r\n}\r\n\r\nexport const configService = new ConfigService();\r\n","import dayjs from 'dayjs';\r\nimport fs from 'fs';\r\n\r\nimport { configService, Log } from './env.config';\r\nconst packageJson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));\r\n\r\nconst formatDateLog = (timestamp: number) =>\r\n  dayjs(timestamp)\r\n    .toDate()\r\n    .toString()\r\n    .replace(/\\sGMT.+/, '');\r\n\r\nenum Color {\r\n  LOG = '\\x1b[32m',\r\n  INFO = '\\x1b[34m',\r\n  WARN = '\\x1b[33m',\r\n  ERROR = '\\x1b[31m',\r\n  DEBUG = '\\x1b[36m',\r\n  VERBOSE = '\\x1b[37m',\r\n  DARK = '\\x1b[30m',\r\n}\r\n\r\nenum Command {\r\n  RESET = '\\x1b[0m',\r\n  BRIGHT = '\\x1b[1m',\r\n  UNDERSCORE = '\\x1b[4m',\r\n}\r\n\r\nenum Level {\r\n  LOG = Color.LOG + '%s' + Command.RESET,\r\n  DARK = Color.DARK + '%s' + Command.RESET,\r\n  INFO = Color.INFO + '%s' + Command.RESET,\r\n  WARN = Color.WARN + '%s' + Command.RESET,\r\n  ERROR = Color.ERROR + '%s' + Command.RESET,\r\n  DEBUG = Color.DEBUG + '%s' + Command.RESET,\r\n  VERBOSE = Color.VERBOSE + '%s' + Command.RESET,\r\n}\r\n\r\nenum Type {\r\n  LOG = 'LOG',\r\n  WARN = 'WARN',\r\n  INFO = 'INFO',\r\n  DARK = 'DARK',\r\n  ERROR = 'ERROR',\r\n  DEBUG = 'DEBUG',\r\n  VERBOSE = 'VERBOSE',\r\n}\r\n\r\nenum Background {\r\n  LOG = '\\x1b[42m',\r\n  INFO = '\\x1b[44m',\r\n  WARN = '\\x1b[43m',\r\n  DARK = '\\x1b[40m',\r\n  ERROR = '\\x1b[41m',\r\n  DEBUG = '\\x1b[46m',\r\n  VERBOSE = '\\x1b[47m',\r\n}\r\n\r\nexport class Logger {\r\n  private readonly configService = configService;\r\n  private context: string;\r\n\r\n  constructor(context = 'Logger') {\r\n    this.context = context;\r\n  }\r\n\r\n  private instance = null;\r\n\r\n  public setContext(value: string) {\r\n    this.context = value;\r\n  }\r\n\r\n  public setInstance(value: string) {\r\n    this.instance = value;\r\n  }\r\n\r\n  private console(value: any, type: Type) {\r\n    const types: Type[] = [];\r\n\r\n    this.configService.get<Log>('LOG').LEVEL.forEach((level) => types.push(Type[level]));\r\n\r\n    const typeValue = typeof value;\r\n    if (types.includes(type)) {\r\n      if (configService.get<Log>('LOG').COLOR) {\r\n        console.log(\r\n          /*Command.UNDERSCORE +*/ Command.BRIGHT + Level[type],\r\n          '[Evolution API]',\r\n          Command.BRIGHT + Color[type],\r\n          this.instance ? `[${this.instance}]` : '',\r\n          Command.BRIGHT + Color[type],\r\n          `v${packageJson.version}`,\r\n          Command.BRIGHT + Color[type],\r\n          process.pid.toString(),\r\n          Command.RESET,\r\n          Command.BRIGHT + Color[type],\r\n          '-',\r\n          Command.BRIGHT + Color.VERBOSE,\r\n          `${formatDateLog(Date.now())}  `,\r\n          Command.RESET,\r\n          Color[type] + Background[type] + Command.BRIGHT,\r\n          `${type} ` + Command.RESET,\r\n          Color.WARN + Command.BRIGHT,\r\n          `[${this.context}]` + Command.RESET,\r\n          Color[type] + Command.BRIGHT,\r\n          `[${typeValue}]` + Command.RESET,\r\n          Color[type],\r\n          typeValue !== 'object' ? value : '',\r\n          Command.RESET,\r\n        );\r\n        typeValue === 'object' ? console.log(/*Level.DARK,*/ value, '\\n') : '';\r\n      } else {\r\n        console.log(\r\n          '[Evolution API]',\r\n          this.instance ? `[${this.instance}]` : '',\r\n          process.pid.toString(),\r\n          '-',\r\n          `${formatDateLog(Date.now())}  `,\r\n          `${type} `,\r\n          `[${this.context}]`,\r\n          `[${typeValue}]`,\r\n          value,\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  public log(value: any) {\r\n    this.console(value, Type.LOG);\r\n  }\r\n\r\n  public info(value: any) {\r\n    this.console(value, Type.INFO);\r\n  }\r\n\r\n  public warn(value: any) {\r\n    this.console(value, Type.WARN);\r\n  }\r\n\r\n  public error(value: any) {\r\n    this.console(value, Type.ERROR);\r\n  }\r\n\r\n  public verbose(value: any) {\r\n    this.console(value, Type.VERBOSE);\r\n  }\r\n\r\n  public debug(value: any) {\r\n    this.console(value, Type.DEBUG);\r\n  }\r\n\r\n  public dark(value: any) {\r\n    this.console(value, Type.DARK);\r\n  }\r\n}\r\n","import { Chatwoot, configService } from '@config/env.config';\r\nimport { Logger } from '@config/logger.config';\r\nimport postgresql from 'pg';\r\n\r\nconst { Pool } = postgresql;\r\n\r\nclass Postgres {\r\n  private logger = new Logger('Postgres');\r\n  private pool;\r\n  private connected = false;\r\n\r\n  getConnection(connectionString: string) {\r\n    if (this.connected) {\r\n      return this.pool;\r\n    } else {\r\n      this.pool = new Pool({\r\n        connectionString,\r\n        ssl: {\r\n          rejectUnauthorized: false,\r\n        },\r\n      });\r\n\r\n      this.pool.on('error', () => {\r\n        this.logger.error('postgres disconnected');\r\n        this.connected = false;\r\n      });\r\n\r\n      try {\r\n        this.connected = true;\r\n      } catch (e) {\r\n        this.connected = false;\r\n        this.logger.error('postgres connect exception caught: ' + e);\r\n        return null;\r\n      }\r\n\r\n      return this.pool;\r\n    }\r\n  }\r\n\r\n  getChatwootConnection() {\r\n    const uri = configService.get<Chatwoot>('CHATWOOT').IMPORT.DATABASE.CONNECTION.URI;\r\n\r\n    return this.getConnection(uri);\r\n  }\r\n}\r\n\r\nexport const postgresClient = new Postgres();\r\n","import { InstanceDto } from '@api/dto/instance.dto';\r\nimport { ChatwootDto } from '@api/integrations/chatbot/chatwoot/dto/chatwoot.dto';\r\nimport { postgresClient } from '@api/integrations/chatbot/chatwoot/libs/postgres.client';\r\nimport { ChatwootService } from '@api/integrations/chatbot/chatwoot/services/chatwoot.service';\r\nimport { Chatwoot, configService } from '@config/env.config';\r\nimport { Logger } from '@config/logger.config';\r\nimport { inbox } from '@figuro/chatwoot-sdk';\r\nimport { Chatwoot as ChatwootModel, Contact, Message } from '@prisma/client';\r\nimport { proto } from 'baileys';\r\n\r\ntype ChatwootUser = {\r\n  user_type: string;\r\n  user_id: number;\r\n};\r\n\r\ntype FksChatwoot = {\r\n  phone_number: string;\r\n  contact_id: string;\r\n  conversation_id: string;\r\n};\r\n\r\ntype firstLastTimestamp = {\r\n  first: number;\r\n  last: number;\r\n};\r\n\r\ntype IWebMessageInfo = Omit<proto.IWebMessageInfo, 'key'> & Partial<Pick<proto.IWebMessageInfo, 'key'>>;\r\n\r\nclass ChatwootImport {\r\n  private logger = new Logger('ChatwootImport');\r\n  private repositoryMessagesCache = new Map<string, Set<string>>();\r\n  private historyMessages = new Map<string, Message[]>();\r\n  private historyContacts = new Map<string, Contact[]>();\r\n\r\n  public getRepositoryMessagesCache(instance: InstanceDto) {\r\n    return this.repositoryMessagesCache.has(instance.instanceName)\r\n      ? this.repositoryMessagesCache.get(instance.instanceName)\r\n      : null;\r\n  }\r\n\r\n  public setRepositoryMessagesCache(instance: InstanceDto, repositoryMessagesCache: Set<string>) {\r\n    this.repositoryMessagesCache.set(instance.instanceName, repositoryMessagesCache);\r\n  }\r\n\r\n  public deleteRepositoryMessagesCache(instance: InstanceDto) {\r\n    this.repositoryMessagesCache.delete(instance.instanceName);\r\n  }\r\n\r\n  public addHistoryMessages(instance: InstanceDto, messagesRaw: Message[]) {\r\n    const actualValue = this.historyMessages.has(instance.instanceName)\r\n      ? this.historyMessages.get(instance.instanceName)\r\n      : [];\r\n    this.historyMessages.set(instance.instanceName, [...actualValue, ...messagesRaw]);\r\n  }\r\n\r\n  public addHistoryContacts(instance: InstanceDto, contactsRaw: Contact[]) {\r\n    const actualValue = this.historyContacts.has(instance.instanceName)\r\n      ? this.historyContacts.get(instance.instanceName)\r\n      : [];\r\n    this.historyContacts.set(instance.instanceName, actualValue.concat(contactsRaw));\r\n  }\r\n\r\n  public deleteHistoryMessages(instance: InstanceDto) {\r\n    this.historyMessages.delete(instance.instanceName);\r\n  }\r\n\r\n  public deleteHistoryContacts(instance: InstanceDto) {\r\n    this.historyContacts.delete(instance.instanceName);\r\n  }\r\n\r\n  public clearAll(instance: InstanceDto) {\r\n    this.deleteRepositoryMessagesCache(instance);\r\n    this.deleteHistoryMessages(instance);\r\n    this.deleteHistoryContacts(instance);\r\n  }\r\n\r\n  public getHistoryMessagesLenght(instance: InstanceDto) {\r\n    return this.historyMessages.get(instance.instanceName)?.length ?? 0;\r\n  }\r\n\r\n  public async importHistoryContacts(instance: InstanceDto, provider: ChatwootDto) {\r\n    try {\r\n      if (this.getHistoryMessagesLenght(instance) > 0) {\r\n        return;\r\n      }\r\n\r\n      const pgClient = postgresClient.getChatwootConnection();\r\n\r\n      let totalContactsImported = 0;\r\n\r\n      const contacts = this.historyContacts.get(instance.instanceName) || [];\r\n      if (contacts.length === 0) {\r\n        return 0;\r\n      }\r\n\r\n      let contactsChunk: Contact[] = this.sliceIntoChunks(contacts, 3000);\r\n      while (contactsChunk.length > 0) {\r\n        const labelSql = `SELECT id FROM labels WHERE title = '${provider.nameInbox}' AND account_id = ${provider.accountId} LIMIT 1`;\r\n\r\n        let labelId = (await pgClient.query(labelSql))?.rows[0]?.id;\r\n\r\n        if (!labelId) {\r\n          // creating label in chatwoot db and getting the id\r\n          const sqlLabel = `INSERT INTO labels (title, color, show_on_sidebar, account_id, created_at, updated_at) VALUES ('${provider.nameInbox}', '#34039B', true, ${provider.accountId}, NOW(), NOW()) RETURNING id`;\r\n\r\n          labelId = (await pgClient.query(sqlLabel))?.rows[0]?.id;\r\n        }\r\n\r\n        // inserting contacts in chatwoot db\r\n        let sqlInsert = `INSERT INTO contacts\r\n          (name, phone_number, account_id, identifier, created_at, updated_at) VALUES `;\r\n        const bindInsert = [provider.accountId];\r\n\r\n        for (const contact of contactsChunk) {\r\n          bindInsert.push(contact.pushName);\r\n          const bindName = `$${bindInsert.length}`;\r\n\r\n          bindInsert.push(`+${contact.remoteJid.split('@')[0]}`);\r\n          const bindPhoneNumber = `$${bindInsert.length}`;\r\n\r\n          bindInsert.push(contact.remoteJid);\r\n          const bindIdentifier = `$${bindInsert.length}`;\r\n\r\n          sqlInsert += `(${bindName}, ${bindPhoneNumber}, $1, ${bindIdentifier}, NOW(), NOW()),`;\r\n        }\r\n        if (sqlInsert.slice(-1) === ',') {\r\n          sqlInsert = sqlInsert.slice(0, -1);\r\n        }\r\n        sqlInsert += ` ON CONFLICT (identifier, account_id)\r\n                       DO UPDATE SET\r\n                        name = EXCLUDED.name,\r\n                        phone_number = EXCLUDED.phone_number,\r\n                        identifier = EXCLUDED.identifier`;\r\n\r\n        totalContactsImported += (await pgClient.query(sqlInsert, bindInsert))?.rowCount ?? 0;\r\n\r\n        const sqlTags = `SELECT id FROM tags WHERE name = '${provider.nameInbox}' LIMIT 1`;\r\n\r\n        const tagData = (await pgClient.query(sqlTags))?.rows[0];\r\n        let tagId = tagData?.id;\r\n\r\n        const sqlTag = `INSERT INTO tags (name, taggings_count) VALUES ('${provider.nameInbox}', ${totalContactsImported}) ON CONFLICT (name) DO UPDATE SET taggings_count = tags.taggings_count + ${totalContactsImported} RETURNING id`;\r\n\r\n        tagId = (await pgClient.query(sqlTag))?.rows[0]?.id;\r\n\r\n        await pgClient.query(sqlTag);\r\n\r\n        let sqlInsertLabel = `INSERT INTO taggings (tag_id, taggable_type, taggable_id, context, created_at) VALUES `;\r\n\r\n        contactsChunk.forEach((contact) => {\r\n          const bindTaggableId = `(SELECT id FROM contacts WHERE identifier = '${contact.remoteJid}' AND account_id = ${provider.accountId})`;\r\n          sqlInsertLabel += `($1, $2, ${bindTaggableId}, $3, NOW()),`;\r\n        });\r\n\r\n        if (sqlInsertLabel.slice(-1) === ',') {\r\n          sqlInsertLabel = sqlInsertLabel.slice(0, -1);\r\n        }\r\n\r\n        await pgClient.query(sqlInsertLabel, [tagId, 'Contact', 'labels']);\r\n\r\n        contactsChunk = this.sliceIntoChunks(contacts, 3000);\r\n      }\r\n\r\n      this.deleteHistoryContacts(instance);\r\n\r\n      return totalContactsImported;\r\n    } catch (error) {\r\n      this.logger.error(`Error on import history contacts: ${error.toString()}`);\r\n    }\r\n  }\r\n\r\n  public async getExistingSourceIds(sourceIds: string[]): Promise<Set<string>> {\r\n    try {\r\n      const existingSourceIdsSet = new Set<string>();\r\n\r\n      if (sourceIds.length === 0) {\r\n        return existingSourceIdsSet;\r\n      }\r\n\r\n      const formattedSourceIds = sourceIds.map((sourceId) => `WAID:${sourceId.replace('WAID:', '')}`); // Make sure the sourceId is always formatted as WAID:1234567890\r\n      const query = 'SELECT source_id FROM messages WHERE source_id = ANY($1)';\r\n      const pgClient = postgresClient.getChatwootConnection();\r\n      const result = await pgClient.query(query, [formattedSourceIds]);\r\n\r\n      for (const row of result.rows) {\r\n        existingSourceIdsSet.add(row.source_id);\r\n      }\r\n\r\n      return existingSourceIdsSet;\r\n    } catch (error) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  public async importHistoryMessages(\r\n    instance: InstanceDto,\r\n    chatwootService: ChatwootService,\r\n    inbox: inbox,\r\n    provider: ChatwootModel,\r\n  ) {\r\n    try {\r\n      const pgClient = postgresClient.getChatwootConnection();\r\n\r\n      const chatwootUser = await this.getChatwootUser(provider);\r\n      if (!chatwootUser) {\r\n        throw new Error('User not found to import messages.');\r\n      }\r\n\r\n      let totalMessagesImported = 0;\r\n\r\n      let messagesOrdered = this.historyMessages.get(instance.instanceName) || [];\r\n      if (messagesOrdered.length === 0) {\r\n        return 0;\r\n      }\r\n\r\n      // ordering messages by number and timestamp asc\r\n      messagesOrdered.sort((a, b) => {\r\n        const aKey = a.key as {\r\n          remoteJid: string;\r\n        };\r\n\r\n        const bKey = b.key as {\r\n          remoteJid: string;\r\n        };\r\n\r\n        const aMessageTimestamp = a.messageTimestamp as any as number;\r\n        const bMessageTimestamp = b.messageTimestamp as any as number;\r\n\r\n        return parseInt(aKey.remoteJid) - parseInt(bKey.remoteJid) || aMessageTimestamp - bMessageTimestamp;\r\n      });\r\n\r\n      const allMessagesMappedByPhoneNumber = this.createMessagesMapByPhoneNumber(messagesOrdered);\r\n      // Map structure: +552199999999 => { first message timestamp from number, last message timestamp from number}\r\n      const phoneNumbersWithTimestamp = new Map<string, firstLastTimestamp>();\r\n      allMessagesMappedByPhoneNumber.forEach((messages: Message[], phoneNumber: string) => {\r\n        phoneNumbersWithTimestamp.set(phoneNumber, {\r\n          first: messages[0]?.messageTimestamp as any as number,\r\n          last: messages[messages.length - 1]?.messageTimestamp as any as number,\r\n        });\r\n      });\r\n\r\n      const existingSourceIds = await this.getExistingSourceIds(messagesOrdered.map((message: any) => message.key.id));\r\n      messagesOrdered = messagesOrdered.filter((message: any) => !existingSourceIds.has(message.key.id));\r\n      // processing messages in batch\r\n      const batchSize = 4000;\r\n      let messagesChunk: Message[] = this.sliceIntoChunks(messagesOrdered, batchSize);\r\n      while (messagesChunk.length > 0) {\r\n        // Map structure: +552199999999 => Message[]\r\n        const messagesByPhoneNumber = this.createMessagesMapByPhoneNumber(messagesChunk);\r\n\r\n        if (messagesByPhoneNumber.size > 0) {\r\n          const fksByNumber = await this.selectOrCreateFksFromChatwoot(\r\n            provider,\r\n            inbox,\r\n            phoneNumbersWithTimestamp,\r\n            messagesByPhoneNumber,\r\n          );\r\n\r\n          // inserting messages in chatwoot db\r\n          let sqlInsertMsg = `INSERT INTO messages\r\n            (content, processed_message_content, account_id, inbox_id, conversation_id, message_type, private, content_type,\r\n            sender_type, sender_id, source_id, created_at, updated_at) VALUES `;\r\n          const bindInsertMsg = [provider.accountId, inbox.id];\r\n\r\n          messagesByPhoneNumber.forEach((messages: any[], phoneNumber: string) => {\r\n            const fksChatwoot = fksByNumber.get(phoneNumber);\r\n\r\n            messages.forEach((message) => {\r\n              if (!message.message) {\r\n                return;\r\n              }\r\n\r\n              if (!fksChatwoot?.conversation_id || !fksChatwoot?.contact_id) {\r\n                return;\r\n              }\r\n\r\n              const contentMessage = this.getContentMessage(chatwootService, message);\r\n              if (!contentMessage) {\r\n                return;\r\n              }\r\n\r\n              bindInsertMsg.push(contentMessage);\r\n              const bindContent = `$${bindInsertMsg.length}`;\r\n\r\n              bindInsertMsg.push(fksChatwoot.conversation_id);\r\n              const bindConversationId = `$${bindInsertMsg.length}`;\r\n\r\n              bindInsertMsg.push(message.key.fromMe ? '1' : '0');\r\n              const bindMessageType = `$${bindInsertMsg.length}`;\r\n\r\n              bindInsertMsg.push(message.key.fromMe ? chatwootUser.user_type : 'Contact');\r\n              const bindSenderType = `$${bindInsertMsg.length}`;\r\n\r\n              bindInsertMsg.push(message.key.fromMe ? chatwootUser.user_id : fksChatwoot.contact_id);\r\n              const bindSenderId = `$${bindInsertMsg.length}`;\r\n\r\n              bindInsertMsg.push('WAID:' + message.key.id);\r\n              const bindSourceId = `$${bindInsertMsg.length}`;\r\n\r\n              bindInsertMsg.push(message.messageTimestamp as number);\r\n              const bindmessageTimestamp = `$${bindInsertMsg.length}`;\r\n\r\n              sqlInsertMsg += `(${bindContent}, ${bindContent}, $1, $2, ${bindConversationId}, ${bindMessageType}, FALSE, 0,\r\n                  ${bindSenderType},${bindSenderId},${bindSourceId}, to_timestamp(${bindmessageTimestamp}), to_timestamp(${bindmessageTimestamp})),`;\r\n            });\r\n          });\r\n          if (bindInsertMsg.length > 2) {\r\n            if (sqlInsertMsg.slice(-1) === ',') {\r\n              sqlInsertMsg = sqlInsertMsg.slice(0, -1);\r\n            }\r\n            totalMessagesImported += (await pgClient.query(sqlInsertMsg, bindInsertMsg))?.rowCount ?? 0;\r\n          }\r\n        }\r\n        messagesChunk = this.sliceIntoChunks(messagesOrdered, batchSize);\r\n      }\r\n\r\n      this.deleteHistoryMessages(instance);\r\n      this.deleteRepositoryMessagesCache(instance);\r\n\r\n      const providerData: ChatwootDto = {\r\n        ...provider,\r\n        ignoreJids: Array.isArray(provider.ignoreJids) ? provider.ignoreJids.map((event) => String(event)) : [],\r\n      };\r\n\r\n      this.importHistoryContacts(instance, providerData);\r\n\r\n      return totalMessagesImported;\r\n    } catch (error) {\r\n      this.logger.error(`Error on import history messages: ${error.toString()}`);\r\n\r\n      this.deleteHistoryMessages(instance);\r\n      this.deleteRepositoryMessagesCache(instance);\r\n    }\r\n  }\r\n\r\n  public async selectOrCreateFksFromChatwoot(\r\n    provider: ChatwootModel,\r\n    inbox: inbox,\r\n    phoneNumbersWithTimestamp: Map<string, firstLastTimestamp>,\r\n    messagesByPhoneNumber: Map<string, Message[]>,\r\n  ): Promise<Map<string, FksChatwoot>> {\r\n    const pgClient = postgresClient.getChatwootConnection();\r\n\r\n    const bindValues = [provider.accountId, inbox.id];\r\n    const phoneNumberBind = Array.from(messagesByPhoneNumber.keys())\r\n      .map((phoneNumber) => {\r\n        const phoneNumberTimestamp = phoneNumbersWithTimestamp.get(phoneNumber);\r\n\r\n        if (phoneNumberTimestamp) {\r\n          bindValues.push(phoneNumber);\r\n          let bindStr = `($${bindValues.length},`;\r\n\r\n          bindValues.push(phoneNumberTimestamp.first);\r\n          bindStr += `$${bindValues.length},`;\r\n\r\n          bindValues.push(phoneNumberTimestamp.last);\r\n          return `${bindStr}$${bindValues.length})`;\r\n        }\r\n      })\r\n      .join(',');\r\n\r\n    // select (or insert when necessary) data from tables contacts, contact_inboxes, conversations from chatwoot db\r\n    const sqlFromChatwoot = `WITH\r\n              phone_number AS (\r\n                SELECT phone_number, created_at::INTEGER, last_activity_at::INTEGER FROM (\r\n                  VALUES \r\n                   ${phoneNumberBind}\r\n                 ) as t (phone_number, created_at, last_activity_at)\r\n              ),\r\n\r\n              only_new_phone_number AS (\r\n                SELECT * FROM phone_number\r\n                WHERE phone_number NOT IN (\r\n                  SELECT phone_number\r\n                  FROM contacts\r\n                    JOIN contact_inboxes ci ON ci.contact_id = contacts.id AND ci.inbox_id = $2\r\n                    JOIN conversations con ON con.contact_inbox_id = ci.id \r\n                      AND con.account_id = $1\r\n                      AND con.inbox_id = $2\r\n                      AND con.contact_id = contacts.id\r\n                  WHERE contacts.account_id = $1\r\n                )\r\n              ),\r\n\r\n              new_contact AS (\r\n                INSERT INTO contacts (name, phone_number, account_id, identifier, created_at, updated_at)\r\n                SELECT REPLACE(p.phone_number, '+', ''), p.phone_number, $1, CONCAT(REPLACE(p.phone_number, '+', ''),\r\n                  '@s.whatsapp.net'), to_timestamp(p.created_at), to_timestamp(p.last_activity_at)\r\n                FROM only_new_phone_number AS p\r\n                ON CONFLICT(identifier, account_id) DO UPDATE SET updated_at = EXCLUDED.updated_at\r\n                RETURNING id, phone_number, created_at, updated_at\r\n              ),\r\n\r\n              new_contact_inbox AS (\r\n                INSERT INTO contact_inboxes (contact_id, inbox_id, source_id, created_at, updated_at)\r\n                SELECT new_contact.id, $2, gen_random_uuid(), new_contact.created_at, new_contact.updated_at\r\n                FROM new_contact \r\n                RETURNING id, contact_id, created_at, updated_at\r\n              ),\r\n\r\n              new_conversation AS (\r\n                INSERT INTO conversations (account_id, inbox_id, status, contact_id,\r\n                  contact_inbox_id, uuid, last_activity_at, created_at, updated_at)\r\n                SELECT $1, $2, 0, new_contact_inbox.contact_id, new_contact_inbox.id, gen_random_uuid(),\r\n                  new_contact_inbox.updated_at, new_contact_inbox.created_at, new_contact_inbox.updated_at\r\n                FROM new_contact_inbox\r\n                RETURNING id, contact_id\r\n              )\r\n\r\n              SELECT new_contact.phone_number, new_conversation.contact_id, new_conversation.id AS conversation_id\r\n              FROM new_conversation \r\n              JOIN new_contact ON new_conversation.contact_id = new_contact.id\r\n\r\n              UNION\r\n\r\n              SELECT p.phone_number, c.id contact_id, con.id conversation_id\r\n                FROM phone_number p\r\n              JOIN contacts c ON c.phone_number = p.phone_number\r\n              JOIN contact_inboxes ci ON ci.contact_id = c.id AND ci.inbox_id = $2\r\n              JOIN conversations con ON con.contact_inbox_id = ci.id AND con.account_id = $1\r\n                AND con.inbox_id = $2 AND con.contact_id = c.id`;\r\n\r\n    const fksFromChatwoot = await pgClient.query(sqlFromChatwoot, bindValues);\r\n\r\n    return new Map(fksFromChatwoot.rows.map((item: FksChatwoot) => [item.phone_number, item]));\r\n  }\r\n\r\n  public async getChatwootUser(provider: ChatwootModel): Promise<ChatwootUser> {\r\n    try {\r\n      const pgClient = postgresClient.getChatwootConnection();\r\n\r\n      const sqlUser = `SELECT owner_type AS user_type, owner_id AS user_id\r\n                         FROM access_tokens\r\n                       WHERE token = $1`;\r\n\r\n      return (await pgClient.query(sqlUser, [provider.token]))?.rows[0] || false;\r\n    } catch (error) {\r\n      this.logger.error(`Error on getChatwootUser: ${error.toString()}`);\r\n    }\r\n  }\r\n\r\n  public createMessagesMapByPhoneNumber(messages: Message[]): Map<string, Message[]> {\r\n    return messages.reduce((acc: Map<string, Message[]>, message: Message) => {\r\n      const key = message?.key as {\r\n        remoteJid: string;\r\n      };\r\n      if (!this.isIgnorePhoneNumber(key?.remoteJid)) {\r\n        const phoneNumber = key?.remoteJid?.split('@')[0];\r\n        if (phoneNumber) {\r\n          const phoneNumberPlus = `+${phoneNumber}`;\r\n          const messages = acc.has(phoneNumberPlus) ? acc.get(phoneNumberPlus) : [];\r\n          messages.push(message);\r\n          acc.set(phoneNumberPlus, messages);\r\n        }\r\n      }\r\n\r\n      return acc;\r\n    }, new Map());\r\n  }\r\n\r\n  public async getContactsOrderByRecentConversations(\r\n    inbox: inbox,\r\n    provider: ChatwootModel,\r\n    limit = 50,\r\n  ): Promise<{ id: number; phone_number: string; identifier: string }[]> {\r\n    try {\r\n      const pgClient = postgresClient.getChatwootConnection();\r\n\r\n      const sql = `SELECT contacts.id, contacts.identifier, contacts.phone_number\r\n                     FROM conversations\r\n                   JOIN contacts ON contacts.id = conversations.contact_id\r\n                   WHERE conversations.account_id = $1\r\n                     AND inbox_id = $2\r\n                   ORDER BY conversations.last_activity_at DESC\r\n                   LIMIT $3`;\r\n\r\n      return (await pgClient.query(sql, [provider.accountId, inbox.id, limit]))?.rows;\r\n    } catch (error) {\r\n      this.logger.error(`Error on get recent conversations: ${error.toString()}`);\r\n    }\r\n  }\r\n\r\n  public getContentMessage(chatwootService: ChatwootService, msg: IWebMessageInfo) {\r\n    const contentMessage = chatwootService.getConversationMessage(msg.message);\r\n    if (contentMessage) {\r\n      return contentMessage;\r\n    }\r\n\r\n    if (!configService.get<Chatwoot>('CHATWOOT').IMPORT.PLACEHOLDER_MEDIA_MESSAGE) {\r\n      return '';\r\n    }\r\n\r\n    const types = {\r\n      documentMessage: msg.message.documentMessage,\r\n      documentWithCaptionMessage: msg.message.documentWithCaptionMessage?.message?.documentMessage,\r\n      imageMessage: msg.message.imageMessage,\r\n      videoMessage: msg.message.videoMessage,\r\n      audioMessage: msg.message.audioMessage,\r\n      stickerMessage: msg.message.stickerMessage,\r\n      templateMessage: msg.message.templateMessage?.hydratedTemplate?.hydratedContentText,\r\n    };\r\n    const typeKey = Object.keys(types).find((key) => types[key] !== undefined);\r\n\r\n    switch (typeKey) {\r\n      case 'documentMessage':\r\n        return `_<File: ${msg.message.documentMessage.fileName}${\r\n          msg.message.documentMessage.caption ? ` ${msg.message.documentMessage.caption}` : ''\r\n        }>_`;\r\n\r\n      case 'documentWithCaptionMessage':\r\n        return `_<File: ${msg.message.documentWithCaptionMessage.message.documentMessage.fileName}${\r\n          msg.message.documentWithCaptionMessage.message.documentMessage.caption\r\n            ? ` ${msg.message.documentWithCaptionMessage.message.documentMessage.caption}`\r\n            : ''\r\n        }>_`;\r\n\r\n      case 'templateMessage':\r\n        return msg.message.templateMessage.hydratedTemplate.hydratedTitleText\r\n          ? `*${msg.message.templateMessage.hydratedTemplate.hydratedTitleText}*\\\\n`\r\n          : '' + msg.message.templateMessage.hydratedTemplate.hydratedContentText;\r\n\r\n      case 'imageMessage':\r\n        return '_<Image Message>_';\r\n\r\n      case 'videoMessage':\r\n        return '_<Video Message>_';\r\n\r\n      case 'audioMessage':\r\n        return '_<Audio Message>_';\r\n\r\n      case 'stickerMessage':\r\n        return '_<Sticker Message>_';\r\n\r\n      default:\r\n        return '';\r\n    }\r\n  }\r\n\r\n  public sliceIntoChunks(arr: any[], chunkSize: number) {\r\n    return arr.splice(0, chunkSize);\r\n  }\r\n\r\n  public isGroup(remoteJid: string) {\r\n    return remoteJid.includes('@g.us');\r\n  }\r\n\r\n  public isIgnorePhoneNumber(remoteJid: string) {\r\n    return this.isGroup(remoteJid) || remoteJid === 'status@broadcast' || remoteJid === '0@s.whatsapp.net';\r\n  }\r\n\r\n  public updateMessageSourceID(messageId: string | number, sourceId: string) {\r\n    const pgClient = postgresClient.getChatwootConnection();\r\n\r\n    const sql = `UPDATE messages SET source_id = $1, status = 0, created_at = NOW(), updated_at = NOW() WHERE id = $2;`;\r\n\r\n    return pgClient.query(sql, [`WAID:${sourceId}`, messageId]);\r\n  }\r\n}\r\n\r\nexport const chatwootImport = new ChatwootImport();\r\n","import { InstanceDto } from '@api/dto/instance.dto';\r\nimport { Options, Quoted, SendAudioDto, SendMediaDto, SendTextDto } from '@api/dto/sendMessage.dto';\r\nimport { ChatwootDto } from '@api/integrations/chatbot/chatwoot/dto/chatwoot.dto';\r\nimport { postgresClient } from '@api/integrations/chatbot/chatwoot/libs/postgres.client';\r\nimport { chatwootImport } from '@api/integrations/chatbot/chatwoot/utils/chatwoot-import-helper';\r\nimport { PrismaRepository } from '@api/repository/repository.service';\r\nimport { CacheService } from '@api/services/cache.service';\r\nimport { WAMonitoringService } from '@api/services/monitor.service';\r\nimport { Events } from '@api/types/wa.types';\r\nimport { Chatwoot, ConfigService, Database, HttpServer } from '@config/env.config';\r\nimport { Logger } from '@config/logger.config';\r\nimport ChatwootClient, {\r\n  ChatwootAPIConfig,\r\n  contact,\r\n  contact_inboxes,\r\n  conversation,\r\n  conversation_show,\r\n  generic_id,\r\n  inbox,\r\n} from '@figuro/chatwoot-sdk';\r\nimport { request as chatwootRequest } from '@figuro/chatwoot-sdk/dist/core/request';\r\nimport { Chatwoot as ChatwootModel, Contact as ContactModel, Message as MessageModel } from '@prisma/client';\r\nimport i18next from '@utils/i18n';\r\nimport { sendTelemetry } from '@utils/sendTelemetry';\r\nimport axios from 'axios';\r\nimport { proto } from 'baileys';\r\nimport dayjs from 'dayjs';\r\nimport FormData from 'form-data';\r\nimport Jimp from 'jimp';\r\nimport Long from 'long';\r\nimport mimeTypes from 'mime-types';\r\nimport path from 'path';\r\nimport { Readable } from 'stream';\r\n\r\ninterface ChatwootMessage {\r\n  messageId?: number;\r\n  inboxId?: number;\r\n  conversationId?: number;\r\n  contactInboxSourceId?: string;\r\n  isRead?: boolean;\r\n}\r\n\r\nexport class ChatwootService {\r\n  private readonly logger = new Logger('ChatwootService');\r\n\r\n  private provider: any;\r\n\r\n  constructor(\r\n    private readonly waMonitor: WAMonitoringService,\r\n    private readonly configService: ConfigService,\r\n    private readonly prismaRepository: PrismaRepository,\r\n    private readonly cache: CacheService,\r\n  ) {}\r\n\r\n  private pgClient = postgresClient.getChatwootConnection();\r\n\r\n  private async getProvider(instance: InstanceDto): Promise<ChatwootModel | null> {\r\n    const cacheKey = `${instance.instanceName}:getProvider`;\r\n    if (await this.cache.has(cacheKey)) {\r\n      const provider = (await this.cache.get(cacheKey)) as ChatwootModel;\r\n\r\n      return provider;\r\n    }\r\n\r\n    const provider = await this.waMonitor.waInstances[instance.instanceName]?.findChatwoot();\r\n\r\n    if (!provider) {\r\n      this.logger.warn('provider not found');\r\n      return null;\r\n    }\r\n\r\n    this.cache.set(cacheKey, provider);\r\n\r\n    return provider;\r\n  }\r\n\r\n  private async clientCw(instance: InstanceDto) {\r\n    const provider = await this.getProvider(instance);\r\n\r\n    if (!provider) {\r\n      this.logger.error('provider not found');\r\n      return null;\r\n    }\r\n\r\n    this.provider = provider;\r\n\r\n    const client = new ChatwootClient({\r\n      config: this.getClientCwConfig(),\r\n    });\r\n\r\n    return client;\r\n  }\r\n\r\n  public getClientCwConfig(): ChatwootAPIConfig & { nameInbox: string; mergeBrazilContacts: boolean } {\r\n    return {\r\n      basePath: this.provider.url,\r\n      with_credentials: true,\r\n      credentials: 'include',\r\n      token: this.provider.token,\r\n      nameInbox: this.provider.nameInbox,\r\n      mergeBrazilContacts: this.provider.mergeBrazilContacts,\r\n    };\r\n  }\r\n\r\n  public getCache() {\r\n    return this.cache;\r\n  }\r\n\r\n  public async create(instance: InstanceDto, data: ChatwootDto) {\r\n    await this.waMonitor.waInstances[instance.instanceName].setChatwoot(data);\r\n\r\n    if (data.autoCreate) {\r\n      this.logger.log('Auto create chatwoot instance');\r\n      const urlServer = this.configService.get<HttpServer>('SERVER').URL;\r\n\r\n      await this.initInstanceChatwoot(\r\n        instance,\r\n        data.nameInbox ?? instance.instanceName.split('-cwId-')[0],\r\n        `${urlServer}/chatwoot/webhook/${encodeURIComponent(instance.instanceName)}`,\r\n        true,\r\n        data.number,\r\n        data.organization,\r\n        data.logo,\r\n      );\r\n    }\r\n    return data;\r\n  }\r\n\r\n  public async find(instance: InstanceDto): Promise<ChatwootDto> {\r\n    try {\r\n      return await this.waMonitor.waInstances[instance.instanceName].findChatwoot();\r\n    } catch (error) {\r\n      this.logger.error('chatwoot not found');\r\n      return { enabled: null, url: '' };\r\n    }\r\n  }\r\n\r\n  public async getContact(instance: InstanceDto, id: number) {\r\n    const client = await this.clientCw(instance);\r\n\r\n    if (!client) {\r\n      this.logger.warn('client not found');\r\n      return null;\r\n    }\r\n\r\n    if (!id) {\r\n      this.logger.warn('id is required');\r\n      return null;\r\n    }\r\n\r\n    const contact = await client.contact.getContactable({\r\n      accountId: this.provider.accountId,\r\n      id,\r\n    });\r\n\r\n    if (!contact) {\r\n      this.logger.warn('contact not found');\r\n      return null;\r\n    }\r\n\r\n    return contact;\r\n  }\r\n\r\n  public async initInstanceChatwoot(\r\n    instance: InstanceDto,\r\n    inboxName: string,\r\n    webhookUrl: string,\r\n    qrcode: boolean,\r\n    number: string,\r\n    organization?: string,\r\n    logo?: string,\r\n  ) {\r\n    const client = await this.clientCw(instance);\r\n\r\n    if (!client) {\r\n      this.logger.warn('client not found');\r\n      return null;\r\n    }\r\n\r\n    const findInbox: any = await client.inboxes.list({\r\n      accountId: this.provider.accountId,\r\n    });\r\n\r\n    const checkDuplicate = findInbox.payload.map((inbox) => inbox.name).includes(inboxName);\r\n\r\n    let inboxId: number;\r\n\r\n    this.logger.log('Creating chatwoot inbox');\r\n    if (!checkDuplicate) {\r\n      const data = {\r\n        type: 'api',\r\n        webhook_url: webhookUrl,\r\n      };\r\n\r\n      const inbox = await client.inboxes.create({\r\n        accountId: this.provider.accountId,\r\n        data: {\r\n          name: inboxName,\r\n          channel: data as any,\r\n        },\r\n      });\r\n\r\n      if (!inbox) {\r\n        this.logger.warn('inbox not found');\r\n        return null;\r\n      }\r\n\r\n      inboxId = inbox.id;\r\n    } else {\r\n      const inbox = findInbox.payload.find((inbox) => inbox.name === inboxName);\r\n\r\n      if (!inbox) {\r\n        this.logger.warn('inbox not found');\r\n        return null;\r\n      }\r\n\r\n      inboxId = inbox.id;\r\n    }\r\n    this.logger.log(`Inbox created - inboxId: ${inboxId}`);\r\n\r\n    if (!this.configService.get<Chatwoot>('CHATWOOT').BOT_CONTACT) {\r\n      this.logger.log('Chatwoot bot contact is disabled');\r\n\r\n      return true;\r\n    }\r\n\r\n    this.logger.log('Creating chatwoot bot contact');\r\n    const contact =\r\n      (await this.findContact(instance, '123456')) ||\r\n      ((await this.createContact(\r\n        instance,\r\n        '123456',\r\n        inboxId,\r\n        false,\r\n        organization ? organization : 'EvolutionAPI',\r\n        logo ? logo : 'https://evolution-api.com/files/evolution-api-favicon.png',\r\n      )) as any);\r\n\r\n    if (!contact) {\r\n      this.logger.warn('contact not found');\r\n      return null;\r\n    }\r\n\r\n    const contactId = contact.id || contact.payload.contact.id;\r\n    this.logger.log(`Contact created - contactId: ${contactId}`);\r\n\r\n    if (qrcode) {\r\n      this.logger.log('QR code enabled');\r\n      const data = {\r\n        contact_id: contactId.toString(),\r\n        inbox_id: inboxId.toString(),\r\n      };\r\n\r\n      const conversation = await client.conversations.create({\r\n        accountId: this.provider.accountId,\r\n        data,\r\n      });\r\n\r\n      if (!conversation) {\r\n        this.logger.warn('conversation not found');\r\n        return null;\r\n      }\r\n\r\n      let contentMsg = 'init';\r\n\r\n      if (number) {\r\n        contentMsg = `init:${number}`;\r\n      }\r\n\r\n      const message = await client.messages.create({\r\n        accountId: this.provider.accountId,\r\n        conversationId: conversation.id,\r\n        data: {\r\n          content: contentMsg,\r\n          message_type: 'outgoing',\r\n        },\r\n      });\r\n\r\n      if (!message) {\r\n        this.logger.warn('conversation not found');\r\n        return null;\r\n      }\r\n      this.logger.log('Init message sent');\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public async createContact(\r\n    instance: InstanceDto,\r\n    phoneNumber: string,\r\n    inboxId: number,\r\n    isGroup: boolean,\r\n    name?: string,\r\n    avatar_url?: string,\r\n    jid?: string,\r\n  ) {\r\n    const client = await this.clientCw(instance);\r\n\r\n    if (!client) {\r\n      this.logger.warn('client not found');\r\n      return null;\r\n    }\r\n\r\n    let data: any = {};\r\n    if (!isGroup) {\r\n      data = {\r\n        inbox_id: inboxId,\r\n        name: name || phoneNumber,\r\n        identifier: jid,\r\n        avatar_url: avatar_url,\r\n      };\r\n\r\n      if ((jid && jid.includes('@')) || !jid) {\r\n        data['phone_number'] = `+${phoneNumber}`;\r\n      }\r\n    } else {\r\n      data = {\r\n        inbox_id: inboxId,\r\n        name: name || phoneNumber,\r\n        identifier: phoneNumber,\r\n        avatar_url: avatar_url,\r\n      };\r\n    }\r\n\r\n    const contact = await client.contacts.create({\r\n      accountId: this.provider.accountId,\r\n      data,\r\n    });\r\n\r\n    if (!contact) {\r\n      this.logger.warn('contact not found');\r\n      return null;\r\n    }\r\n\r\n    const findContact = await this.findContact(instance, phoneNumber);\r\n\r\n    const contactId = findContact?.id;\r\n\r\n    await this.addLabelToContact(this.provider.nameInbox, contactId);\r\n\r\n    return contact;\r\n  }\r\n\r\n  public async updateContact(instance: InstanceDto, id: number, data: any) {\r\n    const client = await this.clientCw(instance);\r\n\r\n    if (!client) {\r\n      this.logger.warn('client not found');\r\n      return null;\r\n    }\r\n\r\n    if (!id) {\r\n      this.logger.warn('id is required');\r\n      return null;\r\n    }\r\n\r\n    try {\r\n      const contact = await client.contacts.update({\r\n        accountId: this.provider.accountId,\r\n        id,\r\n        data,\r\n      });\r\n\r\n      return contact;\r\n    } catch (error) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  public async addLabelToContact(nameInbox: string, contactId: number) {\r\n    try {\r\n      const uri = this.configService.get<Chatwoot>('CHATWOOT').IMPORT.DATABASE.CONNECTION.URI;\r\n\r\n      if (!uri) return false;\r\n\r\n      const sqlTags = `SELECT id, taggings_count FROM tags WHERE name = $1 LIMIT 1`;\r\n      const tagData = (await this.pgClient.query(sqlTags, [nameInbox]))?.rows[0];\r\n      let tagId = tagData?.id;\r\n      const taggingsCount = tagData?.taggings_count || 0;\r\n\r\n      const sqlTag = `INSERT INTO tags (name, taggings_count) \r\n                      VALUES ($1, $2) \r\n                      ON CONFLICT (name) \r\n                      DO UPDATE SET taggings_count = tags.taggings_count + 1 \r\n                      RETURNING id`;\r\n\r\n      tagId = (await this.pgClient.query(sqlTag, [nameInbox, taggingsCount + 1]))?.rows[0]?.id;\r\n\r\n      const sqlCheckTagging = `SELECT 1 FROM taggings \r\n                               WHERE tag_id = $1 AND taggable_type = 'Contact' AND taggable_id = $2 AND context = 'labels' LIMIT 1`;\r\n\r\n      const taggingExists = (await this.pgClient.query(sqlCheckTagging, [tagId, contactId]))?.rowCount > 0;\r\n\r\n      if (!taggingExists) {\r\n        const sqlInsertLabel = `INSERT INTO taggings (tag_id, taggable_type, taggable_id, context, created_at) \r\n                                VALUES ($1, 'Contact', $2, 'labels', NOW())`;\r\n\r\n        await this.pgClient.query(sqlInsertLabel, [tagId, contactId]);\r\n      }\r\n\r\n      return true;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  public async findContact(instance: InstanceDto, phoneNumber: string) {\r\n    const client = await this.clientCw(instance);\r\n\r\n    if (!client) {\r\n      this.logger.warn('client not found');\r\n      return null;\r\n    }\r\n\r\n    let query: any;\r\n    const isGroup = phoneNumber.includes('@g.us');\r\n\r\n    if (!isGroup) {\r\n      query = `+${phoneNumber}`;\r\n    } else {\r\n      query = phoneNumber;\r\n    }\r\n\r\n    let contact: any;\r\n\r\n    if (isGroup) {\r\n      contact = await client.contacts.search({\r\n        accountId: this.provider.accountId,\r\n        q: query,\r\n      });\r\n    } else {\r\n      contact = await chatwootRequest(this.getClientCwConfig(), {\r\n        method: 'POST',\r\n        url: `/api/v1/accounts/${this.provider.accountId}/contacts/filter`,\r\n        body: {\r\n          payload: this.getFilterPayload(query),\r\n        },\r\n      });\r\n    }\r\n\r\n    if (!contact && contact?.payload?.length === 0) {\r\n      this.logger.warn('contact not found');\r\n      return null;\r\n    }\r\n\r\n    if (!isGroup) {\r\n      return contact.payload.length > 1 ? this.findContactInContactList(contact.payload, query) : contact.payload[0];\r\n    } else {\r\n      return contact.payload.find((contact) => contact.identifier === query);\r\n    }\r\n  }\r\n\r\n  private async mergeBrazilianContacts(contacts: any[]) {\r\n    try {\r\n      const contact = await chatwootRequest(this.getClientCwConfig(), {\r\n        method: 'POST',\r\n        url: `/api/v1/accounts/${this.provider.accountId}/actions/contact_merge`,\r\n        body: {\r\n          base_contact_id: contacts.find((contact) => contact.phone_number.length === 14)?.id,\r\n          mergee_contact_id: contacts.find((contact) => contact.phone_number.length === 13)?.id,\r\n        },\r\n      });\r\n\r\n      return contact;\r\n    } catch {\r\n      this.logger.error('Error merging contacts');\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private findContactInContactList(contacts: any[], query: string) {\r\n    const phoneNumbers = this.getNumbers(query);\r\n    const searchableFields = this.getSearchableFields();\r\n\r\n    // eslint-disable-next-line prettier/prettier\r\n    if (contacts.length === 2 && this.getClientCwConfig().mergeBrazilContacts && query.startsWith('+55')) {\r\n      const contact = this.mergeBrazilianContacts(contacts);\r\n      if (contact) {\r\n        return contact;\r\n      }\r\n    }\r\n\r\n    const phone = phoneNumbers.reduce(\r\n      (savedNumber, number) => (number.length > savedNumber.length ? number : savedNumber),\r\n      '',\r\n    );\r\n\r\n    const contact_with9 = contacts.find((contact) => contact.phone_number === phone);\r\n    if (contact_with9) {\r\n      return contact_with9;\r\n    }\r\n\r\n    for (const contact of contacts) {\r\n      for (const field of searchableFields) {\r\n        if (contact[field] && phoneNumbers.includes(contact[field])) {\r\n          return contact;\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  private getNumbers(query: string) {\r\n    const numbers = [];\r\n    numbers.push(query);\r\n\r\n    if (query.startsWith('+55') && query.length === 14) {\r\n      const withoutNine = query.slice(0, 5) + query.slice(6);\r\n      numbers.push(withoutNine);\r\n    } else if (query.startsWith('+55') && query.length === 13) {\r\n      const withNine = query.slice(0, 5) + '9' + query.slice(5);\r\n      numbers.push(withNine);\r\n    }\r\n\r\n    return numbers;\r\n  }\r\n\r\n  private getSearchableFields() {\r\n    return ['phone_number'];\r\n  }\r\n\r\n  private getFilterPayload(query: string) {\r\n    const filterPayload = [];\r\n\r\n    const numbers = this.getNumbers(query);\r\n    const fieldsToSearch = this.getSearchableFields();\r\n\r\n    fieldsToSearch.forEach((field, index1) => {\r\n      numbers.forEach((number, index2) => {\r\n        const queryOperator = fieldsToSearch.length - 1 === index1 && numbers.length - 1 === index2 ? null : 'OR';\r\n        filterPayload.push({\r\n          attribute_key: field,\r\n          filter_operator: 'equal_to',\r\n          values: [number.replace('+', '')],\r\n          query_operator: queryOperator,\r\n        });\r\n      });\r\n    });\r\n\r\n    return filterPayload;\r\n  }\r\n\r\n  public async createConversation(instance: InstanceDto, body: any) {\r\n    try {\r\n      this.logger.verbose('--- Start createConversation ---');\r\n      this.logger.verbose(`Instance: ${JSON.stringify(instance)}`);\r\n\r\n      const client = await this.clientCw(instance);\r\n\r\n      if (!client) {\r\n        this.logger.warn(`Client not found for instance: ${JSON.stringify(instance)}`);\r\n        return null;\r\n      }\r\n\r\n      const cacheKey = `${instance.instanceName}:createConversation-${body.key.remoteJid}`;\r\n      this.logger.verbose(`Cache key: ${cacheKey}`);\r\n\r\n      if (await this.cache.has(cacheKey)) {\r\n        this.logger.verbose(`Cache hit for key: ${cacheKey}`);\r\n        const conversationId = (await this.cache.get(cacheKey)) as number;\r\n        this.logger.verbose(`Cached conversation ID: ${conversationId}`);\r\n        let conversationExists: conversation | boolean;\r\n        try {\r\n          conversationExists = await client.conversations.get({\r\n            accountId: this.provider.accountId,\r\n            conversationId: conversationId,\r\n          });\r\n          this.logger.verbose(`Conversation exists: ${JSON.stringify(conversationExists)}`);\r\n        } catch (error) {\r\n          this.logger.error(`Error getting conversation: ${error}`);\r\n          conversationExists = false;\r\n        }\r\n        if (!conversationExists) {\r\n          this.logger.verbose('Conversation does not exist, re-calling createConversation');\r\n          this.cache.delete(cacheKey);\r\n          return await this.createConversation(instance, body);\r\n        }\r\n\r\n        return conversationId;\r\n      }\r\n\r\n      const isGroup = body.key.remoteJid.includes('@g.us');\r\n      this.logger.verbose(`Is group: ${isGroup}`);\r\n\r\n      const chatId = isGroup ? body.key.remoteJid : body.key.remoteJid.split('@')[0];\r\n      this.logger.verbose(`Chat ID: ${chatId}`);\r\n\r\n      let nameContact: string;\r\n\r\n      nameContact = !body.key.fromMe ? body.pushName : chatId;\r\n      this.logger.verbose(`Name contact: ${nameContact}`);\r\n\r\n      const filterInbox = await this.getInbox(instance);\r\n\r\n      if (!filterInbox) {\r\n        this.logger.warn(`Inbox not found for instance: ${JSON.stringify(instance)}`);\r\n        return null;\r\n      }\r\n\r\n      if (isGroup) {\r\n        this.logger.verbose('Processing group conversation');\r\n        const group = await this.waMonitor.waInstances[instance.instanceName].client.groupMetadata(chatId);\r\n        this.logger.verbose(`Group metadata: ${JSON.stringify(group)}`);\r\n\r\n        nameContact = `${group.subject} (GROUP)`;\r\n\r\n        const picture_url = await this.waMonitor.waInstances[instance.instanceName].profilePicture(\r\n          body.key.participant.split('@')[0],\r\n        );\r\n        this.logger.verbose(`Participant profile picture URL: ${JSON.stringify(picture_url)}`);\r\n\r\n        const findParticipant = await this.findContact(instance, body.key.participant.split('@')[0]);\r\n        this.logger.verbose(`Found participant: ${JSON.stringify(findParticipant)}`);\r\n\r\n        if (findParticipant) {\r\n          if (!findParticipant.name || findParticipant.name === chatId) {\r\n            await this.updateContact(instance, findParticipant.id, {\r\n              name: body.pushName,\r\n              avatar_url: picture_url.profilePictureUrl || null,\r\n            });\r\n          }\r\n        } else {\r\n          await this.createContact(\r\n            instance,\r\n            body.key.participant.split('@')[0],\r\n            filterInbox.id,\r\n            false,\r\n            body.pushName,\r\n            picture_url.profilePictureUrl || null,\r\n            body.key.participant,\r\n          );\r\n        }\r\n      }\r\n\r\n      const picture_url = await this.waMonitor.waInstances[instance.instanceName].profilePicture(chatId);\r\n      this.logger.verbose(`Contact profile picture URL: ${JSON.stringify(picture_url)}`);\r\n\r\n      let contact = await this.findContact(instance, chatId);\r\n      this.logger.verbose(`Found contact: ${JSON.stringify(contact)}`);\r\n\r\n      if (contact) {\r\n        if (!body.key.fromMe) {\r\n          const waProfilePictureFile =\r\n            picture_url?.profilePictureUrl?.split('#')[0].split('?')[0].split('/').pop() || '';\r\n          const chatwootProfilePictureFile = contact?.thumbnail?.split('#')[0].split('?')[0].split('/').pop() || '';\r\n          const pictureNeedsUpdate = waProfilePictureFile !== chatwootProfilePictureFile;\r\n          const nameNeedsUpdate =\r\n            !contact.name ||\r\n            contact.name === chatId ||\r\n            (`+${chatId}`.startsWith('+55')\r\n              ? this.getNumbers(`+${chatId}`).some(\r\n                  (v) => contact.name === v || contact.name === v.substring(3) || contact.name === v.substring(1),\r\n                )\r\n              : false);\r\n\r\n          this.logger.verbose(`Picture needs update: ${pictureNeedsUpdate}`);\r\n          this.logger.verbose(`Name needs update: ${nameNeedsUpdate}`);\r\n\r\n          if (pictureNeedsUpdate || nameNeedsUpdate) {\r\n            contact = await this.updateContact(instance, contact.id, {\r\n              ...(nameNeedsUpdate && { name: nameContact }),\r\n              ...(waProfilePictureFile === '' && { avatar: null }),\r\n              ...(pictureNeedsUpdate && { avatar_url: picture_url?.profilePictureUrl }),\r\n            });\r\n          }\r\n        }\r\n      } else {\r\n        const jid = body.key.remoteJid;\r\n        contact = await this.createContact(\r\n          instance,\r\n          chatId,\r\n          filterInbox.id,\r\n          isGroup,\r\n          nameContact,\r\n          picture_url.profilePictureUrl || null,\r\n          jid,\r\n        );\r\n      }\r\n\r\n      if (!contact) {\r\n        this.logger.warn('Contact not created or found');\r\n        return null;\r\n      }\r\n\r\n      const contactId = contact?.payload?.id || contact?.payload?.contact?.id || contact?.id;\r\n      this.logger.verbose(`Contact ID: ${contactId}`);\r\n\r\n      const contactConversations = (await client.contacts.listConversations({\r\n        accountId: this.provider.accountId,\r\n        id: contactId,\r\n      })) as any;\r\n      this.logger.verbose(`Contact conversations: ${JSON.stringify(contactConversations)}`);\r\n\r\n      if (!contactConversations || !contactConversations.payload) {\r\n        this.logger.error('No conversations found or payload is undefined');\r\n        return null;\r\n      }\r\n\r\n      if (contactConversations.payload.length) {\r\n        let conversation: any;\r\n        if (this.provider.reopenConversation) {\r\n          conversation = contactConversations.payload.find((conversation) => conversation.inbox_id == filterInbox.id);\r\n          this.logger.verbose(`Found conversation in reopenConversation mode: ${JSON.stringify(conversation)}`);\r\n\r\n          if (this.provider.conversationPending && conversation.status !== 'open') {\r\n            if (conversation) {\r\n              await client.conversations.toggleStatus({\r\n                accountId: this.provider.accountId,\r\n                conversationId: conversation.id,\r\n                data: {\r\n                  status: 'pending',\r\n                },\r\n              });\r\n            }\r\n          }\r\n        } else {\r\n          conversation = contactConversations.payload.find(\r\n            (conversation) => conversation.status !== 'resolved' && conversation.inbox_id == filterInbox.id,\r\n          );\r\n          this.logger.verbose(`Found conversation: ${JSON.stringify(conversation)}`);\r\n        }\r\n\r\n        if (conversation) {\r\n          this.logger.verbose(`Returning existing conversation ID: ${conversation.id}`);\r\n          this.cache.set(cacheKey, conversation.id);\r\n          return conversation.id;\r\n        }\r\n      }\r\n\r\n      const data = {\r\n        contact_id: contactId.toString(),\r\n        inbox_id: filterInbox.id.toString(),\r\n      };\r\n\r\n      if (this.provider.conversationPending) {\r\n        data['status'] = 'pending';\r\n      }\r\n\r\n      const conversation = await client.conversations.create({\r\n        accountId: this.provider.accountId,\r\n        data,\r\n      });\r\n\r\n      if (!conversation) {\r\n        this.logger.warn('Conversation not created or found');\r\n        return null;\r\n      }\r\n\r\n      this.logger.verbose(`New conversation created with ID: ${conversation.id}`);\r\n      this.cache.set(cacheKey, conversation.id);\r\n      return conversation.id;\r\n    } catch (error) {\r\n      this.logger.error(`Error in createConversation: ${error}`);\r\n    }\r\n  }\r\n\r\n  public async getInbox(instance: InstanceDto): Promise<inbox | null> {\r\n    const cacheKey = `${instance.instanceName}:getInbox`;\r\n    if (await this.cache.has(cacheKey)) {\r\n      return (await this.cache.get(cacheKey)) as inbox;\r\n    }\r\n\r\n    const client = await this.clientCw(instance);\r\n\r\n    if (!client) {\r\n      this.logger.warn('client not found');\r\n      return null;\r\n    }\r\n\r\n    const inbox = (await client.inboxes.list({\r\n      accountId: this.provider.accountId,\r\n    })) as any;\r\n\r\n    if (!inbox) {\r\n      this.logger.warn('inbox not found');\r\n      return null;\r\n    }\r\n\r\n    const findByName = inbox.payload.find((inbox) => inbox.name === this.getClientCwConfig().nameInbox);\r\n\r\n    if (!findByName) {\r\n      this.logger.warn('inbox not found');\r\n      return null;\r\n    }\r\n\r\n    this.cache.set(cacheKey, findByName);\r\n    return findByName;\r\n  }\r\n\r\n  public async createMessage(\r\n    instance: InstanceDto,\r\n    conversationId: number,\r\n    content: string,\r\n    messageType: 'incoming' | 'outgoing' | undefined,\r\n    privateMessage?: boolean,\r\n    attachments?: {\r\n      content: unknown;\r\n      encoding: string;\r\n      filename: string;\r\n    }[],\r\n    messageBody?: any,\r\n    sourceId?: string,\r\n    quotedMsg?: MessageModel,\r\n  ) {\r\n    const client = await this.clientCw(instance);\r\n\r\n    if (!client) {\r\n      this.logger.warn('client not found');\r\n      return null;\r\n    }\r\n\r\n    const replyToIds = await this.getReplyToIds(messageBody, instance);\r\n\r\n    const sourceReplyId = quotedMsg?.chatwootMessageId || null;\r\n\r\n    const message = await client.messages.create({\r\n      accountId: this.provider.accountId,\r\n      conversationId: conversationId,\r\n      data: {\r\n        content: content,\r\n        message_type: messageType,\r\n        attachments: attachments,\r\n        private: privateMessage || false,\r\n        source_id: sourceId,\r\n        content_attributes: {\r\n          ...replyToIds,\r\n        },\r\n        source_reply_id: sourceReplyId ? sourceReplyId.toString() : null,\r\n      },\r\n    });\r\n\r\n    if (!message) {\r\n      this.logger.warn('message not found');\r\n      return null;\r\n    }\r\n\r\n    return message;\r\n  }\r\n\r\n  public async getOpenConversationByContact(\r\n    instance: InstanceDto,\r\n    inbox: inbox,\r\n    contact: generic_id & contact,\r\n  ): Promise<conversation> {\r\n    const client = await this.clientCw(instance);\r\n\r\n    if (!client) {\r\n      this.logger.warn('client not found');\r\n      return null;\r\n    }\r\n\r\n    const conversations = (await client.contacts.listConversations({\r\n      accountId: this.provider.accountId,\r\n      id: contact.id,\r\n    })) as any;\r\n\r\n    return (\r\n      conversations.payload.find(\r\n        (conversation) => conversation.inbox_id === inbox.id && conversation.status === 'open',\r\n      ) || undefined\r\n    );\r\n  }\r\n\r\n  public async createBotMessage(\r\n    instance: InstanceDto,\r\n    content: string,\r\n    messageType: 'incoming' | 'outgoing' | undefined,\r\n    attachments?: {\r\n      content: unknown;\r\n      encoding: string;\r\n      filename: string;\r\n    }[],\r\n  ) {\r\n    const client = await this.clientCw(instance);\r\n\r\n    if (!client) {\r\n      this.logger.warn('client not found');\r\n      return null;\r\n    }\r\n\r\n    const contact = await this.findContact(instance, '123456');\r\n\r\n    if (!contact) {\r\n      this.logger.warn('contact not found');\r\n      return null;\r\n    }\r\n\r\n    const filterInbox = await this.getInbox(instance);\r\n\r\n    if (!filterInbox) {\r\n      this.logger.warn('inbox not found');\r\n      return null;\r\n    }\r\n\r\n    const conversation = await this.getOpenConversationByContact(instance, filterInbox, contact);\r\n\r\n    if (!conversation) {\r\n      this.logger.warn('conversation not found');\r\n      return;\r\n    }\r\n\r\n    const message = await client.messages.create({\r\n      accountId: this.provider.accountId,\r\n      conversationId: conversation.id,\r\n      data: {\r\n        content: content,\r\n        message_type: messageType,\r\n        attachments: attachments,\r\n      },\r\n    });\r\n\r\n    if (!message) {\r\n      this.logger.warn('message not found');\r\n      return null;\r\n    }\r\n\r\n    return message;\r\n  }\r\n\r\n  private async sendData(\r\n    conversationId: number,\r\n    fileStream: Readable,\r\n    fileName: string,\r\n    messageType: 'incoming' | 'outgoing' | undefined,\r\n    content?: string,\r\n    instance?: InstanceDto,\r\n    messageBody?: any,\r\n    sourceId?: string,\r\n    quotedMsg?: MessageModel,\r\n  ) {\r\n    if (sourceId && this.isImportHistoryAvailable()) {\r\n      const messageAlreadySaved = await chatwootImport.getExistingSourceIds([sourceId]);\r\n      if (messageAlreadySaved) {\r\n        if (messageAlreadySaved.size > 0) {\r\n          this.logger.warn('Message already saved on chatwoot');\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    const data = new FormData();\r\n\r\n    if (content) {\r\n      data.append('content', content);\r\n    }\r\n\r\n    data.append('message_type', messageType);\r\n\r\n    data.append('attachments[]', fileStream, { filename: fileName });\r\n\r\n    const sourceReplyId = quotedMsg?.chatwootMessageId || null;\r\n\r\n    if (messageBody && instance) {\r\n      const replyToIds = await this.getReplyToIds(messageBody, instance);\r\n\r\n      if (replyToIds.in_reply_to || replyToIds.in_reply_to_external_id) {\r\n        const content = JSON.stringify({\r\n          ...replyToIds,\r\n        });\r\n        data.append('content_attributes', content);\r\n      }\r\n    }\r\n\r\n    if (sourceReplyId) {\r\n      data.append('source_reply_id', sourceReplyId.toString());\r\n    }\r\n\r\n    if (sourceId) {\r\n      data.append('source_id', sourceId);\r\n    }\r\n\r\n    const config = {\r\n      method: 'post',\r\n      maxBodyLength: Infinity,\r\n      url: `${this.provider.url}/api/v1/accounts/${this.provider.accountId}/conversations/${conversationId}/messages`,\r\n      headers: {\r\n        api_access_token: this.provider.token,\r\n        ...data.getHeaders(),\r\n      },\r\n      data: data,\r\n    };\r\n\r\n    try {\r\n      const { data } = await axios.request(config);\r\n\r\n      return data;\r\n    } catch (error) {\r\n      this.logger.error(error);\r\n    }\r\n  }\r\n\r\n  public async createBotQr(\r\n    instance: InstanceDto,\r\n    content: string,\r\n    messageType: 'incoming' | 'outgoing' | undefined,\r\n    fileStream?: Readable,\r\n    fileName?: string,\r\n  ) {\r\n    const client = await this.clientCw(instance);\r\n\r\n    if (!client) {\r\n      this.logger.warn('client not found');\r\n      return null;\r\n    }\r\n\r\n    if (!this.configService.get<Chatwoot>('CHATWOOT').BOT_CONTACT) {\r\n      this.logger.log('Chatwoot bot contact is disabled');\r\n\r\n      return true;\r\n    }\r\n\r\n    const contact = await this.findContact(instance, '123456');\r\n\r\n    if (!contact) {\r\n      this.logger.warn('contact not found');\r\n      return null;\r\n    }\r\n\r\n    const filterInbox = await this.getInbox(instance);\r\n\r\n    if (!filterInbox) {\r\n      this.logger.warn('inbox not found');\r\n      return null;\r\n    }\r\n\r\n    const conversation = await this.getOpenConversationByContact(instance, filterInbox, contact);\r\n\r\n    if (!conversation) {\r\n      this.logger.warn('conversation not found');\r\n      return;\r\n    }\r\n\r\n    const data = new FormData();\r\n\r\n    if (content) {\r\n      data.append('content', content);\r\n    }\r\n\r\n    data.append('message_type', messageType);\r\n\r\n    if (fileStream && fileName) {\r\n      data.append('attachments[]', fileStream, { filename: fileName });\r\n    }\r\n\r\n    const config = {\r\n      method: 'post',\r\n      maxBodyLength: Infinity,\r\n      url: `${this.provider.url}/api/v1/accounts/${this.provider.accountId}/conversations/${conversation.id}/messages`,\r\n      headers: {\r\n        api_access_token: this.provider.token,\r\n        ...data.getHeaders(),\r\n      },\r\n      data: data,\r\n    };\r\n\r\n    try {\r\n      const { data } = await axios.request(config);\r\n\r\n      return data;\r\n    } catch (error) {\r\n      this.logger.error(error);\r\n    }\r\n  }\r\n\r\n  public async sendAttachment(waInstance: any, number: string, media: any, caption?: string, options?: Options) {\r\n    try {\r\n      const parsedMedia = path.parse(decodeURIComponent(media));\r\n      let mimeType = mimeTypes.lookup(parsedMedia?.ext) || '';\r\n      let fileName = parsedMedia?.name + parsedMedia?.ext;\r\n\r\n      if (!mimeType) {\r\n        const parts = media.split('/');\r\n        fileName = decodeURIComponent(parts[parts.length - 1]);\r\n\r\n        const response = await axios.get(media, {\r\n          responseType: 'arraybuffer',\r\n        });\r\n        mimeType = response.headers['content-type'];\r\n      }\r\n\r\n      let type = 'document';\r\n\r\n      switch (mimeType.split('/')[0]) {\r\n        case 'image':\r\n          type = 'image';\r\n          break;\r\n        case 'video':\r\n          type = 'video';\r\n          break;\r\n        case 'audio':\r\n          type = 'audio';\r\n          break;\r\n        default:\r\n          type = 'document';\r\n          break;\r\n      }\r\n\r\n      if (type === 'audio') {\r\n        const data: SendAudioDto = {\r\n          number: number,\r\n          audio: media,\r\n          delay: 1200,\r\n          quoted: options?.quoted,\r\n        };\r\n\r\n        sendTelemetry('/message/sendWhatsAppAudio');\r\n\r\n        const messageSent = await waInstance?.audioWhatsapp(data, true);\r\n\r\n        return messageSent;\r\n      }\r\n\r\n      if (type === 'image' && parsedMedia && parsedMedia?.ext === '.gif') {\r\n        type = 'document';\r\n      }\r\n\r\n      const data: SendMediaDto = {\r\n        number: number,\r\n        mediatype: type as any,\r\n        fileName: fileName,\r\n        media: media,\r\n        delay: 1200,\r\n        quoted: options?.quoted,\r\n      };\r\n\r\n      sendTelemetry('/message/sendMedia');\r\n\r\n      if (caption) {\r\n        data.caption = caption;\r\n      }\r\n\r\n      const messageSent = await waInstance?.mediaMessage(data, null, true);\r\n\r\n      return messageSent;\r\n    } catch (error) {\r\n      this.logger.error(error);\r\n    }\r\n  }\r\n\r\n  public async onSendMessageError(instance: InstanceDto, conversation: number, error?: any) {\r\n    this.logger.verbose(`onSendMessageError ${JSON.stringify(error)}`);\r\n\r\n    const client = await this.clientCw(instance);\r\n\r\n    if (!client) {\r\n      return;\r\n    }\r\n\r\n    if (error && error?.status === 400 && error?.message[0]?.exists === false) {\r\n      client.messages.create({\r\n        accountId: this.provider.accountId,\r\n        conversationId: conversation,\r\n        data: {\r\n          content: `${i18next.t('cw.message.numbernotinwhatsapp')}`,\r\n          message_type: 'outgoing',\r\n          private: true,\r\n        },\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    client.messages.create({\r\n      accountId: this.provider.accountId,\r\n      conversationId: conversation,\r\n      data: {\r\n        content: i18next.t('cw.message.notsent', {\r\n          error: error ? `_${error.toString()}_` : '',\r\n        }),\r\n        message_type: 'outgoing',\r\n        private: true,\r\n      },\r\n    });\r\n  }\r\n\r\n  public async receiveWebhook(instance: InstanceDto, body: any) {\r\n    try {\r\n      await new Promise((resolve) => setTimeout(resolve, 500));\r\n\r\n      const client = await this.clientCw(instance);\r\n\r\n      if (!client) {\r\n        this.logger.warn('client not found');\r\n        return null;\r\n      }\r\n\r\n      if (\r\n        this.provider.reopenConversation === false &&\r\n        body.event === 'conversation_status_changed' &&\r\n        body.status === 'resolved' &&\r\n        body.meta?.sender?.identifier\r\n      ) {\r\n        const keyToDelete = `${instance.instanceName}:createConversation-${body.meta.sender.identifier}`;\r\n        this.cache.delete(keyToDelete);\r\n      }\r\n\r\n      if (\r\n        !body?.conversation ||\r\n        body.private ||\r\n        (body.event === 'message_updated' && !body.content_attributes?.deleted)\r\n      ) {\r\n        return { message: 'bot' };\r\n      }\r\n\r\n      const chatId =\r\n        body.conversation.meta.sender?.identifier || body.conversation.meta.sender?.phone_number.replace('+', '');\r\n      // Chatwoot to Whatsapp\r\n      const messageReceived = body.content\r\n        ? body.content\r\n            .replaceAll(/(?<!\\*)\\*((?!\\s)([^\\n*]+?)(?<!\\s))\\*(?!\\*)/g, '_$1_') // Substitui * por _\r\n            .replaceAll(/\\*{2}((?!\\s)([^\\n*]+?)(?<!\\s))\\*{2}/g, '*$1*') // Substitui ** por *\r\n            .replaceAll(/~{2}((?!\\s)([^\\n*]+?)(?<!\\s))~{2}/g, '~$1~') // Substitui ~~ por ~\r\n            .replaceAll(/(?<!`)`((?!\\s)([^`*]+?)(?<!\\s))`(?!`)/g, '```$1```') // Substitui ` por ```\r\n        : body.content;\r\n\r\n      const senderName = body?.conversation?.messages[0]?.sender?.available_name || body?.sender?.name;\r\n      const waInstance = this.waMonitor.waInstances[instance.instanceName];\r\n\r\n      if (body.event === 'message_updated' && body.content_attributes?.deleted) {\r\n        const message = await this.prismaRepository.message.findFirst({\r\n          where: {\r\n            chatwootMessageId: body.id,\r\n            instanceId: instance.instanceId,\r\n          },\r\n        });\r\n\r\n        if (message) {\r\n          const key = message.key as {\r\n            id: string;\r\n            remoteJid: string;\r\n            fromMe: boolean;\r\n            participant: string;\r\n          };\r\n\r\n          await waInstance?.client.sendMessage(key.remoteJid, { delete: key });\r\n\r\n          await this.prismaRepository.message.deleteMany({\r\n            where: {\r\n              instanceId: instance.instanceId,\r\n              chatwootMessageId: body.id,\r\n            },\r\n          });\r\n        }\r\n        return { message: 'bot' };\r\n      }\r\n\r\n      const cwBotContact = this.configService.get<Chatwoot>('CHATWOOT').BOT_CONTACT;\r\n\r\n      if (chatId === '123456' && body.message_type === 'outgoing') {\r\n        const command = messageReceived.replace('/', '');\r\n\r\n        if (cwBotContact && (command.includes('init') || command.includes('iniciar'))) {\r\n          const state = waInstance?.connectionStatus?.state;\r\n\r\n          if (state !== 'open') {\r\n            const number = command.split(':')[1];\r\n            await waInstance.connectToWhatsapp(number);\r\n          } else {\r\n            await this.createBotMessage(\r\n              instance,\r\n              i18next.t('cw.inbox.alreadyConnected', {\r\n                inboxName: body.inbox.name,\r\n              }),\r\n              'incoming',\r\n            );\r\n          }\r\n        }\r\n\r\n        if (command === 'clearcache') {\r\n          waInstance.clearCacheChatwoot();\r\n          await this.createBotMessage(\r\n            instance,\r\n            i18next.t('cw.inbox.clearCache', {\r\n              inboxName: body.inbox.name,\r\n            }),\r\n            'incoming',\r\n          );\r\n        }\r\n\r\n        if (command === 'status') {\r\n          const state = waInstance?.connectionStatus?.state;\r\n\r\n          if (!state) {\r\n            await this.createBotMessage(\r\n              instance,\r\n              i18next.t('cw.inbox.notFound', {\r\n                inboxName: body.inbox.name,\r\n              }),\r\n              'incoming',\r\n            );\r\n          }\r\n\r\n          if (state) {\r\n            await this.createBotMessage(\r\n              instance,\r\n              i18next.t('cw.inbox.status', {\r\n                inboxName: body.inbox.name,\r\n                state: state,\r\n              }),\r\n              'incoming',\r\n            );\r\n          }\r\n        }\r\n\r\n        if (cwBotContact && (command === 'disconnect' || command === 'desconectar')) {\r\n          const msgLogout = i18next.t('cw.inbox.disconnect', {\r\n            inboxName: body.inbox.name,\r\n          });\r\n\r\n          await this.createBotMessage(instance, msgLogout, 'incoming');\r\n\r\n          await waInstance?.client?.logout('Log out instance: ' + instance.instanceName);\r\n          await waInstance?.client?.ws?.close();\r\n        }\r\n      }\r\n\r\n      if (body.message_type === 'outgoing' && body?.conversation?.messages?.length && chatId !== '123456') {\r\n        if (body?.conversation?.messages[0]?.source_id?.substring(0, 5) === 'WAID:') {\r\n          return { message: 'bot' };\r\n        }\r\n\r\n        if (!waInstance && body.conversation?.id) {\r\n          this.onSendMessageError(instance, body.conversation?.id, 'Instance not found');\r\n          return { message: 'bot' };\r\n        }\r\n\r\n        let formatText: string;\r\n        if (senderName === null || senderName === undefined) {\r\n          formatText = messageReceived;\r\n        } else {\r\n          const formattedDelimiter = this.provider.signDelimiter\r\n            ? this.provider.signDelimiter.replaceAll('\\\\n', '\\n')\r\n            : '\\n';\r\n          const textToConcat = this.provider.signMsg ? [`*${senderName}:*`] : [];\r\n          textToConcat.push(messageReceived);\r\n\r\n          formatText = textToConcat.join(formattedDelimiter);\r\n        }\r\n\r\n        for (const message of body.conversation.messages) {\r\n          if (message.attachments && message.attachments.length > 0) {\r\n            for (const attachment of message.attachments) {\r\n              if (!messageReceived) {\r\n                formatText = null;\r\n              }\r\n\r\n              const options: Options = {\r\n                quoted: await this.getQuotedMessage(body, instance),\r\n              };\r\n\r\n              const messageSent = await this.sendAttachment(\r\n                waInstance,\r\n                chatId,\r\n                attachment.data_url,\r\n                formatText,\r\n                options,\r\n              );\r\n              if (!messageSent && body.conversation?.id) {\r\n                this.onSendMessageError(instance, body.conversation?.id);\r\n              }\r\n\r\n              await this.updateChatwootMessageId(\r\n                {\r\n                  ...messageSent,\r\n                  owner: instance.instanceName,\r\n                },\r\n                {\r\n                  messageId: body.id,\r\n                  inboxId: body.inbox?.id,\r\n                  conversationId: body.conversation?.id,\r\n                  contactInboxSourceId: body.conversation?.contact_inbox?.source_id,\r\n                },\r\n                instance,\r\n              );\r\n            }\r\n          } else {\r\n            const data: SendTextDto = {\r\n              number: chatId,\r\n              text: formatText,\r\n              delay: 1200,\r\n              quoted: await this.getQuotedMessage(body, instance),\r\n            };\r\n\r\n            sendTelemetry('/message/sendText');\r\n\r\n            let messageSent: any;\r\n            try {\r\n              messageSent = await waInstance?.textMessage(data, true);\r\n              if (!messageSent) {\r\n                throw new Error('Message not sent');\r\n              }\r\n\r\n              if (Long.isLong(messageSent?.messageTimestamp)) {\r\n                messageSent.messageTimestamp = messageSent.messageTimestamp?.toNumber();\r\n              }\r\n\r\n              await this.updateChatwootMessageId(\r\n                {\r\n                  ...messageSent,\r\n                  instanceId: instance.instanceId,\r\n                },\r\n                {\r\n                  messageId: body.id,\r\n                  inboxId: body.inbox?.id,\r\n                  conversationId: body.conversation?.id,\r\n                  contactInboxSourceId: body.conversation?.contact_inbox?.source_id,\r\n                },\r\n                instance,\r\n              );\r\n            } catch (error) {\r\n              if (!messageSent && body.conversation?.id) {\r\n                this.onSendMessageError(instance, body.conversation?.id, error);\r\n              }\r\n              throw error;\r\n            }\r\n          }\r\n        }\r\n\r\n        const chatwootRead = this.configService.get<Chatwoot>('CHATWOOT').MESSAGE_READ;\r\n        if (chatwootRead) {\r\n          const lastMessage = await this.prismaRepository.message.findFirst({\r\n            where: {\r\n              key: {\r\n                path: ['fromMe'],\r\n                equals: false,\r\n              },\r\n              instanceId: instance.instanceId,\r\n            },\r\n          });\r\n          if (lastMessage && !lastMessage.chatwootIsRead) {\r\n            const key = lastMessage.key as {\r\n              id: string;\r\n              fromMe: boolean;\r\n              remoteJid: string;\r\n              participant?: string;\r\n            };\r\n\r\n            waInstance?.markMessageAsRead({\r\n              readMessages: [\r\n                {\r\n                  id: key.id,\r\n                  fromMe: key.fromMe,\r\n                  remoteJid: key.remoteJid,\r\n                },\r\n              ],\r\n            });\r\n            const updateMessage = {\r\n              chatwootMessageId: lastMessage.chatwootMessageId,\r\n              chatwootConversationId: lastMessage.chatwootConversationId,\r\n              chatwootInboxId: lastMessage.chatwootInboxId,\r\n              chatwootContactInboxSourceId: lastMessage.chatwootContactInboxSourceId,\r\n              chatwootIsRead: true,\r\n            };\r\n\r\n            await this.prismaRepository.message.updateMany({\r\n              where: {\r\n                instanceId: instance.instanceId,\r\n                key: {\r\n                  path: ['id'],\r\n                  equals: key.id,\r\n                },\r\n              },\r\n              data: updateMessage,\r\n            });\r\n          }\r\n        }\r\n      }\r\n\r\n      if (body.message_type === 'template' && body.event === 'message_created') {\r\n        const data: SendTextDto = {\r\n          number: chatId,\r\n          text: body.content.replace(/\\\\\\r\\n|\\\\\\n|\\n/g, '\\n'),\r\n          delay: 1200,\r\n        };\r\n\r\n        sendTelemetry('/message/sendText');\r\n\r\n        await waInstance?.textMessage(data);\r\n      }\r\n\r\n      return { message: 'bot' };\r\n    } catch (error) {\r\n      this.logger.error(error);\r\n\r\n      return { message: 'bot' };\r\n    }\r\n  }\r\n\r\n  private async updateChatwootMessageId(\r\n    message: MessageModel,\r\n    chatwootMessageIds: ChatwootMessage,\r\n    instance: InstanceDto,\r\n  ) {\r\n    const key = message.key as {\r\n      id: string;\r\n      fromMe: boolean;\r\n      remoteJid: string;\r\n      participant?: string;\r\n    };\r\n\r\n    if (!chatwootMessageIds.messageId || !key?.id) {\r\n      return;\r\n    }\r\n\r\n    await this.prismaRepository.message.updateMany({\r\n      where: {\r\n        key: {\r\n          path: ['id'],\r\n          equals: key.id,\r\n        },\r\n        instanceId: instance.instanceId,\r\n      },\r\n      data: {\r\n        chatwootMessageId: chatwootMessageIds.messageId,\r\n        chatwootConversationId: chatwootMessageIds.conversationId,\r\n        chatwootInboxId: chatwootMessageIds.inboxId,\r\n        chatwootContactInboxSourceId: chatwootMessageIds.contactInboxSourceId,\r\n        chatwootIsRead: chatwootMessageIds.isRead,\r\n      },\r\n    });\r\n\r\n    if (this.isImportHistoryAvailable()) {\r\n      chatwootImport.updateMessageSourceID(chatwootMessageIds.messageId, key.id);\r\n    }\r\n  }\r\n\r\n  private async getMessageByKeyId(instance: InstanceDto, keyId: string): Promise<MessageModel> {\r\n    const messages = await this.prismaRepository.message.findFirst({\r\n      where: {\r\n        key: {\r\n          path: ['id'],\r\n          equals: keyId,\r\n        },\r\n        instanceId: instance.instanceId,\r\n      },\r\n    });\r\n\r\n    return messages || null;\r\n  }\r\n\r\n  private async getReplyToIds(\r\n    msg: any,\r\n    instance: InstanceDto,\r\n  ): Promise<{ in_reply_to: string; in_reply_to_external_id: string }> {\r\n    let inReplyTo = null;\r\n    let inReplyToExternalId = null;\r\n\r\n    if (msg) {\r\n      inReplyToExternalId = msg.message?.extendedTextMessage?.contextInfo?.stanzaId ?? msg.contextInfo?.stanzaId;\r\n      if (inReplyToExternalId) {\r\n        const message = await this.getMessageByKeyId(instance, inReplyToExternalId);\r\n        if (message?.chatwootMessageId) {\r\n          inReplyTo = message.chatwootMessageId;\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      in_reply_to: inReplyTo,\r\n      in_reply_to_external_id: inReplyToExternalId,\r\n    };\r\n  }\r\n\r\n  private async getQuotedMessage(msg: any, instance: InstanceDto): Promise<Quoted> {\r\n    if (msg?.content_attributes?.in_reply_to) {\r\n      const message = await this.prismaRepository.message.findFirst({\r\n        where: {\r\n          chatwootMessageId: msg?.content_attributes?.in_reply_to,\r\n          instanceId: instance.instanceId,\r\n        },\r\n      });\r\n\r\n      const key = message?.key as {\r\n        id: string;\r\n        fromMe: boolean;\r\n        remoteJid: string;\r\n        participant?: string;\r\n      };\r\n\r\n      if (message && key?.id) {\r\n        return {\r\n          key: message.key as proto.IMessageKey,\r\n          message: message.message as proto.IMessage,\r\n        };\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  private isMediaMessage(message: any) {\r\n    const media = [\r\n      'imageMessage',\r\n      'documentMessage',\r\n      'documentWithCaptionMessage',\r\n      'audioMessage',\r\n      'videoMessage',\r\n      'stickerMessage',\r\n      'viewOnceMessageV2',\r\n    ];\r\n\r\n    const messageKeys = Object.keys(message);\r\n\r\n    const result = messageKeys.some((key) => media.includes(key));\r\n\r\n    return result;\r\n  }\r\n\r\n  private getAdsMessage(msg: any) {\r\n    interface AdsMessage {\r\n      title: string;\r\n      body: string;\r\n      thumbnailUrl: string;\r\n      sourceUrl: string;\r\n    }\r\n\r\n    const adsMessage: AdsMessage | undefined = {\r\n      title: msg.extendedTextMessage?.contextInfo?.externalAdReply?.title || msg.contextInfo?.externalAdReply?.title,\r\n      body: msg.extendedTextMessage?.contextInfo?.externalAdReply?.body || msg.contextInfo?.externalAdReply?.body,\r\n      thumbnailUrl:\r\n        msg.extendedTextMessage?.contextInfo?.externalAdReply?.thumbnailUrl ||\r\n        msg.contextInfo?.externalAdReply?.thumbnailUrl,\r\n      sourceUrl:\r\n        msg.extendedTextMessage?.contextInfo?.externalAdReply?.sourceUrl || msg.contextInfo?.externalAdReply?.sourceUrl,\r\n    };\r\n\r\n    return adsMessage;\r\n  }\r\n\r\n  private getReactionMessage(msg: any) {\r\n    interface ReactionMessage {\r\n      key: {\r\n        id: string;\r\n        fromMe: boolean;\r\n        remoteJid: string;\r\n        participant?: string;\r\n      };\r\n      text: string;\r\n    }\r\n    const reactionMessage: ReactionMessage | undefined = msg?.reactionMessage;\r\n\r\n    return reactionMessage;\r\n  }\r\n\r\n  private getTypeMessage(msg: any) {\r\n    const types = {\r\n      conversation: msg.conversation,\r\n      imageMessage: msg.imageMessage?.caption,\r\n      videoMessage: msg.videoMessage?.caption,\r\n      extendedTextMessage: msg.extendedTextMessage?.text,\r\n      messageContextInfo: msg.messageContextInfo?.stanzaId,\r\n      stickerMessage: undefined,\r\n      documentMessage: msg.documentMessage?.caption,\r\n      documentWithCaptionMessage: msg.documentWithCaptionMessage?.message?.documentMessage?.caption,\r\n      audioMessage: msg.audioMessage?.caption,\r\n      contactMessage: msg.contactMessage?.vcard,\r\n      contactsArrayMessage: msg.contactsArrayMessage,\r\n      locationMessage: msg.locationMessage,\r\n      liveLocationMessage: msg.liveLocationMessage,\r\n      listMessage: msg.listMessage,\r\n      listResponseMessage: msg.listResponseMessage,\r\n      viewOnceMessageV2:\r\n        msg?.message?.viewOnceMessageV2?.message?.imageMessage?.url ||\r\n        msg?.message?.viewOnceMessageV2?.message?.videoMessage?.url ||\r\n        msg?.message?.viewOnceMessageV2?.message?.audioMessage?.url,\r\n    };\r\n\r\n    return types;\r\n  }\r\n\r\n  private getMessageContent(types: any) {\r\n    const typeKey = Object.keys(types).find((key) => types[key] !== undefined);\r\n\r\n    let result = typeKey ? types[typeKey] : undefined;\r\n\r\n    // Remove externalAdReplyBody| in Chatwoot (Already Have)\r\n    if (result && typeof result === 'string' && result.includes('externalAdReplyBody|')) {\r\n      result = result.split('externalAdReplyBody|').filter(Boolean).join('');\r\n    }\r\n\r\n    if (typeKey === 'locationMessage' || typeKey === 'liveLocationMessage') {\r\n      const latitude = result.degreesLatitude;\r\n      const longitude = result.degreesLongitude;\r\n\r\n      const locationName = result?.name;\r\n      const locationAddress = result?.address;\r\n\r\n      const formattedLocation =\r\n        `*${i18next.t('cw.locationMessage.location')}:*\\n\\n` +\r\n        `_${i18next.t('cw.locationMessage.latitude')}:_ ${latitude} \\n` +\r\n        `_${i18next.t('cw.locationMessage.longitude')}:_ ${longitude} \\n` +\r\n        (locationName ? `_${i18next.t('cw.locationMessage.locationName')}:_ ${locationName}\\n` : '') +\r\n        (locationAddress ? `_${i18next.t('cw.locationMessage.locationAddress')}:_ ${locationAddress} \\n` : '') +\r\n        `_${i18next.t('cw.locationMessage.locationUrl')}:_ ` +\r\n        `https://www.google.com/maps/search/?api=1&query=${latitude},${longitude}`;\r\n\r\n      return formattedLocation;\r\n    }\r\n\r\n    if (typeKey === 'contactMessage') {\r\n      const vCardData = result.split('\\n');\r\n      const contactInfo = {};\r\n\r\n      vCardData.forEach((line) => {\r\n        const [key, value] = line.split(':');\r\n        if (key && value) {\r\n          contactInfo[key] = value;\r\n        }\r\n      });\r\n\r\n      let formattedContact =\r\n        `*${i18next.t('cw.contactMessage.contact')}:*\\n\\n` +\r\n        `_${i18next.t('cw.contactMessage.name')}:_ ${contactInfo['FN']}`;\r\n\r\n      let numberCount = 1;\r\n      Object.keys(contactInfo).forEach((key) => {\r\n        if (key.startsWith('item') && key.includes('TEL')) {\r\n          const phoneNumber = contactInfo[key];\r\n          formattedContact += `\\n_${i18next.t('cw.contactMessage.number')} (${numberCount}):_ ${phoneNumber}`;\r\n          numberCount++;\r\n        } else if (key.includes('TEL')) {\r\n          const phoneNumber = contactInfo[key];\r\n          formattedContact += `\\n_${i18next.t('cw.contactMessage.number')} (${numberCount}):_ ${phoneNumber}`;\r\n          numberCount++;\r\n        }\r\n      });\r\n\r\n      return formattedContact;\r\n    }\r\n\r\n    if (typeKey === 'contactsArrayMessage') {\r\n      const formattedContacts = result.contacts.map((contact) => {\r\n        const vCardData = contact.vcard.split('\\n');\r\n        const contactInfo = {};\r\n\r\n        vCardData.forEach((line) => {\r\n          const [key, value] = line.split(':');\r\n          if (key && value) {\r\n            contactInfo[key] = value;\r\n          }\r\n        });\r\n\r\n        let formattedContact = `*${i18next.t('cw.contactMessage.contact')}:*\\n\\n_${i18next.t(\r\n          'cw.contactMessage.name',\r\n        )}:_ ${contact.displayName}`;\r\n\r\n        let numberCount = 1;\r\n        Object.keys(contactInfo).forEach((key) => {\r\n          if (key.startsWith('item') && key.includes('TEL')) {\r\n            const phoneNumber = contactInfo[key];\r\n            formattedContact += `\\n_${i18next.t('cw.contactMessage.number')} (${numberCount}):_ ${phoneNumber}`;\r\n            numberCount++;\r\n          } else if (key.includes('TEL')) {\r\n            const phoneNumber = contactInfo[key];\r\n            formattedContact += `\\n_${i18next.t('cw.contactMessage.number')} (${numberCount}):_ ${phoneNumber}`;\r\n            numberCount++;\r\n          }\r\n        });\r\n\r\n        return formattedContact;\r\n      });\r\n\r\n      const formattedContactsArray = formattedContacts.join('\\n\\n');\r\n\r\n      return formattedContactsArray;\r\n    }\r\n\r\n    if (typeKey === 'listMessage') {\r\n      const listTitle = result?.title || 'Unknown';\r\n      const listDescription = result?.description || 'Unknown';\r\n      const listFooter = result?.footerText || 'Unknown';\r\n\r\n      let formattedList =\r\n        '*List Menu:*\\n\\n' +\r\n        '_Title_: ' +\r\n        listTitle +\r\n        '\\n' +\r\n        '_Description_: ' +\r\n        listDescription +\r\n        '\\n' +\r\n        '_Footer_: ' +\r\n        listFooter;\r\n\r\n      if (result.sections && result.sections.length > 0) {\r\n        result.sections.forEach((section, sectionIndex) => {\r\n          formattedList += '\\n\\n*Section ' + (sectionIndex + 1) + ':* ' + section.title || 'Unknown\\n';\r\n\r\n          if (section.rows && section.rows.length > 0) {\r\n            section.rows.forEach((row, rowIndex) => {\r\n              formattedList += '\\n*Line ' + (rowIndex + 1) + ':*\\n';\r\n              formattedList += '_▪️ Title:_ ' + (row.title || 'Unknown') + '\\n';\r\n              formattedList += '_▪️ Description:_ ' + (row.description || 'Unknown') + '\\n';\r\n              formattedList += '_▪️ ID:_ ' + (row.rowId || 'Unknown') + '\\n';\r\n            });\r\n          } else {\r\n            formattedList += '\\nNo lines found in this section.\\n';\r\n          }\r\n        });\r\n      } else {\r\n        formattedList += '\\nNo sections found.\\n';\r\n      }\r\n\r\n      return formattedList;\r\n    }\r\n\r\n    if (typeKey === 'listResponseMessage') {\r\n      const responseTitle = result?.title || 'Unknown';\r\n      const responseDescription = result?.description || 'Unknown';\r\n      const responseRowId = result?.singleSelectReply?.selectedRowId || 'Unknown';\r\n\r\n      const formattedResponseList =\r\n        '*List Response:*\\n\\n' +\r\n        '_Title_: ' +\r\n        responseTitle +\r\n        '\\n' +\r\n        '_Description_: ' +\r\n        responseDescription +\r\n        '\\n' +\r\n        '_ID_: ' +\r\n        responseRowId;\r\n      return formattedResponseList;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  public getConversationMessage(msg: any) {\r\n    const types = this.getTypeMessage(msg);\r\n\r\n    const messageContent = this.getMessageContent(types);\r\n\r\n    return messageContent;\r\n  }\r\n\r\n  public async eventWhatsapp(event: string, instance: InstanceDto, body: any) {\r\n    try {\r\n      const waInstance = this.waMonitor.waInstances[instance.instanceName];\r\n\r\n      if (!waInstance) {\r\n        this.logger.warn('wa instance not found');\r\n        return null;\r\n      }\r\n\r\n      const client = await this.clientCw(instance);\r\n\r\n      if (!client) {\r\n        this.logger.warn('client not found');\r\n        return null;\r\n      }\r\n\r\n      if (this.provider?.ignoreJids && this.provider?.ignoreJids.length > 0) {\r\n        const ignoreJids: any = this.provider?.ignoreJids;\r\n\r\n        let ignoreGroups = false;\r\n        let ignoreContacts = false;\r\n\r\n        if (ignoreJids.includes('@g.us')) {\r\n          ignoreGroups = true;\r\n        }\r\n\r\n        if (ignoreJids.includes('@s.whatsapp.net')) {\r\n          ignoreContacts = true;\r\n        }\r\n\r\n        if (ignoreGroups && body?.key?.remoteJid.endsWith('@g.us')) {\r\n          this.logger.warn('Ignoring message from group: ' + body?.key?.remoteJid);\r\n          return;\r\n        }\r\n\r\n        if (ignoreContacts && body?.key?.remoteJid.endsWith('@s.whatsapp.net')) {\r\n          this.logger.warn('Ignoring message from contact: ' + body?.key?.remoteJid);\r\n          return;\r\n        }\r\n\r\n        if (ignoreJids.includes(body?.key?.remoteJid)) {\r\n          this.logger.warn('Ignoring message from jid: ' + body?.key?.remoteJid);\r\n          return;\r\n        }\r\n      }\r\n\r\n      if (event === 'messages.upsert' || event === 'send.message') {\r\n        if (body.key.remoteJid === 'status@broadcast') {\r\n          return;\r\n        }\r\n\r\n        if (body.message?.ephemeralMessage?.message) {\r\n          body.message = {\r\n            ...body.message?.ephemeralMessage?.message,\r\n          };\r\n        }\r\n\r\n        const originalMessage = await this.getConversationMessage(body.message);\r\n        const bodyMessage = originalMessage\r\n          ? originalMessage\r\n              .replaceAll(/\\*((?!\\s)([^\\n*]+?)(?<!\\s))\\*/g, '**$1**')\r\n              .replaceAll(/_((?!\\s)([^\\n_]+?)(?<!\\s))_/g, '*$1*')\r\n              .replaceAll(/~((?!\\s)([^\\n~]+?)(?<!\\s))~/g, '~~$1~~')\r\n          : originalMessage;\r\n\r\n        if (bodyMessage && bodyMessage.includes('Por favor, classifique esta conversa, http')) {\r\n          return;\r\n        }\r\n\r\n        const quotedId = body.contextInfo?.stanzaId || body.message?.contextInfo?.stanzaId;\r\n\r\n        let quotedMsg = null;\r\n\r\n        if (quotedId)\r\n          quotedMsg = await this.prismaRepository.message.findFirst({\r\n            where: {\r\n              key: {\r\n                path: ['id'],\r\n                equals: quotedId,\r\n              },\r\n              chatwootMessageId: {\r\n                not: null,\r\n              },\r\n            },\r\n          });\r\n\r\n        const isMedia = this.isMediaMessage(body.message);\r\n\r\n        const adsMessage = this.getAdsMessage(body);\r\n\r\n        const reactionMessage = this.getReactionMessage(body.message);\r\n\r\n        if (!bodyMessage && !isMedia && !reactionMessage) {\r\n          this.logger.warn('no body message found');\r\n          return;\r\n        }\r\n\r\n        const getConversation = await this.createConversation(instance, body);\r\n\r\n        if (!getConversation) {\r\n          this.logger.warn('conversation not found');\r\n          return;\r\n        }\r\n\r\n        const messageType = body.key.fromMe ? 'outgoing' : 'incoming';\r\n\r\n        if (isMedia) {\r\n          const downloadBase64 = await waInstance?.getBase64FromMediaMessage({\r\n            message: {\r\n              ...body,\r\n            },\r\n          });\r\n\r\n          let nameFile: string;\r\n          const messageBody = body?.message[body?.messageType];\r\n          const originalFilename =\r\n            messageBody?.fileName || messageBody?.filename || messageBody?.message?.documentMessage?.fileName;\r\n          if (originalFilename) {\r\n            const parsedFile = path.parse(originalFilename);\r\n            if (parsedFile.name && parsedFile.ext) {\r\n              nameFile = `${parsedFile.name}-${Math.floor(Math.random() * (99 - 10 + 1) + 10)}${parsedFile.ext}`;\r\n            }\r\n          }\r\n\r\n          if (!nameFile) {\r\n            nameFile = `${Math.random().toString(36).substring(7)}.${mimeTypes.extension(downloadBase64.mimetype) || ''}`;\r\n          }\r\n\r\n          const fileData = Buffer.from(downloadBase64.base64, 'base64');\r\n\r\n          const fileStream = new Readable();\r\n          fileStream._read = () => {};\r\n          fileStream.push(fileData);\r\n          fileStream.push(null);\r\n\r\n          if (body.key.remoteJid.includes('@g.us')) {\r\n            const participantName = body.pushName;\r\n            const rawPhoneNumber = body.key.participant.split('@')[0];\r\n            const phoneMatch = rawPhoneNumber.match(/^(\\d{2})(\\d{2})(\\d{4})(\\d{4})$/);\r\n\r\n            let formattedPhoneNumber: string;\r\n\r\n            if (phoneMatch) {\r\n              formattedPhoneNumber = `+${phoneMatch[1]} (${phoneMatch[2]}) ${phoneMatch[3]}-${phoneMatch[4]}`;\r\n            } else {\r\n              formattedPhoneNumber = `+${rawPhoneNumber}`;\r\n            }\r\n\r\n            let content: string;\r\n\r\n            if (!body.key.fromMe) {\r\n              content = `**${formattedPhoneNumber} - ${participantName}:**\\n\\n${bodyMessage}`;\r\n            } else {\r\n              content = `${bodyMessage}`;\r\n            }\r\n\r\n            const send = await this.sendData(\r\n              getConversation,\r\n              fileStream,\r\n              nameFile,\r\n              messageType,\r\n              content,\r\n              instance,\r\n              body,\r\n              'WAID:' + body.key.id,\r\n              quotedMsg,\r\n            );\r\n\r\n            if (!send) {\r\n              this.logger.warn('message not sent');\r\n              return;\r\n            }\r\n\r\n            return send;\r\n          } else {\r\n            const send = await this.sendData(\r\n              getConversation,\r\n              fileStream,\r\n              nameFile,\r\n              messageType,\r\n              bodyMessage,\r\n              instance,\r\n              body,\r\n              'WAID:' + body.key.id,\r\n              quotedMsg,\r\n            );\r\n\r\n            if (!send) {\r\n              this.logger.warn('message not sent');\r\n              return;\r\n            }\r\n\r\n            return send;\r\n          }\r\n        }\r\n\r\n        if (reactionMessage) {\r\n          if (reactionMessage.text) {\r\n            const send = await this.createMessage(\r\n              instance,\r\n              getConversation,\r\n              reactionMessage.text,\r\n              messageType,\r\n              false,\r\n              [],\r\n              {\r\n                message: { extendedTextMessage: { contextInfo: { stanzaId: reactionMessage.key.id } } },\r\n              },\r\n              'WAID:' + body.key.id,\r\n              quotedMsg,\r\n            );\r\n            if (!send) {\r\n              this.logger.warn('message not sent');\r\n              return;\r\n            }\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        const isAdsMessage = (adsMessage && adsMessage.title) || adsMessage.body || adsMessage.thumbnailUrl;\r\n        if (isAdsMessage) {\r\n          const imgBuffer = await axios.get(adsMessage.thumbnailUrl, { responseType: 'arraybuffer' });\r\n\r\n          const extension = mimeTypes.extension(imgBuffer.headers['content-type']);\r\n          const mimeType = extension && mimeTypes.lookup(extension);\r\n\r\n          if (!mimeType) {\r\n            this.logger.warn('mimetype of Ads message not found');\r\n            return;\r\n          }\r\n\r\n          const random = Math.random().toString(36).substring(7);\r\n          const nameFile = `${random}.${mimeTypes.extension(mimeType)}`;\r\n          const fileData = Buffer.from(imgBuffer.data, 'binary');\r\n\r\n          const img = await Jimp.read(fileData);\r\n          await img.cover(320, 180);\r\n\r\n          const processedBuffer = await img.getBufferAsync(Jimp.MIME_PNG);\r\n\r\n          const fileStream = new Readable();\r\n          fileStream._read = () => {}; // _read is required but you can noop it\r\n          fileStream.push(processedBuffer);\r\n          fileStream.push(null);\r\n\r\n          const truncStr = (str: string, len: number) => {\r\n            if (!str) return '';\r\n\r\n            return str.length > len ? str.substring(0, len) + '...' : str;\r\n          };\r\n\r\n          const title = truncStr(adsMessage.title, 40);\r\n          const description = truncStr(adsMessage?.body, 75);\r\n\r\n          const send = await this.sendData(\r\n            getConversation,\r\n            fileStream,\r\n            nameFile,\r\n            messageType,\r\n            `${bodyMessage}\\n\\n\\n**${title}**\\n${description}\\n${adsMessage.sourceUrl}`,\r\n            instance,\r\n            body,\r\n            'WAID:' + body.key.id,\r\n          );\r\n\r\n          if (!send) {\r\n            this.logger.warn('message not sent');\r\n            return;\r\n          }\r\n\r\n          return send;\r\n        }\r\n\r\n        if (body.key.remoteJid.includes('@g.us')) {\r\n          const participantName = body.pushName;\r\n          const rawPhoneNumber = body.key.participant.split('@')[0];\r\n          const phoneMatch = rawPhoneNumber.match(/^(\\d{2})(\\d{2})(\\d{4})(\\d{4})$/);\r\n\r\n          let formattedPhoneNumber: string;\r\n\r\n          if (phoneMatch) {\r\n            formattedPhoneNumber = `+${phoneMatch[1]} (${phoneMatch[2]}) ${phoneMatch[3]}-${phoneMatch[4]}`;\r\n          } else {\r\n            formattedPhoneNumber = `+${rawPhoneNumber}`;\r\n          }\r\n\r\n          let content: string;\r\n\r\n          if (!body.key.fromMe) {\r\n            content = `**${formattedPhoneNumber} - ${participantName}:**\\n\\n${bodyMessage}`;\r\n          } else {\r\n            content = `${bodyMessage}`;\r\n          }\r\n\r\n          const send = await this.createMessage(\r\n            instance,\r\n            getConversation,\r\n            content,\r\n            messageType,\r\n            false,\r\n            [],\r\n            body,\r\n            'WAID:' + body.key.id,\r\n            quotedMsg,\r\n          );\r\n\r\n          if (!send) {\r\n            this.logger.warn('message not sent');\r\n            return;\r\n          }\r\n\r\n          return send;\r\n        } else {\r\n          const send = await this.createMessage(\r\n            instance,\r\n            getConversation,\r\n            bodyMessage,\r\n            messageType,\r\n            false,\r\n            [],\r\n            body,\r\n            'WAID:' + body.key.id,\r\n            quotedMsg,\r\n          );\r\n\r\n          if (!send) {\r\n            this.logger.warn('message not sent');\r\n            return;\r\n          }\r\n\r\n          return send;\r\n        }\r\n      }\r\n\r\n      if (event === Events.MESSAGES_DELETE) {\r\n        const chatwootDelete = this.configService.get<Chatwoot>('CHATWOOT').MESSAGE_DELETE;\r\n\r\n        if (chatwootDelete === true) {\r\n          if (!body?.key?.id) {\r\n            this.logger.warn('message id not found');\r\n            return;\r\n          }\r\n\r\n          const message = await this.getMessageByKeyId(instance, body.key.id);\r\n\r\n          if (message?.chatwootMessageId && message?.chatwootConversationId) {\r\n            await this.prismaRepository.message.deleteMany({\r\n              where: {\r\n                key: {\r\n                  path: ['id'],\r\n                  equals: body.key.id,\r\n                },\r\n                instanceId: instance.instanceId,\r\n              },\r\n            });\r\n\r\n            return await client.messages.delete({\r\n              accountId: this.provider.accountId,\r\n              conversationId: message.chatwootConversationId,\r\n              messageId: message.chatwootMessageId,\r\n            });\r\n          }\r\n        }\r\n      }\r\n\r\n      if (event === 'messages.edit') {\r\n        const editedText = `${\r\n          body?.editedMessage?.conversation || body?.editedMessage?.extendedTextMessage?.text\r\n        }\\n\\n_\\`${i18next.t('cw.message.edited')}.\\`_`;\r\n        const message = await this.getMessageByKeyId(instance, body?.key?.id);\r\n        const key = message.key as {\r\n          id: string;\r\n          fromMe: boolean;\r\n          remoteJid: string;\r\n          participant?: string;\r\n        };\r\n\r\n        const messageType = key?.fromMe ? 'outgoing' : 'incoming';\r\n\r\n        if (message && message.chatwootConversationId) {\r\n          const send = await this.createMessage(\r\n            instance,\r\n            message.chatwootConversationId,\r\n            editedText,\r\n            messageType,\r\n            false,\r\n            [],\r\n            {\r\n              message: { extendedTextMessage: { contextInfo: { stanzaId: key.id } } },\r\n            },\r\n            'WAID:' + body.key.id,\r\n            null,\r\n          );\r\n          if (!send) {\r\n            this.logger.warn('edited message not sent');\r\n            return;\r\n          }\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (event === 'messages.read') {\r\n        if (!body?.key?.id || !body?.key?.remoteJid) {\r\n          this.logger.warn('message id not found');\r\n          return;\r\n        }\r\n\r\n        const message = await this.getMessageByKeyId(instance, body.key.id);\r\n        const conversationId = message?.chatwootConversationId;\r\n        const contactInboxSourceId = message?.chatwootContactInboxSourceId;\r\n\r\n        if (conversationId) {\r\n          let sourceId = contactInboxSourceId;\r\n          const inbox = (await this.getInbox(instance)) as inbox & {\r\n            inbox_identifier?: string;\r\n          };\r\n\r\n          if (!sourceId && inbox) {\r\n            const conversation = (await client.conversations.get({\r\n              accountId: this.provider.accountId,\r\n              conversationId: conversationId,\r\n            })) as conversation_show & {\r\n              last_non_activity_message: { conversation: { contact_inbox: contact_inboxes } };\r\n            };\r\n            sourceId = conversation.last_non_activity_message?.conversation?.contact_inbox?.source_id;\r\n          }\r\n\r\n          if (sourceId && inbox?.inbox_identifier) {\r\n            const url =\r\n              `/public/api/v1/inboxes/${inbox.inbox_identifier}/contacts/${sourceId}` +\r\n              `/conversations/${conversationId}/update_last_seen`;\r\n            chatwootRequest(this.getClientCwConfig(), {\r\n              method: 'POST',\r\n              url: url,\r\n            });\r\n          }\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (event === 'status.instance') {\r\n        const data = body;\r\n        const inbox = await this.getInbox(instance);\r\n\r\n        if (!inbox) {\r\n          this.logger.warn('inbox not found');\r\n          return;\r\n        }\r\n\r\n        const msgStatus = i18next.t('cw.inbox.status', {\r\n          inboxName: inbox.name,\r\n          state: data.status,\r\n        });\r\n\r\n        await this.createBotMessage(instance, msgStatus, 'incoming');\r\n      }\r\n\r\n      if (event === 'connection.update') {\r\n        if (body.status === 'open') {\r\n          // if we have qrcode count then we understand that a new connection was established\r\n          if (this.waMonitor.waInstances[instance.instanceName].qrCode.count > 0) {\r\n            const msgConnection = i18next.t('cw.inbox.connected');\r\n            await this.createBotMessage(instance, msgConnection, 'incoming');\r\n            this.waMonitor.waInstances[instance.instanceName].qrCode.count = 0;\r\n            chatwootImport.clearAll(instance);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (event === 'qrcode.updated') {\r\n        if (body.statusCode === 500) {\r\n          const erroQRcode = `🚨 ${i18next.t('qrlimitreached')}`;\r\n          return await this.createBotMessage(instance, erroQRcode, 'incoming');\r\n        } else {\r\n          const fileData = Buffer.from(body?.qrcode.base64.replace('data:image/png;base64,', ''), 'base64');\r\n\r\n          const fileStream = new Readable();\r\n          fileStream._read = () => {};\r\n          fileStream.push(fileData);\r\n          fileStream.push(null);\r\n\r\n          await this.createBotQr(\r\n            instance,\r\n            i18next.t('qrgeneratedsuccesfully'),\r\n            'incoming',\r\n            fileStream,\r\n            `${instance.instanceName}.png`,\r\n          );\r\n\r\n          let msgQrCode = `⚡️${i18next.t('qrgeneratedsuccesfully')}\\n\\n${i18next.t('scanqr')}`;\r\n\r\n          if (body?.qrcode?.pairingCode) {\r\n            msgQrCode =\r\n              msgQrCode +\r\n              `\\n\\n*Pairing Code:* ${body.qrcode.pairingCode.substring(0, 4)}-${body.qrcode.pairingCode.substring(\r\n                4,\r\n                8,\r\n              )}`;\r\n          }\r\n\r\n          await this.createBotMessage(instance, msgQrCode, 'incoming');\r\n        }\r\n      }\r\n    } catch (error) {\r\n      this.logger.error(error);\r\n    }\r\n  }\r\n\r\n  public getNumberFromRemoteJid(remoteJid: string) {\r\n    return remoteJid.replace(/:\\d+/, '').split('@')[0];\r\n  }\r\n\r\n  public startImportHistoryMessages(instance: InstanceDto) {\r\n    if (!this.isImportHistoryAvailable()) {\r\n      return;\r\n    }\r\n\r\n    this.createBotMessage(instance, i18next.t('cw.import.startImport'), 'incoming');\r\n  }\r\n\r\n  public isImportHistoryAvailable() {\r\n    const uri = this.configService.get<Chatwoot>('CHATWOOT').IMPORT.DATABASE.CONNECTION.URI;\r\n\r\n    return uri && uri !== 'postgres://user:password@hostname:port/dbname';\r\n  }\r\n\r\n  public addHistoryMessages(instance: InstanceDto, messagesRaw: MessageModel[]) {\r\n    if (!this.isImportHistoryAvailable()) {\r\n      return;\r\n    }\r\n\r\n    chatwootImport.addHistoryMessages(instance, messagesRaw);\r\n  }\r\n\r\n  public addHistoryContacts(instance: InstanceDto, contactsRaw: ContactModel[]) {\r\n    if (!this.isImportHistoryAvailable()) {\r\n      return;\r\n    }\r\n\r\n    return chatwootImport.addHistoryContacts(instance, contactsRaw);\r\n  }\r\n\r\n  public async importHistoryMessages(instance: InstanceDto) {\r\n    if (!this.isImportHistoryAvailable()) {\r\n      return;\r\n    }\r\n\r\n    this.createBotMessage(instance, i18next.t('cw.import.importingMessages'), 'incoming');\r\n\r\n    const totalMessagesImported = await chatwootImport.importHistoryMessages(\r\n      instance,\r\n      this,\r\n      await this.getInbox(instance),\r\n      this.provider,\r\n    );\r\n    this.updateContactAvatarInRecentConversations(instance);\r\n\r\n    const msg = Number.isInteger(totalMessagesImported)\r\n      ? i18next.t('cw.import.messagesImported', { totalMessagesImported })\r\n      : i18next.t('cw.import.messagesException');\r\n\r\n    this.createBotMessage(instance, msg, 'incoming');\r\n\r\n    return totalMessagesImported;\r\n  }\r\n\r\n  public async updateContactAvatarInRecentConversations(instance: InstanceDto, limitContacts = 100) {\r\n    try {\r\n      if (!this.isImportHistoryAvailable()) {\r\n        return;\r\n      }\r\n\r\n      const client = await this.clientCw(instance);\r\n      if (!client) {\r\n        this.logger.warn('client not found');\r\n        return null;\r\n      }\r\n\r\n      const inbox = await this.getInbox(instance);\r\n      if (!inbox) {\r\n        this.logger.warn('inbox not found');\r\n        return null;\r\n      }\r\n\r\n      const recentContacts = await chatwootImport.getContactsOrderByRecentConversations(\r\n        inbox,\r\n        this.provider,\r\n        limitContacts,\r\n      );\r\n\r\n      const contactIdentifiers = recentContacts\r\n        .map((contact) => contact.identifier)\r\n        .filter((identifier) => identifier !== null);\r\n\r\n      const contactsWithProfilePicture = (\r\n        await this.prismaRepository.contact.findMany({\r\n          where: {\r\n            instanceId: instance.instanceId,\r\n            id: {\r\n              in: contactIdentifiers,\r\n            },\r\n            profilePicUrl: {\r\n              not: null,\r\n            },\r\n          },\r\n        })\r\n      ).reduce((acc: Map<string, ContactModel>, contact: ContactModel) => acc.set(contact.id, contact), new Map());\r\n\r\n      recentContacts.forEach(async (contact) => {\r\n        if (contactsWithProfilePicture.has(contact.identifier)) {\r\n          client.contacts.update({\r\n            accountId: this.provider.accountId,\r\n            id: contact.id,\r\n            data: {\r\n              avatar_url: contactsWithProfilePicture.get(contact.identifier).profilePictureUrl || null,\r\n            },\r\n          });\r\n        }\r\n      });\r\n    } catch (error) {\r\n      this.logger.error(`Error on update avatar in recent conversations: ${error.toString()}`);\r\n    }\r\n  }\r\n\r\n  public async syncLostMessages(\r\n    instance: InstanceDto,\r\n    chatwootConfig: ChatwootDto,\r\n    prepareMessage: (message: any) => any,\r\n  ) {\r\n    try {\r\n      if (!this.isImportHistoryAvailable()) {\r\n        return;\r\n      }\r\n      if (!this.configService.get<Database>('DATABASE').SAVE_DATA.MESSAGE_UPDATE) {\r\n        return;\r\n      }\r\n\r\n      const inbox = await this.getInbox(instance);\r\n\r\n      const sqlMessages = `select * from messages m\r\n      where account_id = ${chatwootConfig.accountId}\r\n      and inbox_id = ${inbox.id}\r\n      and created_at >= now() - interval '6h'\r\n      order by created_at desc`;\r\n\r\n      const messagesData = (await this.pgClient.query(sqlMessages))?.rows;\r\n      const ids: string[] = messagesData\r\n        .filter((message) => !!message.source_id)\r\n        .map((message) => message.source_id.replace('WAID:', ''));\r\n\r\n      const savedMessages = await this.prismaRepository.message.findMany({\r\n        where: {\r\n          Instance: { name: instance.instanceName },\r\n          messageTimestamp: { gte: dayjs().subtract(6, 'hours').unix() },\r\n          AND: ids.map((id) => ({ key: { path: ['id'], not: id } })),\r\n        },\r\n      });\r\n\r\n      const filteredMessages = savedMessages.filter(\r\n        (msg: any) => !chatwootImport.isIgnorePhoneNumber(msg.key?.remoteJid),\r\n      );\r\n      const messagesRaw: any[] = [];\r\n      for (const m of filteredMessages) {\r\n        if (!m.message || !m.key || !m.messageTimestamp) {\r\n          continue;\r\n        }\r\n\r\n        if (Long.isLong(m?.messageTimestamp)) {\r\n          m.messageTimestamp = m.messageTimestamp?.toNumber();\r\n        }\r\n\r\n        messagesRaw.push(prepareMessage(m as any));\r\n      }\r\n\r\n      this.addHistoryMessages(\r\n        instance,\r\n        messagesRaw.filter((msg) => !chatwootImport.isIgnorePhoneNumber(msg.key?.remoteJid)),\r\n      );\r\n\r\n      await chatwootImport.importHistoryMessages(instance, this, inbox, this.provider);\r\n      const waInstance = this.waMonitor.waInstances[instance.instanceName];\r\n      waInstance.clearCacheChatwoot();\r\n    } catch (error) {\r\n      return;\r\n    }\r\n  }\r\n}\r\n","import { ConfigService, Language } from '@config/env.config';\r\nimport fs from 'fs';\r\nimport i18next from 'i18next';\r\nimport path from 'path';\r\n\r\nconst languages = ['en', 'pt-BR', 'es'];\r\nconst translationsPath = path.join(__dirname, 'translations');\r\nconst configService: ConfigService = new ConfigService();\r\n\r\nconst resources: any = {};\r\n\r\nlanguages.forEach((language) => {\r\n  const languagePath = path.join(translationsPath, `${language}.json`);\r\n  if (fs.existsSync(languagePath)) {\r\n    resources[language] = {\r\n      translation: require(languagePath),\r\n    };\r\n  }\r\n});\r\n\r\ni18next.init({\r\n  resources,\r\n  fallbackLng: 'en',\r\n  lng: configService.get<Language>('LANGUAGE'),\r\n  debug: false,\r\n\r\n  interpolation: {\r\n    escapeValue: false,\r\n  },\r\n});\r\nexport default i18next;\r\n","import axios from 'axios';\r\nimport fs from 'fs';\r\n\r\nconst packageJson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));\r\n\r\nexport interface TelemetryData {\r\n  route: string;\r\n  apiVersion: string;\r\n  timestamp: Date;\r\n}\r\n\r\nexport const sendTelemetry = async (route: string): Promise<void> => {\r\n  const enabled = process.env.TELEMETRY_ENABLED === undefined || process.env.TELEMETRY_ENABLED === 'true';\r\n\r\n  if (!enabled) {\r\n    return;\r\n  }\r\n\r\n  if (route === '/') {\r\n    return;\r\n  }\r\n\r\n  const telemetry: TelemetryData = {\r\n    route,\r\n    apiVersion: `${packageJson.version}`,\r\n    timestamp: new Date(),\r\n  };\r\n\r\n  const url =\r\n    process.env.TELEMETRY_URL && process.env.TELEMETRY_URL !== ''\r\n      ? process.env.TELEMETRY_URL\r\n      : 'https://log.evolution-api.com/telemetry';\r\n\r\n  axios\r\n    .post(url, telemetry)\r\n    .then(() => {})\r\n    .catch(() => {});\r\n};\r\n"],"mappings":"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","names":["isBooleanString","dotenv","ConfigService","key","configService","dayjs","fs","packageJson","fs","formatDateLog","timestamp","dayjs","Color","Level","Type","Background","Logger","context","configService","value","type","types","level","typeValue","Color","packageJson","formatDateLog","postgresql","Pool","Postgres","Logger","connectionString","e","uri","configService","postgresClient","ChatwootImport","Logger","instance","repositoryMessagesCache","messagesRaw","actualValue","contactsRaw","provider","pgClient","postgresClient","totalContactsImported","contacts","contactsChunk","labelSql","labelId","sqlLabel","sqlInsert","bindInsert","contact","bindName","bindPhoneNumber","bindIdentifier","sqlTags","tagId","sqlTag","sqlInsertLabel","bindTaggableId","error","sourceIds","existingSourceIdsSet","formattedSourceIds","sourceId","result","row","chatwootService","inbox","chatwootUser","totalMessagesImported","messagesOrdered","a","b","aKey","bKey","aMessageTimestamp","bMessageTimestamp","allMessagesMappedByPhoneNumber","phoneNumbersWithTimestamp","messages","phoneNumber","existingSourceIds","message","batchSize","messagesChunk","messagesByPhoneNumber","fksByNumber","sqlInsertMsg","bindInsertMsg","fksChatwoot","contentMessage","bindContent","bindConversationId","bindMessageType","bindSenderType","bindSenderId","bindSourceId","bindmessageTimestamp","providerData","event","bindValues","sqlFromChatwoot","phoneNumberTimestamp","bindStr","fksFromChatwoot","item","acc","key","phoneNumberPlus","limit","msg","configService","types","arr","chunkSize","remoteJid","messageId","chatwootImport","ChatwootClient","chatwootRequest","fs","i18next","path","languages","translationsPath","path","configService","ConfigService","resources","language","languagePath","fs","__require","i18next","i18n_default","axios","fs","packageJson","sendTelemetry","route","telemetry","url","axios","dayjs","FormData","Jimp","Long","mimeTypes","path","Readable","ChatwootService","waMonitor","configService","prismaRepository","cache","Logger","postgresClient","instance","cacheKey","provider","ChatwootClient","data","urlServer","id","client","contact","inboxName","webhookUrl","qrcode","number","organization","logo","findInbox","checkDuplicate","inbox","inboxId","contactId","conversation","contentMsg","phoneNumber","isGroup","name","avatar_url","jid","nameInbox","tagData","tagId","taggingsCount","query","chatwootRequest","contacts","phoneNumbers","searchableFields","phone","savedNumber","contact_with9","field","numbers","withoutNine","withNine","filterPayload","fieldsToSearch","index1","index2","queryOperator","body","conversationId","conversationExists","error","chatId","nameContact","filterInbox","group","picture_url","findParticipant","waProfilePictureFile","chatwootProfilePictureFile","pictureNeedsUpdate","nameNeedsUpdate","v","contactConversations","findByName","content","messageType","privateMessage","attachments","messageBody","sourceId","quotedMsg","replyToIds","sourceReplyId","message","fileStream","fileName","messageAlreadySaved","chatwootImport","config","waInstance","media","caption","options","parsedMedia","mimeType","parts","type","sendTelemetry","i18n_default","resolve","keyToDelete","messageReceived","senderName","key","cwBotContact","command","state","msgLogout","formatText","formattedDelimiter","textToConcat","attachment","messageSent","lastMessage","updateMessage","chatwootMessageIds","keyId","msg","inReplyTo","inReplyToExternalId","types","typeKey","result","latitude","longitude","locationName","locationAddress","vCardData","contactInfo","line","value","formattedContact","numberCount","listTitle","listDescription","listFooter","formattedList","section","sectionIndex","row","rowIndex","responseTitle","responseDescription","responseRowId","event","ignoreJids","ignoreGroups","ignoreContacts","originalMessage","bodyMessage","quotedId","isMedia","adsMessage","reactionMessage","getConversation","downloadBase64","nameFile","originalFilename","parsedFile","fileData","participantName","rawPhoneNumber","phoneMatch","formattedPhoneNumber","send","imgBuffer","extension","img","processedBuffer","truncStr","str","len","title","description","editedText","contactInboxSourceId","url","msgStatus","msgConnection","erroQRcode","msgQrCode","remoteJid","uri","messagesRaw","contactsRaw","totalMessagesImported","limitContacts","recentContacts","contactIdentifiers","identifier","contactsWithProfilePicture","acc","chatwootConfig","prepareMessage","sqlMessages","ids","filteredMessages","m"]}
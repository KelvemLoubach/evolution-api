{"version":3,"sources":["../../../../../../src/config/logger.config.ts","../../../../../../src/config/env.config.ts","../../../../../../src/utils/getConversationMessage.ts","../../../../../../src/utils/sendTelemetry.ts","../../../../../../src/api/integrations/chatbot/typebot/services/typebot.service.ts"],"sourcesContent":["import dayjs from 'dayjs';\r\nimport fs from 'fs';\r\n\r\nimport { configService, Log } from './env.config';\r\nconst packageJson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));\r\n\r\nconst formatDateLog = (timestamp: number) =>\r\n  dayjs(timestamp)\r\n    .toDate()\r\n    .toString()\r\n    .replace(/\\sGMT.+/, '');\r\n\r\nenum Color {\r\n  LOG = '\\x1b[32m',\r\n  INFO = '\\x1b[34m',\r\n  WARN = '\\x1b[33m',\r\n  ERROR = '\\x1b[31m',\r\n  DEBUG = '\\x1b[36m',\r\n  VERBOSE = '\\x1b[37m',\r\n  DARK = '\\x1b[30m',\r\n}\r\n\r\nenum Command {\r\n  RESET = '\\x1b[0m',\r\n  BRIGHT = '\\x1b[1m',\r\n  UNDERSCORE = '\\x1b[4m',\r\n}\r\n\r\nenum Level {\r\n  LOG = Color.LOG + '%s' + Command.RESET,\r\n  DARK = Color.DARK + '%s' + Command.RESET,\r\n  INFO = Color.INFO + '%s' + Command.RESET,\r\n  WARN = Color.WARN + '%s' + Command.RESET,\r\n  ERROR = Color.ERROR + '%s' + Command.RESET,\r\n  DEBUG = Color.DEBUG + '%s' + Command.RESET,\r\n  VERBOSE = Color.VERBOSE + '%s' + Command.RESET,\r\n}\r\n\r\nenum Type {\r\n  LOG = 'LOG',\r\n  WARN = 'WARN',\r\n  INFO = 'INFO',\r\n  DARK = 'DARK',\r\n  ERROR = 'ERROR',\r\n  DEBUG = 'DEBUG',\r\n  VERBOSE = 'VERBOSE',\r\n}\r\n\r\nenum Background {\r\n  LOG = '\\x1b[42m',\r\n  INFO = '\\x1b[44m',\r\n  WARN = '\\x1b[43m',\r\n  DARK = '\\x1b[40m',\r\n  ERROR = '\\x1b[41m',\r\n  DEBUG = '\\x1b[46m',\r\n  VERBOSE = '\\x1b[47m',\r\n}\r\n\r\nexport class Logger {\r\n  private readonly configService = configService;\r\n  private context: string;\r\n\r\n  constructor(context = 'Logger') {\r\n    this.context = context;\r\n  }\r\n\r\n  private instance = null;\r\n\r\n  public setContext(value: string) {\r\n    this.context = value;\r\n  }\r\n\r\n  public setInstance(value: string) {\r\n    this.instance = value;\r\n  }\r\n\r\n  private console(value: any, type: Type) {\r\n    const types: Type[] = [];\r\n\r\n    this.configService.get<Log>('LOG').LEVEL.forEach((level) => types.push(Type[level]));\r\n\r\n    const typeValue = typeof value;\r\n    if (types.includes(type)) {\r\n      if (configService.get<Log>('LOG').COLOR) {\r\n        console.log(\r\n          /*Command.UNDERSCORE +*/ Command.BRIGHT + Level[type],\r\n          '[Evolution API]',\r\n          Command.BRIGHT + Color[type],\r\n          this.instance ? `[${this.instance}]` : '',\r\n          Command.BRIGHT + Color[type],\r\n          `v${packageJson.version}`,\r\n          Command.BRIGHT + Color[type],\r\n          process.pid.toString(),\r\n          Command.RESET,\r\n          Command.BRIGHT + Color[type],\r\n          '-',\r\n          Command.BRIGHT + Color.VERBOSE,\r\n          `${formatDateLog(Date.now())}  `,\r\n          Command.RESET,\r\n          Color[type] + Background[type] + Command.BRIGHT,\r\n          `${type} ` + Command.RESET,\r\n          Color.WARN + Command.BRIGHT,\r\n          `[${this.context}]` + Command.RESET,\r\n          Color[type] + Command.BRIGHT,\r\n          `[${typeValue}]` + Command.RESET,\r\n          Color[type],\r\n          typeValue !== 'object' ? value : '',\r\n          Command.RESET,\r\n        );\r\n        typeValue === 'object' ? console.log(/*Level.DARK,*/ value, '\\n') : '';\r\n      } else {\r\n        console.log(\r\n          '[Evolution API]',\r\n          this.instance ? `[${this.instance}]` : '',\r\n          process.pid.toString(),\r\n          '-',\r\n          `${formatDateLog(Date.now())}  `,\r\n          `${type} `,\r\n          `[${this.context}]`,\r\n          `[${typeValue}]`,\r\n          value,\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  public log(value: any) {\r\n    this.console(value, Type.LOG);\r\n  }\r\n\r\n  public info(value: any) {\r\n    this.console(value, Type.INFO);\r\n  }\r\n\r\n  public warn(value: any) {\r\n    this.console(value, Type.WARN);\r\n  }\r\n\r\n  public error(value: any) {\r\n    this.console(value, Type.ERROR);\r\n  }\r\n\r\n  public verbose(value: any) {\r\n    this.console(value, Type.VERBOSE);\r\n  }\r\n\r\n  public debug(value: any) {\r\n    this.console(value, Type.DEBUG);\r\n  }\r\n\r\n  public dark(value: any) {\r\n    this.console(value, Type.DARK);\r\n  }\r\n}\r\n","import { isBooleanString } from 'class-validator';\r\nimport dotenv from 'dotenv';\r\n\r\ndotenv.config();\r\n\r\nexport type HttpServer = {\r\n  TYPE: 'http' | 'https';\r\n  PORT: number;\r\n  URL: string;\r\n  DISABLE_DOCS: boolean;\r\n  DISABLE_MANAGER: boolean;\r\n};\r\n\r\nexport type HttpMethods = 'POST' | 'GET' | 'PUT' | 'DELETE';\r\nexport type Cors = {\r\n  ORIGIN: string[];\r\n  METHODS: HttpMethods[];\r\n  CREDENTIALS: boolean;\r\n};\r\n\r\nexport type LogBaileys = 'fatal' | 'error' | 'warn' | 'info' | 'debug' | 'trace';\r\n\r\nexport type LogLevel = 'ERROR' | 'WARN' | 'DEBUG' | 'INFO' | 'LOG' | 'VERBOSE' | 'DARK' | 'WEBHOOKS' | 'WEBSOCKET';\r\n\r\nexport type Log = {\r\n  LEVEL: LogLevel[];\r\n  COLOR: boolean;\r\n  BAILEYS: LogBaileys;\r\n};\r\n\r\nexport type ProviderSession = {\r\n  ENABLED: boolean;\r\n  HOST: string;\r\n  PORT: string;\r\n  PREFIX: string;\r\n};\r\n\r\nexport type SaveData = {\r\n  INSTANCE: boolean;\r\n  HISTORIC: boolean;\r\n  NEW_MESSAGE: boolean;\r\n  MESSAGE_UPDATE: boolean;\r\n  CONTACTS: boolean;\r\n  CHATS: boolean;\r\n  LABELS: boolean;\r\n  IS_ON_WHATSAPP: boolean;\r\n  IS_ON_WHATSAPP_DAYS: number;\r\n};\r\n\r\nexport type DBConnection = {\r\n  URI: string;\r\n  CLIENT_NAME: string;\r\n};\r\nexport type Database = {\r\n  CONNECTION: DBConnection;\r\n  PROVIDER: string;\r\n  SAVE_DATA: SaveData;\r\n  DELETE_DATA: DeleteData;\r\n};\r\n\r\nexport type DeleteData = {\r\n  LOGICAL_MESSAGE_DELETE: boolean;\r\n};\r\nexport type EventsRabbitmq = {\r\n  APPLICATION_STARTUP: boolean;\r\n  INSTANCE_CREATE: boolean;\r\n  INSTANCE_DELETE: boolean;\r\n  QRCODE_UPDATED: boolean;\r\n  MESSAGES_SET: boolean;\r\n  MESSAGES_UPSERT: boolean;\r\n  MESSAGES_EDITED: boolean;\r\n  MESSAGES_UPDATE: boolean;\r\n  MESSAGES_DELETE: boolean;\r\n  SEND_MESSAGE: boolean;\r\n  CONTACTS_SET: boolean;\r\n  CONTACTS_UPDATE: boolean;\r\n  CONTACTS_UPSERT: boolean;\r\n  PRESENCE_UPDATE: boolean;\r\n  CHATS_SET: boolean;\r\n  CHATS_UPDATE: boolean;\r\n  CHATS_DELETE: boolean;\r\n  CHATS_UPSERT: boolean;\r\n  CONNECTION_UPDATE: boolean;\r\n  LABELS_EDIT: boolean;\r\n  LABELS_ASSOCIATION: boolean;\r\n  GROUPS_UPSERT: boolean;\r\n  GROUP_UPDATE: boolean;\r\n  GROUP_PARTICIPANTS_UPDATE: boolean;\r\n  CALL: boolean;\r\n  TYPEBOT_START: boolean;\r\n  TYPEBOT_CHANGE_STATUS: boolean;\r\n};\r\n\r\nexport type Rabbitmq = {\r\n  ENABLED: boolean;\r\n  URI: string;\r\n  EXCHANGE_NAME: string;\r\n  GLOBAL_ENABLED: boolean;\r\n  EVENTS: EventsRabbitmq;\r\n  PREFIX_KEY: string;\r\n};\r\n\r\nexport type Sqs = {\r\n  ENABLED: boolean;\r\n  ACCESS_KEY_ID: string;\r\n  SECRET_ACCESS_KEY: string;\r\n  ACCOUNT_ID: string;\r\n  REGION: string;\r\n};\r\n\r\nexport type Websocket = {\r\n  ENABLED: boolean;\r\n  GLOBAL_EVENTS: boolean;\r\n};\r\n\r\nexport type WaBusiness = {\r\n  TOKEN_WEBHOOK: string;\r\n  URL: string;\r\n  VERSION: string;\r\n  LANGUAGE: string;\r\n};\r\n\r\nexport type EventsWebhook = {\r\n  APPLICATION_STARTUP: boolean;\r\n  INSTANCE_CREATE: boolean;\r\n  INSTANCE_DELETE: boolean;\r\n  QRCODE_UPDATED: boolean;\r\n  MESSAGES_SET: boolean;\r\n  MESSAGES_UPSERT: boolean;\r\n  MESSAGES_EDITED: boolean;\r\n  MESSAGES_UPDATE: boolean;\r\n  MESSAGES_DELETE: boolean;\r\n  SEND_MESSAGE: boolean;\r\n  CONTACTS_SET: boolean;\r\n  CONTACTS_UPDATE: boolean;\r\n  CONTACTS_UPSERT: boolean;\r\n  PRESENCE_UPDATE: boolean;\r\n  CHATS_SET: boolean;\r\n  CHATS_UPDATE: boolean;\r\n  CHATS_DELETE: boolean;\r\n  CHATS_UPSERT: boolean;\r\n  CONNECTION_UPDATE: boolean;\r\n  LABELS_EDIT: boolean;\r\n  LABELS_ASSOCIATION: boolean;\r\n  GROUPS_UPSERT: boolean;\r\n  GROUP_UPDATE: boolean;\r\n  GROUP_PARTICIPANTS_UPDATE: boolean;\r\n  CALL: boolean;\r\n  TYPEBOT_START: boolean;\r\n  TYPEBOT_CHANGE_STATUS: boolean;\r\n  ERRORS: boolean;\r\n  ERRORS_WEBHOOK: string;\r\n};\r\n\r\nexport type EventsPusher = {\r\n  APPLICATION_STARTUP: boolean;\r\n  INSTANCE_CREATE: boolean;\r\n  INSTANCE_DELETE: boolean;\r\n  QRCODE_UPDATED: boolean;\r\n  MESSAGES_SET: boolean;\r\n  MESSAGES_UPSERT: boolean;\r\n  MESSAGES_EDITED: boolean;\r\n  MESSAGES_UPDATE: boolean;\r\n  MESSAGES_DELETE: boolean;\r\n  SEND_MESSAGE: boolean;\r\n  CONTACTS_SET: boolean;\r\n  CONTACTS_UPDATE: boolean;\r\n  CONTACTS_UPSERT: boolean;\r\n  PRESENCE_UPDATE: boolean;\r\n  CHATS_SET: boolean;\r\n  CHATS_UPDATE: boolean;\r\n  CHATS_DELETE: boolean;\r\n  CHATS_UPSERT: boolean;\r\n  CONNECTION_UPDATE: boolean;\r\n  LABELS_EDIT: boolean;\r\n  LABELS_ASSOCIATION: boolean;\r\n  GROUPS_UPSERT: boolean;\r\n  GROUP_UPDATE: boolean;\r\n  GROUP_PARTICIPANTS_UPDATE: boolean;\r\n  CALL: boolean;\r\n  TYPEBOT_START: boolean;\r\n  TYPEBOT_CHANGE_STATUS: boolean;\r\n};\r\n\r\nexport type ApiKey = { KEY: string };\r\n\r\nexport type Auth = {\r\n  API_KEY: ApiKey;\r\n  EXPOSE_IN_FETCH_INSTANCES: boolean;\r\n};\r\n\r\nexport type DelInstance = number | boolean;\r\n\r\nexport type Language = string | 'en';\r\n\r\nexport type GlobalWebhook = {\r\n  URL: string;\r\n  ENABLED: boolean;\r\n  WEBHOOK_BY_EVENTS: boolean;\r\n};\r\n\r\nexport type GlobalPusher = {\r\n  ENABLED: boolean;\r\n  APP_ID: string;\r\n  KEY: string;\r\n  SECRET: string;\r\n  CLUSTER: string;\r\n  USE_TLS: boolean;\r\n};\r\n\r\nexport type CacheConfRedis = {\r\n  ENABLED: boolean;\r\n  URI: string;\r\n  PREFIX_KEY: string;\r\n  TTL: number;\r\n  SAVE_INSTANCES: boolean;\r\n};\r\nexport type CacheConfLocal = {\r\n  ENABLED: boolean;\r\n  TTL: number;\r\n};\r\nexport type SslConf = { PRIVKEY: string; FULLCHAIN: string };\r\nexport type Webhook = { GLOBAL?: GlobalWebhook; EVENTS: EventsWebhook };\r\nexport type Pusher = { ENABLED: boolean; GLOBAL?: GlobalPusher; EVENTS: EventsPusher };\r\nexport type ConfigSessionPhone = { CLIENT: string; NAME: string; VERSION: string };\r\nexport type QrCode = { LIMIT: number; COLOR: string };\r\nexport type Typebot = { ENABLED: boolean; API_VERSION: string; SEND_MEDIA_BASE64: boolean };\r\nexport type Chatwoot = {\r\n  ENABLED: boolean;\r\n  MESSAGE_DELETE: boolean;\r\n  MESSAGE_READ: boolean;\r\n  BOT_CONTACT: boolean;\r\n  IMPORT: {\r\n    DATABASE: {\r\n      CONNECTION: {\r\n        URI: string;\r\n      };\r\n    };\r\n    PLACEHOLDER_MEDIA_MESSAGE: boolean;\r\n  };\r\n};\r\nexport type Openai = { ENABLED: boolean; API_KEY_GLOBAL?: string };\r\nexport type Dify = { ENABLED: boolean };\r\n\r\nexport type S3 = {\r\n  ACCESS_KEY: string;\r\n  SECRET_KEY: string;\r\n  ENDPOINT: string;\r\n  BUCKET_NAME: string;\r\n  ENABLE: boolean;\r\n  PORT?: number;\r\n  USE_SSL?: boolean;\r\n  REGION?: string;\r\n};\r\n\r\nexport type CacheConf = { REDIS: CacheConfRedis; LOCAL: CacheConfLocal };\r\nexport type Production = boolean;\r\n\r\nexport interface Env {\r\n  SERVER: HttpServer;\r\n  CORS: Cors;\r\n  SSL_CONF: SslConf;\r\n  PROVIDER: ProviderSession;\r\n  DATABASE: Database;\r\n  RABBITMQ: Rabbitmq;\r\n  SQS: Sqs;\r\n  WEBSOCKET: Websocket;\r\n  WA_BUSINESS: WaBusiness;\r\n  LOG: Log;\r\n  DEL_INSTANCE: DelInstance;\r\n  DEL_TEMP_INSTANCES: boolean;\r\n  LANGUAGE: Language;\r\n  WEBHOOK: Webhook;\r\n  PUSHER: Pusher;\r\n  CONFIG_SESSION_PHONE: ConfigSessionPhone;\r\n  QRCODE: QrCode;\r\n  TYPEBOT: Typebot;\r\n  CHATWOOT: Chatwoot;\r\n  OPENAI: Openai;\r\n  DIFY: Dify;\r\n  CACHE: CacheConf;\r\n  S3?: S3;\r\n  AUTHENTICATION: Auth;\r\n  PRODUCTION?: Production;\r\n}\r\n\r\nexport type Key = keyof Env;\r\n\r\nexport class ConfigService {\r\n  constructor() {\r\n    this.loadEnv();\r\n  }\r\n\r\n  private env: Env;\r\n\r\n  public get<T = any>(key: Key) {\r\n    return this.env[key] as T;\r\n  }\r\n\r\n  private loadEnv() {\r\n    this.env = this.envProcess();\r\n    this.env.PRODUCTION = process.env?.NODE_ENV === 'PROD';\r\n    if (process.env?.DOCKER_ENV === 'true') {\r\n      this.env.SERVER.TYPE = process.env.SERVER_TYPE as 'http' | 'http';\r\n      this.env.SERVER.PORT = Number.parseInt(process.env.SERVER_PORT) || 8080;\r\n    }\r\n  }\r\n\r\n  private envProcess(): Env {\r\n    return {\r\n      SERVER: {\r\n        TYPE: (process.env.SERVER_TYPE as 'http' | 'https') || 'http',\r\n        PORT: Number.parseInt(process.env.SERVER_PORT) || 8080,\r\n        URL: process.env.SERVER_URL,\r\n        DISABLE_DOCS: process.env?.SERVER_DISABLE_DOCS === 'true',\r\n        DISABLE_MANAGER: process.env?.SERVER_DISABLE_MANAGER === 'true',\r\n      },\r\n      CORS: {\r\n        ORIGIN: process.env.CORS_ORIGIN?.split(',') || ['*'],\r\n        METHODS:\r\n          (process.env.CORS_METHODS?.split(',') as HttpMethods[]) ||\r\n          (['POST', 'GET', 'PUT', 'DELETE'] as HttpMethods[]),\r\n        CREDENTIALS: process.env?.CORS_CREDENTIALS === 'true',\r\n      },\r\n      SSL_CONF: {\r\n        PRIVKEY: process.env?.SSL_CONF_PRIVKEY || '',\r\n        FULLCHAIN: process.env?.SSL_CONF_FULLCHAIN || '',\r\n      },\r\n      PROVIDER: {\r\n        ENABLED: process.env?.PROVIDER_ENABLED === 'true',\r\n        HOST: process.env.PROVIDER_HOST,\r\n        PORT: process.env?.PROVIDER_PORT || '5656',\r\n        PREFIX: process.env?.PROVIDER_PREFIX || 'evolution',\r\n      },\r\n      DATABASE: {\r\n        CONNECTION: {\r\n          URI: process.env.DATABASE_CONNECTION_URI || '',\r\n          CLIENT_NAME: process.env.DATABASE_CONNECTION_CLIENT_NAME || 'evolution',\r\n        },\r\n        PROVIDER: process.env.DATABASE_PROVIDER || 'postgresql',\r\n        SAVE_DATA: {\r\n          INSTANCE: process.env?.DATABASE_SAVE_DATA_INSTANCE === 'true',\r\n          NEW_MESSAGE: process.env?.DATABASE_SAVE_DATA_NEW_MESSAGE === 'true',\r\n          MESSAGE_UPDATE: process.env?.DATABASE_SAVE_MESSAGE_UPDATE === 'true',\r\n          CONTACTS: process.env?.DATABASE_SAVE_DATA_CONTACTS === 'true',\r\n          CHATS: process.env?.DATABASE_SAVE_DATA_CHATS === 'true',\r\n          HISTORIC: process.env?.DATABASE_SAVE_DATA_HISTORIC === 'true',\r\n          LABELS: process.env?.DATABASE_SAVE_DATA_LABELS === 'true',\r\n          IS_ON_WHATSAPP: process.env?.DATABASE_SAVE_IS_ON_WHATSAPP === 'true',\r\n          IS_ON_WHATSAPP_DAYS: Number.parseInt(process.env?.DATABASE_SAVE_IS_ON_WHATSAPP_DAYS ?? '7'),\r\n        },\r\n        DELETE_DATA: {\r\n          LOGICAL_MESSAGE_DELETE: process.env?.DATABASE_DELETE_MESSAGE === 'true',\r\n        },\r\n      },\r\n      RABBITMQ: {\r\n        ENABLED: process.env?.RABBITMQ_ENABLED === 'true',\r\n        GLOBAL_ENABLED: process.env?.RABBITMQ_GLOBAL_ENABLED === 'true',\r\n        PREFIX_KEY: process.env?.RABBITMQ_PREFIX_KEY || 'evolution',\r\n        EXCHANGE_NAME: process.env?.RABBITMQ_EXCHANGE_NAME || 'evolution_exchange',\r\n        URI: process.env.RABBITMQ_URI || '',\r\n        EVENTS: {\r\n          APPLICATION_STARTUP: process.env?.RABBITMQ_EVENTS_APPLICATION_STARTUP === 'true',\r\n          INSTANCE_CREATE: process.env?.RABBITMQ_EVENTS_INSTANCE_CREATE === 'true',\r\n          INSTANCE_DELETE: process.env?.RABBITMQ_EVENTS_INSTANCE_DELETE === 'true',\r\n          QRCODE_UPDATED: process.env?.RABBITMQ_EVENTS_QRCODE_UPDATED === 'true',\r\n          MESSAGES_SET: process.env?.RABBITMQ_EVENTS_MESSAGES_SET === 'true',\r\n          MESSAGES_UPSERT: process.env?.RABBITMQ_EVENTS_MESSAGES_UPSERT === 'true',\r\n          MESSAGES_EDITED: process.env?.RABBITMQ_EVENTS_MESSAGES_EDITED === 'true',\r\n          MESSAGES_UPDATE: process.env?.RABBITMQ_EVENTS_MESSAGES_UPDATE === 'true',\r\n          MESSAGES_DELETE: process.env?.RABBITMQ_EVENTS_MESSAGES_DELETE === 'true',\r\n          SEND_MESSAGE: process.env?.RABBITMQ_EVENTS_SEND_MESSAGE === 'true',\r\n          CONTACTS_SET: process.env?.RABBITMQ_EVENTS_CONTACTS_SET === 'true',\r\n          CONTACTS_UPDATE: process.env?.RABBITMQ_EVENTS_CONTACTS_UPDATE === 'true',\r\n          CONTACTS_UPSERT: process.env?.RABBITMQ_EVENTS_CONTACTS_UPSERT === 'true',\r\n          PRESENCE_UPDATE: process.env?.RABBITMQ_EVENTS_PRESENCE_UPDATE === 'true',\r\n          CHATS_SET: process.env?.RABBITMQ_EVENTS_CHATS_SET === 'true',\r\n          CHATS_UPDATE: process.env?.RABBITMQ_EVENTS_CHATS_UPDATE === 'true',\r\n          CHATS_UPSERT: process.env?.RABBITMQ_EVENTS_CHATS_UPSERT === 'true',\r\n          CHATS_DELETE: process.env?.RABBITMQ_EVENTS_CHATS_DELETE === 'true',\r\n          CONNECTION_UPDATE: process.env?.RABBITMQ_EVENTS_CONNECTION_UPDATE === 'true',\r\n          LABELS_EDIT: process.env?.RABBITMQ_EVENTS_LABELS_EDIT === 'true',\r\n          LABELS_ASSOCIATION: process.env?.RABBITMQ_EVENTS_LABELS_ASSOCIATION === 'true',\r\n          GROUPS_UPSERT: process.env?.RABBITMQ_EVENTS_GROUPS_UPSERT === 'true',\r\n          GROUP_UPDATE: process.env?.RABBITMQ_EVENTS_GROUPS_UPDATE === 'true',\r\n          GROUP_PARTICIPANTS_UPDATE: process.env?.RABBITMQ_EVENTS_GROUP_PARTICIPANTS_UPDATE === 'true',\r\n          CALL: process.env?.RABBITMQ_EVENTS_CALL === 'true',\r\n          TYPEBOT_START: process.env?.RABBITMQ_EVENTS_TYPEBOT_START === 'true',\r\n          TYPEBOT_CHANGE_STATUS: process.env?.RABBITMQ_EVENTS_TYPEBOT_CHANGE_STATUS === 'true',\r\n        },\r\n      },\r\n      SQS: {\r\n        ENABLED: process.env?.SQS_ENABLED === 'true',\r\n        ACCESS_KEY_ID: process.env.SQS_ACCESS_KEY_ID || '',\r\n        SECRET_ACCESS_KEY: process.env.SQS_SECRET_ACCESS_KEY || '',\r\n        ACCOUNT_ID: process.env.SQS_ACCOUNT_ID || '',\r\n        REGION: process.env.SQS_REGION || '',\r\n      },\r\n      WEBSOCKET: {\r\n        ENABLED: process.env?.WEBSOCKET_ENABLED === 'true',\r\n        GLOBAL_EVENTS: process.env?.WEBSOCKET_GLOBAL_EVENTS === 'true',\r\n      },\r\n      PUSHER: {\r\n        ENABLED: process.env?.PUSHER_ENABLED === 'true',\r\n        GLOBAL: {\r\n          ENABLED: process.env?.PUSHER_GLOBAL_ENABLED === 'true',\r\n          APP_ID: process.env?.PUSHER_GLOBAL_APP_ID || '',\r\n          KEY: process.env?.PUSHER_GLOBAL_KEY || '',\r\n          SECRET: process.env?.PUSHER_GLOBAL_SECRET || '',\r\n          CLUSTER: process.env?.PUSHER_GLOBAL_CLUSTER || '',\r\n          USE_TLS: process.env?.PUSHER_GLOBAL_USE_TLS === 'true',\r\n        },\r\n        EVENTS: {\r\n          APPLICATION_STARTUP: process.env?.PUSHER_EVENTS_APPLICATION_STARTUP === 'true',\r\n          INSTANCE_CREATE: process.env?.PUSHER_EVENTS_INSTANCE_CREATE === 'true',\r\n          INSTANCE_DELETE: process.env?.PUSHER_EVENTS_INSTANCE_DELETE === 'true',\r\n          QRCODE_UPDATED: process.env?.PUSHER_EVENTS_QRCODE_UPDATED === 'true',\r\n          MESSAGES_SET: process.env?.PUSHER_EVENTS_MESSAGES_SET === 'true',\r\n          MESSAGES_UPSERT: process.env?.PUSHER_EVENTS_MESSAGES_UPSERT === 'true',\r\n          MESSAGES_EDITED: process.env?.PUSHER_EVENTS_MESSAGES_EDITED === 'true',\r\n          MESSAGES_UPDATE: process.env?.PUSHER_EVENTS_MESSAGES_UPDATE === 'true',\r\n          MESSAGES_DELETE: process.env?.PUSHER_EVENTS_MESSAGES_DELETE === 'true',\r\n          SEND_MESSAGE: process.env?.PUSHER_EVENTS_SEND_MESSAGE === 'true',\r\n          CONTACTS_SET: process.env?.PUSHER_EVENTS_CONTACTS_SET === 'true',\r\n          CONTACTS_UPDATE: process.env?.PUSHER_EVENTS_CONTACTS_UPDATE === 'true',\r\n          CONTACTS_UPSERT: process.env?.PUSHER_EVENTS_CONTACTS_UPSERT === 'true',\r\n          PRESENCE_UPDATE: process.env?.PUSHER_EVENTS_PRESENCE_UPDATE === 'true',\r\n          CHATS_SET: process.env?.PUSHER_EVENTS_CHATS_SET === 'true',\r\n          CHATS_UPDATE: process.env?.PUSHER_EVENTS_CHATS_UPDATE === 'true',\r\n          CHATS_UPSERT: process.env?.PUSHER_EVENTS_CHATS_UPSERT === 'true',\r\n          CHATS_DELETE: process.env?.PUSHER_EVENTS_CHATS_DELETE === 'true',\r\n          CONNECTION_UPDATE: process.env?.PUSHER_EVENTS_CONNECTION_UPDATE === 'true',\r\n          LABELS_EDIT: process.env?.PUSHER_EVENTS_LABELS_EDIT === 'true',\r\n          LABELS_ASSOCIATION: process.env?.PUSHER_EVENTS_LABELS_ASSOCIATION === 'true',\r\n          GROUPS_UPSERT: process.env?.PUSHER_EVENTS_GROUPS_UPSERT === 'true',\r\n          GROUP_UPDATE: process.env?.PUSHER_EVENTS_GROUPS_UPDATE === 'true',\r\n          GROUP_PARTICIPANTS_UPDATE: process.env?.PUSHER_EVENTS_GROUP_PARTICIPANTS_UPDATE === 'true',\r\n          CALL: process.env?.PUSHER_EVENTS_CALL === 'true',\r\n          TYPEBOT_START: process.env?.PUSHER_EVENTS_TYPEBOT_START === 'true',\r\n          TYPEBOT_CHANGE_STATUS: process.env?.PUSHER_EVENTS_TYPEBOT_CHANGE_STATUS === 'true',\r\n        },\r\n      },\r\n      WA_BUSINESS: {\r\n        TOKEN_WEBHOOK: process.env.WA_BUSINESS_TOKEN_WEBHOOK || 'evolution',\r\n        URL: process.env.WA_BUSINESS_URL || 'https://graph.facebook.com',\r\n        VERSION: process.env.WA_BUSINESS_VERSION || 'v18.0',\r\n        LANGUAGE: process.env.WA_BUSINESS_LANGUAGE || 'en',\r\n      },\r\n      LOG: {\r\n        LEVEL:\r\n          (process.env?.LOG_LEVEL?.split(',') as LogLevel[]) ||\r\n          (['ERROR', 'WARN', 'DEBUG', 'INFO', 'LOG', 'VERBOSE', 'DARK', 'WEBHOOKS', 'WEBSOCKET'] as LogLevel[]),\r\n        COLOR: process.env?.LOG_COLOR === 'true',\r\n        BAILEYS: (process.env?.LOG_BAILEYS as LogBaileys) || 'error',\r\n      },\r\n      DEL_INSTANCE: isBooleanString(process.env?.DEL_INSTANCE)\r\n        ? process.env.DEL_INSTANCE === 'true'\r\n        : Number.parseInt(process.env.DEL_INSTANCE) || false,\r\n      DEL_TEMP_INSTANCES: isBooleanString(process.env?.DEL_TEMP_INSTANCES)\r\n        ? process.env.DEL_TEMP_INSTANCES === 'true'\r\n        : true,\r\n      LANGUAGE: process.env?.LANGUAGE || 'en',\r\n      WEBHOOK: {\r\n        GLOBAL: {\r\n          URL: process.env?.WEBHOOK_GLOBAL_URL || '',\r\n          ENABLED: process.env?.WEBHOOK_GLOBAL_ENABLED === 'true',\r\n          WEBHOOK_BY_EVENTS: process.env?.WEBHOOK_GLOBAL_WEBHOOK_BY_EVENTS === 'true',\r\n        },\r\n        EVENTS: {\r\n          APPLICATION_STARTUP: process.env?.WEBHOOK_EVENTS_APPLICATION_STARTUP === 'true',\r\n          INSTANCE_CREATE: process.env?.WEBHOOK_EVENTS_INSTANCE_CREATE === 'true',\r\n          INSTANCE_DELETE: process.env?.WEBHOOK_EVENTS_INSTANCE_DELETE === 'true',\r\n          QRCODE_UPDATED: process.env?.WEBHOOK_EVENTS_QRCODE_UPDATED === 'true',\r\n          MESSAGES_SET: process.env?.WEBHOOK_EVENTS_MESSAGES_SET === 'true',\r\n          MESSAGES_UPSERT: process.env?.WEBHOOK_EVENTS_MESSAGES_UPSERT === 'true',\r\n          MESSAGES_EDITED: process.env?.WEBHOOK_EVENTS_MESSAGES_EDITED === 'true',\r\n          MESSAGES_UPDATE: process.env?.WEBHOOK_EVENTS_MESSAGES_UPDATE === 'true',\r\n          MESSAGES_DELETE: process.env?.WEBHOOK_EVENTS_MESSAGES_DELETE === 'true',\r\n          SEND_MESSAGE: process.env?.WEBHOOK_EVENTS_SEND_MESSAGE === 'true',\r\n          CONTACTS_SET: process.env?.WEBHOOK_EVENTS_CONTACTS_SET === 'true',\r\n          CONTACTS_UPDATE: process.env?.WEBHOOK_EVENTS_CONTACTS_UPDATE === 'true',\r\n          CONTACTS_UPSERT: process.env?.WEBHOOK_EVENTS_CONTACTS_UPSERT === 'true',\r\n          PRESENCE_UPDATE: process.env?.WEBHOOK_EVENTS_PRESENCE_UPDATE === 'true',\r\n          CHATS_SET: process.env?.WEBHOOK_EVENTS_CHATS_SET === 'true',\r\n          CHATS_UPDATE: process.env?.WEBHOOK_EVENTS_CHATS_UPDATE === 'true',\r\n          CHATS_UPSERT: process.env?.WEBHOOK_EVENTS_CHATS_UPSERT === 'true',\r\n          CHATS_DELETE: process.env?.WEBHOOK_EVENTS_CHATS_DELETE === 'true',\r\n          CONNECTION_UPDATE: process.env?.WEBHOOK_EVENTS_CONNECTION_UPDATE === 'true',\r\n          LABELS_EDIT: process.env?.WEBHOOK_EVENTS_LABELS_EDIT === 'true',\r\n          LABELS_ASSOCIATION: process.env?.WEBHOOK_EVENTS_LABELS_ASSOCIATION === 'true',\r\n          GROUPS_UPSERT: process.env?.WEBHOOK_EVENTS_GROUPS_UPSERT === 'true',\r\n          GROUP_UPDATE: process.env?.WEBHOOK_EVENTS_GROUPS_UPDATE === 'true',\r\n          GROUP_PARTICIPANTS_UPDATE: process.env?.WEBHOOK_EVENTS_GROUP_PARTICIPANTS_UPDATE === 'true',\r\n          CALL: process.env?.WEBHOOK_EVENTS_CALL === 'true',\r\n          TYPEBOT_START: process.env?.WEBHOOK_EVENTS_TYPEBOT_START === 'true',\r\n          TYPEBOT_CHANGE_STATUS: process.env?.WEBHOOK_EVENTS_TYPEBOT_CHANGE_STATUS === 'true',\r\n          ERRORS: process.env?.WEBHOOK_EVENTS_ERRORS === 'true',\r\n          ERRORS_WEBHOOK: process.env?.WEBHOOK_EVENTS_ERRORS_WEBHOOK || '',\r\n        },\r\n      },\r\n      CONFIG_SESSION_PHONE: {\r\n        CLIENT: process.env?.CONFIG_SESSION_PHONE_CLIENT || 'Evolution API',\r\n        NAME: process.env?.CONFIG_SESSION_PHONE_NAME || 'Chrome',\r\n        VERSION: process.env?.CONFIG_SESSION_PHONE_VERSION || null,\r\n      },\r\n      QRCODE: {\r\n        LIMIT: Number.parseInt(process.env.QRCODE_LIMIT) || 30,\r\n        COLOR: process.env.QRCODE_COLOR || '#198754',\r\n      },\r\n      TYPEBOT: {\r\n        ENABLED: process.env?.TYPEBOT_ENABLED === 'true',\r\n        API_VERSION: process.env?.TYPEBOT_API_VERSION || 'old',\r\n        SEND_MEDIA_BASE64: process.env?.TYPEBOT_SEND_MEDIA_BASE64 === 'true',\r\n      },\r\n      CHATWOOT: {\r\n        ENABLED: process.env?.CHATWOOT_ENABLED === 'true',\r\n        MESSAGE_DELETE: process.env.CHATWOOT_MESSAGE_DELETE === 'true',\r\n        MESSAGE_READ: process.env.CHATWOOT_MESSAGE_READ === 'true',\r\n        BOT_CONTACT: !process.env.CHATWOOT_BOT_CONTACT || process.env.CHATWOOT_BOT_CONTACT === 'true',\r\n        IMPORT: {\r\n          DATABASE: {\r\n            CONNECTION: {\r\n              URI: process.env.CHATWOOT_IMPORT_DATABASE_CONNECTION_URI || '',\r\n            },\r\n          },\r\n          PLACEHOLDER_MEDIA_MESSAGE: process.env?.CHATWOOT_IMPORT_PLACEHOLDER_MEDIA_MESSAGE === 'true',\r\n        },\r\n      },\r\n      OPENAI: {\r\n        ENABLED: process.env?.OPENAI_ENABLED === 'true',\r\n        API_KEY_GLOBAL: process.env?.OPENAI_API_KEY_GLOBAL || null,\r\n      },\r\n      DIFY: {\r\n        ENABLED: process.env?.DIFY_ENABLED === 'true',\r\n      },\r\n      CACHE: {\r\n        REDIS: {\r\n          ENABLED: process.env?.CACHE_REDIS_ENABLED === 'true',\r\n          URI: process.env?.CACHE_REDIS_URI || '',\r\n          PREFIX_KEY: process.env?.CACHE_REDIS_PREFIX_KEY || 'evolution-cache',\r\n          TTL: Number.parseInt(process.env?.CACHE_REDIS_TTL) || 604800,\r\n          SAVE_INSTANCES: process.env?.CACHE_REDIS_SAVE_INSTANCES === 'true',\r\n        },\r\n        LOCAL: {\r\n          ENABLED: process.env?.CACHE_LOCAL_ENABLED === 'true',\r\n          TTL: Number.parseInt(process.env?.CACHE_REDIS_TTL) || 86400,\r\n        },\r\n      },\r\n      S3: {\r\n        ACCESS_KEY: process.env?.S3_ACCESS_KEY,\r\n        SECRET_KEY: process.env?.S3_SECRET_KEY,\r\n        ENDPOINT: process.env?.S3_ENDPOINT,\r\n        BUCKET_NAME: process.env?.S3_BUCKET,\r\n        ENABLE: process.env?.S3_ENABLED === 'true',\r\n        PORT: Number.parseInt(process.env?.S3_PORT || '9000'),\r\n        USE_SSL: process.env?.S3_USE_SSL === 'true',\r\n        REGION: process.env?.S3_REGION,\r\n      },\r\n      AUTHENTICATION: {\r\n        API_KEY: {\r\n          KEY: process.env.AUTHENTICATION_API_KEY || 'BQYHJGJHJ',\r\n        },\r\n        EXPOSE_IN_FETCH_INSTANCES: process.env?.AUTHENTICATION_EXPOSE_IN_FETCH_INSTANCES === 'true',\r\n      },\r\n    };\r\n  }\r\n}\r\n\r\nexport const configService = new ConfigService();\r\n","import { configService, S3 } from '@config/env.config';\r\n\r\nconst getTypeMessage = (msg: any) => {\r\n  let mediaId: string;\r\n\r\n  if (configService.get<S3>('S3').ENABLE) mediaId = msg.message.mediaUrl;\r\n  else mediaId = msg.key.id;\r\n\r\n  const types = {\r\n    conversation: msg?.message?.conversation,\r\n    extendedTextMessage: msg?.message?.extendedTextMessage?.text,\r\n    contactMessage: msg?.message?.contactMessage?.displayName,\r\n    locationMessage: msg?.message?.locationMessage?.degreesLatitude,\r\n    viewOnceMessageV2:\r\n      msg?.message?.viewOnceMessageV2?.message?.imageMessage?.url ||\r\n      msg?.message?.viewOnceMessageV2?.message?.videoMessage?.url ||\r\n      msg?.message?.viewOnceMessageV2?.message?.audioMessage?.url,\r\n    listResponseMessage: msg?.message?.listResponseMessage?.title,\r\n    responseRowId: msg?.message?.listResponseMessage?.singleSelectReply?.selectedRowId,\r\n    templateButtonReplyMessage:\r\n      msg?.message?.templateButtonReplyMessage?.selectedId || msg?.message?.buttonsResponseMessage?.selectedButtonId,\r\n    // Medias\r\n    audioMessage: msg?.message?.speechToText\r\n      ? msg?.message?.speechToText\r\n      : msg?.message?.audioMessage\r\n        ? `audioMessage|${mediaId}`\r\n        : undefined,\r\n    imageMessage: msg?.message?.imageMessage\r\n      ? `imageMessage|${mediaId}${msg?.message?.imageMessage?.caption ? `|${msg?.message?.imageMessage?.caption}` : ''}`\r\n      : undefined,\r\n    videoMessage: msg?.message?.videoMessage\r\n      ? `videoMessage|${mediaId}${msg?.message?.videoMessage?.caption ? `|${msg?.message?.videoMessage?.caption}` : ''}`\r\n      : undefined,\r\n    documentMessage: msg?.message?.documentMessage\r\n      ? `documentMessage|${mediaId}${\r\n          msg?.message?.documentMessage?.caption ? `|${msg?.message?.documentMessage?.caption}` : ''\r\n        }`\r\n      : undefined,\r\n    documentWithCaptionMessage: msg?.message?.documentWithCaptionMessage?.message?.documentMessage\r\n      ? `documentWithCaptionMessage|${mediaId}${\r\n          msg?.message?.documentWithCaptionMessage?.message?.documentMessage?.caption\r\n            ? `|${msg?.message?.documentWithCaptionMessage?.message?.documentMessage?.caption}`\r\n            : ''\r\n        }`\r\n      : undefined,\r\n    externalAdReplyBody: msg?.contextInfo?.externalAdReply?.body\r\n      ? `externalAdReplyBody|${msg.contextInfo.externalAdReply.body}`\r\n      : undefined,\r\n  };\r\n\r\n  const messageType = Object.keys(types).find((key) => types[key] !== undefined) || 'unknown';\r\n\r\n  return { ...types, messageType };\r\n};\r\n\r\nconst getMessageContent = (types: any) => {\r\n  const typeKey = Object.keys(types).find((key) => key !== 'externalAdReplyBody' && types[key] !== undefined);\r\n\r\n  let result = typeKey ? types[typeKey] : undefined;\r\n\r\n  if (types.externalAdReplyBody) {\r\n    result = result ? `${result}\\n${types.externalAdReplyBody}` : types.externalAdReplyBody;\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nexport const getConversationMessage = (msg: any) => {\r\n  const types = getTypeMessage(msg);\r\n\r\n  const messageContent = getMessageContent(types);\r\n\r\n  return messageContent;\r\n};\r\n","import axios from 'axios';\r\nimport fs from 'fs';\r\n\r\nconst packageJson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));\r\n\r\nexport interface TelemetryData {\r\n  route: string;\r\n  apiVersion: string;\r\n  timestamp: Date;\r\n}\r\n\r\nexport const sendTelemetry = async (route: string): Promise<void> => {\r\n  const enabled = process.env.TELEMETRY_ENABLED === undefined || process.env.TELEMETRY_ENABLED === 'true';\r\n\r\n  if (!enabled) {\r\n    return;\r\n  }\r\n\r\n  if (route === '/') {\r\n    return;\r\n  }\r\n\r\n  const telemetry: TelemetryData = {\r\n    route,\r\n    apiVersion: `${packageJson.version}`,\r\n    timestamp: new Date(),\r\n  };\r\n\r\n  const url =\r\n    process.env.TELEMETRY_URL && process.env.TELEMETRY_URL !== ''\r\n      ? process.env.TELEMETRY_URL\r\n      : 'https://log.evolution-api.com/telemetry';\r\n\r\n  axios\r\n    .post(url, telemetry)\r\n    .then(() => {})\r\n    .catch(() => {});\r\n};\r\n","import { PrismaRepository } from '@api/repository/repository.service';\r\nimport { WAMonitoringService } from '@api/services/monitor.service';\r\nimport { Auth, ConfigService, HttpServer, Typebot } from '@config/env.config';\r\nimport { Logger } from '@config/logger.config';\r\nimport { Instance, IntegrationSession, Message, Typebot as TypebotModel } from '@prisma/client';\r\nimport { getConversationMessage } from '@utils/getConversationMessage';\r\nimport { sendTelemetry } from '@utils/sendTelemetry';\r\nimport axios from 'axios';\r\n\r\nexport class TypebotService {\r\n  constructor(\r\n    private readonly waMonitor: WAMonitoringService,\r\n    private readonly configService: ConfigService,\r\n    private readonly prismaRepository: PrismaRepository,\r\n  ) {}\r\n\r\n  private readonly logger = new Logger('TypebotService');\r\n\r\n  public async createNewSession(instance: Instance, data: any) {\r\n    if (data.remoteJid === 'status@broadcast') return;\r\n    const id = Math.floor(Math.random() * 10000000000).toString();\r\n\r\n    try {\r\n      const version = this.configService.get<Typebot>('TYPEBOT').API_VERSION;\r\n      let url: string;\r\n      let reqData: {};\r\n      if (version === 'latest') {\r\n        url = `${data.url}/api/v1/typebots/${data.typebot}/startChat`;\r\n\r\n        reqData = {\r\n          prefilledVariables: {\r\n            ...data.prefilledVariables,\r\n            remoteJid: data.remoteJid,\r\n            pushName: data.pushName || data.prefilledVariables?.pushName || '',\r\n            instanceName: instance.name,\r\n            serverUrl: this.configService.get<HttpServer>('SERVER').URL,\r\n            apiKey: this.configService.get<Auth>('AUTHENTICATION').API_KEY.KEY,\r\n            ownerJid: instance.number,\r\n          },\r\n        };\r\n      } else {\r\n        url = `${data.url}/api/v1/sendMessage`;\r\n\r\n        reqData = {\r\n          startParams: {\r\n            publicId: data.typebot,\r\n            prefilledVariables: {\r\n              ...data.prefilledVariables,\r\n              remoteJid: data.remoteJid,\r\n              pushName: data.pushName || data.prefilledVariables?.pushName || '',\r\n              instanceName: instance.name,\r\n              serverUrl: this.configService.get<HttpServer>('SERVER').URL,\r\n              apiKey: this.configService.get<Auth>('AUTHENTICATION').API_KEY.KEY,\r\n              ownerJid: instance.number,\r\n            },\r\n          },\r\n        };\r\n      }\r\n      const request = await axios.post(url, reqData);\r\n\r\n      let session = null;\r\n      if (request?.data?.sessionId) {\r\n        session = await this.prismaRepository.integrationSession.create({\r\n          data: {\r\n            remoteJid: data.remoteJid,\r\n            pushName: data.pushName || '',\r\n            sessionId: `${id}-${request.data.sessionId}`,\r\n            status: 'opened',\r\n            parameters: {\r\n              ...data.prefilledVariables,\r\n              remoteJid: data.remoteJid,\r\n              pushName: data.pushName || '',\r\n              instanceName: instance.name,\r\n              serverUrl: this.configService.get<HttpServer>('SERVER').URL,\r\n              apiKey: this.configService.get<Auth>('AUTHENTICATION').API_KEY.KEY,\r\n              ownerJid: instance.number,\r\n            },\r\n            awaitUser: false,\r\n            botId: data.botId,\r\n            instanceId: instance.id,\r\n            type: 'typebot',\r\n          },\r\n        });\r\n      }\r\n      return { ...request.data, session };\r\n    } catch (error) {\r\n      this.logger.error(error);\r\n      return;\r\n    }\r\n  }\r\n\r\n  public async sendWAMessage(\r\n    instance: Instance,\r\n    session: IntegrationSession,\r\n    settings: {\r\n      expire: number;\r\n      keywordFinish: string;\r\n      delayMessage: number;\r\n      unknownMessage: string;\r\n      listeningFromMe: boolean;\r\n      stopBotFromMe: boolean;\r\n      keepOpen: boolean;\r\n    },\r\n    remoteJid: string,\r\n    messages: any,\r\n    input: any,\r\n    clientSideActions: any,\r\n  ) {\r\n    processMessages(\r\n      this.waMonitor.waInstances[instance.name],\r\n      session,\r\n      settings,\r\n      messages,\r\n      input,\r\n      clientSideActions,\r\n      applyFormatting,\r\n      this.prismaRepository,\r\n    ).catch((err) => {\r\n      console.error('Erro ao processar mensagens:', err);\r\n    });\r\n\r\n    function findItemAndGetSecondsToWait(array, targetId) {\r\n      if (!array) return null;\r\n\r\n      for (const item of array) {\r\n        if (item.lastBubbleBlockId === targetId) {\r\n          return item.wait?.secondsToWaitFor;\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n\r\n    function applyFormatting(element) {\r\n      let text = '';\r\n\r\n      if (element.text) {\r\n        text += element.text;\r\n      }\r\n\r\n      if (element.children && element.type !== 'a') {\r\n        for (const child of element.children) {\r\n          text += applyFormatting(child);\r\n        }\r\n      }\r\n\r\n      if (element.type === 'p' && element.type !== 'inline-variable') {\r\n        text = text.trim() + '\\n';\r\n      }\r\n\r\n      if (element.type === 'inline-variable') {\r\n        text = text.trim();\r\n      }\r\n\r\n      if (element.type === 'ol') {\r\n        text =\r\n          '\\n' +\r\n          text\r\n            .split('\\n')\r\n            .map((line, index) => (line ? `${index + 1}. ${line}` : ''))\r\n            .join('\\n');\r\n      }\r\n\r\n      if (element.type === 'li') {\r\n        text = text\r\n          .split('\\n')\r\n          .map((line) => (line ? `  ${line}` : ''))\r\n          .join('\\n');\r\n      }\r\n\r\n      let formats = '';\r\n\r\n      if (element.bold) {\r\n        formats += '*';\r\n      }\r\n\r\n      if (element.italic) {\r\n        formats += '_';\r\n      }\r\n\r\n      if (element.underline) {\r\n        formats += '~';\r\n      }\r\n\r\n      let formattedText = `${formats}${text}${formats.split('').reverse().join('')}`;\r\n\r\n      if (element.url) {\r\n        formattedText = element.children[0]?.text ? `[${formattedText}]\\n(${element.url})` : `${element.url}`;\r\n      }\r\n\r\n      return formattedText;\r\n    }\r\n\r\n    async function processMessages(\r\n      instance: any,\r\n      session: IntegrationSession,\r\n      settings: {\r\n        expire: number;\r\n        keywordFinish: string;\r\n        delayMessage: number;\r\n        unknownMessage: string;\r\n        listeningFromMe: boolean;\r\n        stopBotFromMe: boolean;\r\n        keepOpen: boolean;\r\n      },\r\n      messages: any,\r\n      input: any,\r\n      clientSideActions: any,\r\n      applyFormatting: any,\r\n      prismaRepository: PrismaRepository,\r\n    ) {\r\n      for (const message of messages) {\r\n        if (message.type === 'text') {\r\n          let formattedText = '';\r\n\r\n          for (const richText of message.content.richText) {\r\n            for (const element of richText.children) {\r\n              formattedText += applyFormatting(element);\r\n            }\r\n            formattedText += '\\n';\r\n          }\r\n\r\n          formattedText = formattedText.replace(/\\*\\*/g, '').replace(/__/, '').replace(/~~/, '').replace(/\\n$/, '');\r\n\r\n          formattedText = formattedText.replace(/\\n$/, '');\r\n\r\n          if (formattedText.includes('[list]')) {\r\n            const listJson = {\r\n              number: remoteJid.split('@')[0],\r\n              title: '',\r\n              description: '',\r\n              buttonText: '',\r\n              footerText: '',\r\n              sections: [],\r\n            };\r\n\r\n            const titleMatch = formattedText.match(/\\[title\\]([\\s\\S]*?)(?=\\[description\\])/);\r\n            const descriptionMatch = formattedText.match(/\\[description\\]([\\s\\S]*?)(?=\\[buttonText\\])/);\r\n            const buttonTextMatch = formattedText.match(/\\[buttonText\\]([\\s\\S]*?)(?=\\[footerText\\])/);\r\n            const footerTextMatch = formattedText.match(/\\[footerText\\]([\\s\\S]*?)(?=\\[menu\\])/);\r\n\r\n            if (titleMatch) listJson.title = titleMatch[1].trim();\r\n            if (descriptionMatch) listJson.description = descriptionMatch[1].trim();\r\n            if (buttonTextMatch) listJson.buttonText = buttonTextMatch[1].trim();\r\n            if (footerTextMatch) listJson.footerText = footerTextMatch[1].trim();\r\n\r\n            const menuContent = formattedText.match(/\\[menu\\]([\\s\\S]*?)\\[\\/menu\\]/)?.[1];\r\n            if (menuContent) {\r\n              const sections = menuContent.match(/\\[section\\]([\\s\\S]*?)(?=\\[section\\]|\\[\\/section\\]|\\[\\/menu\\])/g);\r\n              if (sections) {\r\n                sections.forEach((section) => {\r\n                  const sectionTitle = section.match(/title: (.*?)(?:\\n|$)/)?.[1]?.trim();\r\n                  const rows = section.match(/\\[row\\]([\\s\\S]*?)(?=\\[row\\]|\\[\\/row\\]|\\[\\/section\\]|\\[\\/menu\\])/g);\r\n\r\n                  const sectionData = {\r\n                    title: sectionTitle,\r\n                    rows:\r\n                      rows?.map((row) => ({\r\n                        title: row.match(/title: (.*?)(?:\\n|$)/)?.[1]?.trim(),\r\n                        description: row.match(/description: (.*?)(?:\\n|$)/)?.[1]?.trim(),\r\n                        rowId: row.match(/rowId: (.*?)(?:\\n|$)/)?.[1]?.trim(),\r\n                      })) || [],\r\n                  };\r\n\r\n                  listJson.sections.push(sectionData);\r\n                });\r\n              }\r\n            }\r\n\r\n            await instance.listMessage(listJson);\r\n          } else if (formattedText.includes('[buttons]')) {\r\n            const buttonJson = {\r\n              number: remoteJid.split('@')[0],\r\n              thumbnailUrl: undefined,\r\n              title: '',\r\n              description: '',\r\n              footer: '',\r\n              buttons: [],\r\n            };\r\n\r\n            const thumbnailUrlMatch = formattedText.match(/\\[thumbnailUrl\\]([\\s\\S]*?)(?=\\[title\\])/);\r\n            const titleMatch = formattedText.match(/\\[title\\]([\\s\\S]*?)(?=\\[description\\])/);\r\n            const descriptionMatch = formattedText.match(/\\[description\\]([\\s\\S]*?)(?=\\[footer\\])/);\r\n            const footerMatch = formattedText.match(/\\[footer\\]([\\s\\S]*?)(?=\\[(?:reply|pix|copy|call|url))/);\r\n\r\n            if (titleMatch) buttonJson.title = titleMatch[1].trim();\r\n            if (thumbnailUrlMatch) buttonJson.thumbnailUrl = thumbnailUrlMatch[1].trim();\r\n            if (descriptionMatch) buttonJson.description = descriptionMatch[1].trim();\r\n            if (footerMatch) buttonJson.footer = footerMatch[1].trim();\r\n\r\n            const buttonTypes = {\r\n              reply: /\\[reply\\]([\\s\\S]*?)(?=\\[(?:reply|pix|copy|call|url)|$)/g,\r\n              pix: /\\[pix\\]([\\s\\S]*?)(?=\\[(?:reply|pix|copy|call|url)|$)/g,\r\n              copy: /\\[copy\\]([\\s\\S]*?)(?=\\[(?:reply|pix|copy|call|url)|$)/g,\r\n              call: /\\[call\\]([\\s\\S]*?)(?=\\[(?:reply|pix|copy|call|url)|$)/g,\r\n              url: /\\[url\\]([\\s\\S]*?)(?=\\[(?:reply|pix|copy|call|url)|$)/g,\r\n            };\r\n\r\n            for (const [type, pattern] of Object.entries(buttonTypes)) {\r\n              let match;\r\n              while ((match = pattern.exec(formattedText)) !== null) {\r\n                const content = match[1].trim();\r\n                const button: any = { type };\r\n\r\n                switch (type) {\r\n                  case 'pix':\r\n                    button.currency = content.match(/currency: (.*?)(?:\\n|$)/)?.[1]?.trim();\r\n                    button.name = content.match(/name: (.*?)(?:\\n|$)/)?.[1]?.trim();\r\n                    button.keyType = content.match(/keyType: (.*?)(?:\\n|$)/)?.[1]?.trim();\r\n                    button.key = content.match(/key: (.*?)(?:\\n|$)/)?.[1]?.trim();\r\n                    break;\r\n\r\n                  case 'reply':\r\n                    button.displayText = content.match(/displayText: (.*?)(?:\\n|$)/)?.[1]?.trim();\r\n                    button.id = content.match(/id: (.*?)(?:\\n|$)/)?.[1]?.trim();\r\n                    break;\r\n\r\n                  case 'copy':\r\n                    button.displayText = content.match(/displayText: (.*?)(?:\\n|$)/)?.[1]?.trim();\r\n                    button.copyCode = content.match(/copyCode: (.*?)(?:\\n|$)/)?.[1]?.trim();\r\n                    break;\r\n\r\n                  case 'call':\r\n                    button.displayText = content.match(/displayText: (.*?)(?:\\n|$)/)?.[1]?.trim();\r\n                    button.phoneNumber = content.match(/phone: (.*?)(?:\\n|$)/)?.[1]?.trim();\r\n                    break;\r\n\r\n                  case 'url':\r\n                    button.displayText = content.match(/displayText: (.*?)(?:\\n|$)/)?.[1]?.trim();\r\n                    button.url = content.match(/url: (.*?)(?:\\n|$)/)?.[1]?.trim();\r\n                    break;\r\n                }\r\n\r\n                if (Object.keys(button).length > 1) {\r\n                  buttonJson.buttons.push(button);\r\n                }\r\n              }\r\n            }\r\n\r\n            await instance.buttonMessage(buttonJson);\r\n          } else {\r\n            await instance.textMessage(\r\n              {\r\n                number: remoteJid.split('@')[0],\r\n                delay: settings?.delayMessage || 1000,\r\n                text: formattedText,\r\n              },\r\n              false,\r\n            );\r\n          }\r\n\r\n          sendTelemetry('/message/sendText');\r\n        }\r\n\r\n        if (message.type === 'image') {\r\n          await instance.mediaMessage(\r\n            {\r\n              number: remoteJid.split('@')[0],\r\n              delay: settings?.delayMessage || 1000,\r\n              mediatype: 'image',\r\n              media: message.content.url,\r\n            },\r\n            null,\r\n            false,\r\n          );\r\n\r\n          sendTelemetry('/message/sendMedia');\r\n        }\r\n\r\n        if (message.type === 'video') {\r\n          await instance.mediaMessage(\r\n            {\r\n              number: remoteJid.split('@')[0],\r\n              delay: settings?.delayMessage || 1000,\r\n              mediatype: 'video',\r\n              media: message.content.url,\r\n            },\r\n            null,\r\n            false,\r\n          );\r\n\r\n          sendTelemetry('/message/sendMedia');\r\n        }\r\n\r\n        if (message.type === 'audio') {\r\n          await instance.audioWhatsapp(\r\n            {\r\n              number: remoteJid.split('@')[0],\r\n              delay: settings?.delayMessage || 1000,\r\n              encoding: true,\r\n              audio: message.content.url,\r\n            },\r\n            false,\r\n          );\r\n\r\n          sendTelemetry('/message/sendWhatsAppAudio');\r\n        }\r\n\r\n        const wait = findItemAndGetSecondsToWait(clientSideActions, message.id);\r\n\r\n        if (wait) {\r\n          await new Promise((resolve) => setTimeout(resolve, wait * 1000));\r\n        }\r\n      }\r\n\r\n      console.log('input', input);\r\n      if (input) {\r\n        if (input.type === 'choice input') {\r\n          let formattedText = '';\r\n\r\n          const items = input.items;\r\n\r\n          for (const item of items) {\r\n            formattedText += `▶️ ${item.content}\\n`;\r\n          }\r\n\r\n          formattedText = formattedText.replace(/\\n$/, '');\r\n\r\n          if (formattedText.includes('[list]')) {\r\n            const listJson = {\r\n              number: remoteJid.split('@')[0],\r\n              title: '',\r\n              description: '',\r\n              buttonText: '',\r\n              footerText: '',\r\n              sections: [],\r\n            };\r\n\r\n            const titleMatch = formattedText.match(/\\[title\\]([\\s\\S]*?)(?=\\[description\\])/);\r\n            const descriptionMatch = formattedText.match(/\\[description\\]([\\s\\S]*?)(?=\\[buttonText\\])/);\r\n            const buttonTextMatch = formattedText.match(/\\[buttonText\\]([\\s\\S]*?)(?=\\[footerText\\])/);\r\n            const footerTextMatch = formattedText.match(/\\[footerText\\]([\\s\\S]*?)(?=\\[menu\\])/);\r\n\r\n            if (titleMatch) listJson.title = titleMatch[1].trim();\r\n            if (descriptionMatch) listJson.description = descriptionMatch[1].trim();\r\n            if (buttonTextMatch) listJson.buttonText = buttonTextMatch[1].trim();\r\n            if (footerTextMatch) listJson.footerText = footerTextMatch[1].trim();\r\n\r\n            const menuContent = formattedText.match(/\\[menu\\]([\\s\\S]*?)\\[\\/menu\\]/)?.[1];\r\n            if (menuContent) {\r\n              const sections = menuContent.match(/\\[section\\]([\\s\\S]*?)(?=\\[section\\]|\\[\\/section\\]|\\[\\/menu\\])/g);\r\n              if (sections) {\r\n                sections.forEach((section) => {\r\n                  const sectionTitle = section.match(/title: (.*?)(?:\\n|$)/)?.[1]?.trim();\r\n                  const rows = section.match(/\\[row\\]([\\s\\S]*?)(?=\\[row\\]|\\[\\/row\\]|\\[\\/section\\]|\\[\\/menu\\])/g);\r\n\r\n                  const sectionData = {\r\n                    title: sectionTitle,\r\n                    rows:\r\n                      rows?.map((row) => ({\r\n                        title: row.match(/title: (.*?)(?:\\n|$)/)?.[1]?.trim(),\r\n                        description: row.match(/description: (.*?)(?:\\n|$)/)?.[1]?.trim(),\r\n                        rowId: row.match(/rowId: (.*?)(?:\\n|$)/)?.[1]?.trim(),\r\n                      })) || [],\r\n                  };\r\n\r\n                  listJson.sections.push(sectionData);\r\n                });\r\n              }\r\n            }\r\n\r\n            await instance.listMessage(listJson);\r\n          } else if (formattedText.includes('[buttons]')) {\r\n            const buttonJson = {\r\n              number: remoteJid.split('@')[0],\r\n              thumbnailUrl: undefined,\r\n              title: '',\r\n              description: '',\r\n              footer: '',\r\n              buttons: [],\r\n            };\r\n\r\n            const thumbnailUrlMatch = formattedText.match(/\\[thumbnailUrl\\]([\\s\\S]*?)(?=\\[title\\])/);\r\n            const titleMatch = formattedText.match(/\\[title\\]([\\s\\S]*?)(?=\\[description\\])/);\r\n            const descriptionMatch = formattedText.match(/\\[description\\]([\\s\\S]*?)(?=\\[footer\\])/);\r\n            const footerMatch = formattedText.match(/\\[footer\\]([\\s\\S]*?)(?=\\[(?:reply|pix|copy|call|url))/);\r\n\r\n            if (titleMatch) buttonJson.title = titleMatch[1].trim();\r\n            if (thumbnailUrlMatch) buttonJson.thumbnailUrl = thumbnailUrlMatch[1].trim();\r\n            if (descriptionMatch) buttonJson.description = descriptionMatch[1].trim();\r\n            if (footerMatch) buttonJson.footer = footerMatch[1].trim();\r\n\r\n            const buttonTypes = {\r\n              reply: /\\[reply\\]([\\s\\S]*?)(?=\\[(?:reply|pix|copy|call|url)|$)/g,\r\n              pix: /\\[pix\\]([\\s\\S]*?)(?=\\[(?:reply|pix|copy|call|url)|$)/g,\r\n              copy: /\\[copy\\]([\\s\\S]*?)(?=\\[(?:reply|pix|copy|call|url)|$)/g,\r\n              call: /\\[call\\]([\\s\\S]*?)(?=\\[(?:reply|pix|copy|call|url)|$)/g,\r\n              url: /\\[url\\]([\\s\\S]*?)(?=\\[(?:reply|pix|copy|call|url)|$)/g,\r\n            };\r\n\r\n            for (const [type, pattern] of Object.entries(buttonTypes)) {\r\n              let match;\r\n              while ((match = pattern.exec(formattedText)) !== null) {\r\n                const content = match[1].trim();\r\n                const button: any = { type };\r\n\r\n                switch (type) {\r\n                  case 'pix':\r\n                    button.currency = content.match(/currency: (.*?)(?:\\n|$)/)?.[1]?.trim();\r\n                    button.name = content.match(/name: (.*?)(?:\\n|$)/)?.[1]?.trim();\r\n                    button.keyType = content.match(/keyType: (.*?)(?:\\n|$)/)?.[1]?.trim();\r\n                    button.key = content.match(/key: (.*?)(?:\\n|$)/)?.[1]?.trim();\r\n                    break;\r\n\r\n                  case 'reply':\r\n                    button.displayText = content.match(/displayText: (.*?)(?:\\n|$)/)?.[1]?.trim();\r\n                    button.id = content.match(/id: (.*?)(?:\\n|$)/)?.[1]?.trim();\r\n                    break;\r\n\r\n                  case 'copy':\r\n                    button.displayText = content.match(/displayText: (.*?)(?:\\n|$)/)?.[1]?.trim();\r\n                    button.copyCode = content.match(/copyCode: (.*?)(?:\\n|$)/)?.[1]?.trim();\r\n                    break;\r\n\r\n                  case 'call':\r\n                    button.displayText = content.match(/displayText: (.*?)(?:\\n|$)/)?.[1]?.trim();\r\n                    button.phoneNumber = content.match(/phone: (.*?)(?:\\n|$)/)?.[1]?.trim();\r\n                    break;\r\n\r\n                  case 'url':\r\n                    button.displayText = content.match(/displayText: (.*?)(?:\\n|$)/)?.[1]?.trim();\r\n                    button.url = content.match(/url: (.*?)(?:\\n|$)/)?.[1]?.trim();\r\n                    break;\r\n                }\r\n\r\n                if (Object.keys(button).length > 1) {\r\n                  buttonJson.buttons.push(button);\r\n                }\r\n              }\r\n            }\r\n\r\n            await instance.buttonMessage(buttonJson);\r\n          } else {\r\n            await instance.textMessage(\r\n              {\r\n                number: remoteJid.split('@')[0],\r\n                delay: settings?.delayMessage || 1000,\r\n                text: formattedText,\r\n              },\r\n              false,\r\n            );\r\n          }\r\n\r\n          sendTelemetry('/message/sendText');\r\n        }\r\n\r\n        await prismaRepository.integrationSession.update({\r\n          where: {\r\n            id: session.id,\r\n          },\r\n          data: {\r\n            awaitUser: true,\r\n          },\r\n        });\r\n      } else {\r\n        if (!settings?.keepOpen) {\r\n          await prismaRepository.integrationSession.deleteMany({\r\n            where: {\r\n              id: session.id,\r\n            },\r\n          });\r\n        } else {\r\n          await prismaRepository.integrationSession.update({\r\n            where: {\r\n              id: session.id,\r\n            },\r\n            data: {\r\n              status: 'closed',\r\n            },\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public async processTypebot(\r\n    instance: Instance,\r\n    remoteJid: string,\r\n    msg: Message,\r\n    session: IntegrationSession,\r\n    findTypebot: TypebotModel,\r\n    url: string,\r\n    expire: number,\r\n    typebot: string,\r\n    keywordFinish: string,\r\n    delayMessage: number,\r\n    unknownMessage: string,\r\n    listeningFromMe: boolean,\r\n    stopBotFromMe: boolean,\r\n    keepOpen: boolean,\r\n    content: string,\r\n    prefilledVariables?: any,\r\n  ) {\r\n    if (session && expire && expire > 0) {\r\n      const now = Date.now();\r\n\r\n      const sessionUpdatedAt = new Date(session.updatedAt).getTime();\r\n\r\n      const diff = now - sessionUpdatedAt;\r\n\r\n      const diffInMinutes = Math.floor(diff / 1000 / 60);\r\n\r\n      if (diffInMinutes > expire) {\r\n        if (keepOpen) {\r\n          await this.prismaRepository.integrationSession.update({\r\n            where: {\r\n              id: session.id,\r\n            },\r\n            data: {\r\n              status: 'closed',\r\n            },\r\n          });\r\n        } else {\r\n          await this.prismaRepository.integrationSession.deleteMany({\r\n            where: {\r\n              botId: findTypebot.id,\r\n              remoteJid: remoteJid,\r\n            },\r\n          });\r\n        }\r\n\r\n        const data = await this.createNewSession(instance, {\r\n          enabled: findTypebot?.enabled,\r\n          url: url,\r\n          typebot: typebot,\r\n          expire: expire,\r\n          keywordFinish: keywordFinish,\r\n          delayMessage: delayMessage,\r\n          unknownMessage: unknownMessage,\r\n          listeningFromMe: listeningFromMe,\r\n          remoteJid: remoteJid,\r\n          pushName: msg.pushName,\r\n          botId: findTypebot.id,\r\n          prefilledVariables: prefilledVariables,\r\n        });\r\n\r\n        if (data.session) {\r\n          session = data.session;\r\n        }\r\n\r\n        if (data.messages.length === 0) {\r\n          const content = getConversationMessage(msg.message);\r\n\r\n          if (!content) {\r\n            if (unknownMessage) {\r\n              this.waMonitor.waInstances[instance.name].textMessage(\r\n                {\r\n                  number: remoteJid.split('@')[0],\r\n                  delay: delayMessage || 1000,\r\n                  text: unknownMessage,\r\n                },\r\n                false,\r\n              );\r\n\r\n              sendTelemetry('/message/sendText');\r\n            }\r\n            return;\r\n          }\r\n\r\n          if (keywordFinish && content.toLowerCase() === keywordFinish.toLowerCase()) {\r\n            if (keepOpen) {\r\n              await this.prismaRepository.integrationSession.update({\r\n                where: {\r\n                  id: session.id,\r\n                },\r\n                data: {\r\n                  status: 'closed',\r\n                },\r\n              });\r\n            } else {\r\n              await this.prismaRepository.integrationSession.deleteMany({\r\n                where: {\r\n                  botId: findTypebot.id,\r\n                  remoteJid: remoteJid,\r\n                },\r\n              });\r\n            }\r\n            return;\r\n          }\r\n\r\n          try {\r\n            const version = this.configService.get<Typebot>('TYPEBOT').API_VERSION;\r\n            let urlTypebot: string;\r\n            let reqData: {};\r\n            if (version === 'latest') {\r\n              urlTypebot = `${url}/api/v1/sessions/${data.sessionId}/continueChat`;\r\n              reqData = {\r\n                message: content,\r\n              };\r\n            } else {\r\n              urlTypebot = `${url}/api/v1/sendMessage`;\r\n              reqData = {\r\n                message: content,\r\n                sessionId: data.sessionId,\r\n              };\r\n            }\r\n\r\n            const request = await axios.post(urlTypebot, reqData);\r\n\r\n            await this.sendWAMessage(\r\n              instance,\r\n              session,\r\n              {\r\n                expire: expire,\r\n                keywordFinish: keywordFinish,\r\n                delayMessage: delayMessage,\r\n                unknownMessage: unknownMessage,\r\n                listeningFromMe: listeningFromMe,\r\n                stopBotFromMe: stopBotFromMe,\r\n                keepOpen: keepOpen,\r\n              },\r\n              remoteJid,\r\n              request.data.messages,\r\n              request.data.input,\r\n              request.data.clientSideActions,\r\n            );\r\n          } catch (error) {\r\n            this.logger.error(error);\r\n            return;\r\n          }\r\n        }\r\n\r\n        await this.sendWAMessage(\r\n          instance,\r\n          session,\r\n          {\r\n            expire: expire,\r\n            keywordFinish: keywordFinish,\r\n            delayMessage: delayMessage,\r\n            unknownMessage: unknownMessage,\r\n            listeningFromMe: listeningFromMe,\r\n            stopBotFromMe: stopBotFromMe,\r\n            keepOpen: keepOpen,\r\n          },\r\n          remoteJid,\r\n          data.messages,\r\n          data.input,\r\n          data.clientSideActions,\r\n        );\r\n\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (session && session.status !== 'opened') {\r\n      return;\r\n    }\r\n\r\n    if (!session) {\r\n      const data = await this.createNewSession(instance, {\r\n        enabled: findTypebot?.enabled,\r\n        url: url,\r\n        typebot: typebot,\r\n        expire: expire,\r\n        keywordFinish: keywordFinish,\r\n        delayMessage: delayMessage,\r\n        unknownMessage: unknownMessage,\r\n        listeningFromMe: listeningFromMe,\r\n        remoteJid: remoteJid,\r\n        pushName: msg?.pushName,\r\n        botId: findTypebot.id,\r\n        prefilledVariables: prefilledVariables,\r\n      });\r\n\r\n      if (data?.session) {\r\n        session = data.session;\r\n      }\r\n\r\n      await this.sendWAMessage(\r\n        instance,\r\n        session,\r\n        {\r\n          expire: expire,\r\n          keywordFinish: keywordFinish,\r\n          delayMessage: delayMessage,\r\n          unknownMessage: unknownMessage,\r\n          listeningFromMe: listeningFromMe,\r\n          stopBotFromMe: stopBotFromMe,\r\n          keepOpen: keepOpen,\r\n        },\r\n        remoteJid,\r\n        data?.messages,\r\n        data?.input,\r\n        data?.clientSideActions,\r\n      );\r\n\r\n      if (data.messages.length === 0) {\r\n        if (!content) {\r\n          if (unknownMessage) {\r\n            this.waMonitor.waInstances[instance.name].textMessage(\r\n              {\r\n                number: remoteJid.split('@')[0],\r\n                delay: delayMessage || 1000,\r\n                text: unknownMessage,\r\n              },\r\n              false,\r\n            );\r\n\r\n            sendTelemetry('/message/sendText');\r\n          }\r\n          return;\r\n        }\r\n\r\n        if (keywordFinish && content.toLowerCase() === keywordFinish.toLowerCase()) {\r\n          if (keepOpen) {\r\n            await this.prismaRepository.integrationSession.update({\r\n              where: {\r\n                id: session.id,\r\n              },\r\n              data: {\r\n                status: 'closed',\r\n              },\r\n            });\r\n          } else {\r\n            await this.prismaRepository.integrationSession.deleteMany({\r\n              where: {\r\n                botId: findTypebot.id,\r\n                remoteJid: remoteJid,\r\n              },\r\n            });\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        let request: any;\r\n        try {\r\n          const version = this.configService.get<Typebot>('TYPEBOT').API_VERSION;\r\n          let urlTypebot: string;\r\n          let reqData: {};\r\n          if (version === 'latest') {\r\n            urlTypebot = `${url}/api/v1/sessions/${data.sessionId}/continueChat`;\r\n            reqData = {\r\n              message: content,\r\n            };\r\n          } else {\r\n            urlTypebot = `${url}/api/v1/sendMessage`;\r\n            reqData = {\r\n              message: content,\r\n              sessionId: data.sessionId,\r\n            };\r\n          }\r\n          request = await axios.post(urlTypebot, reqData);\r\n\r\n          await this.sendWAMessage(\r\n            instance,\r\n            session,\r\n            {\r\n              expire: expire,\r\n              keywordFinish: keywordFinish,\r\n              delayMessage: delayMessage,\r\n              unknownMessage: unknownMessage,\r\n              listeningFromMe: listeningFromMe,\r\n              stopBotFromMe: stopBotFromMe,\r\n              keepOpen: keepOpen,\r\n            },\r\n            remoteJid,\r\n            request.data.messages,\r\n            request.data.input,\r\n            request.data.clientSideActions,\r\n          );\r\n        } catch (error) {\r\n          this.logger.error(error);\r\n          return;\r\n        }\r\n      }\r\n      return;\r\n    }\r\n\r\n    await this.prismaRepository.integrationSession.update({\r\n      where: {\r\n        id: session.id,\r\n      },\r\n      data: {\r\n        status: 'opened',\r\n        awaitUser: false,\r\n      },\r\n    });\r\n\r\n    if (!content) {\r\n      if (unknownMessage) {\r\n        this.waMonitor.waInstances[instance.name].textMessage(\r\n          {\r\n            number: remoteJid.split('@')[0],\r\n            delay: delayMessage || 1000,\r\n            text: unknownMessage,\r\n          },\r\n          false,\r\n        );\r\n\r\n        sendTelemetry('/message/sendText');\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (keywordFinish && content.toLowerCase() === keywordFinish.toLowerCase()) {\r\n      if (keepOpen) {\r\n        await this.prismaRepository.integrationSession.update({\r\n          where: {\r\n            id: session.id,\r\n          },\r\n          data: {\r\n            status: 'closed',\r\n          },\r\n        });\r\n      } else {\r\n        await this.prismaRepository.integrationSession.deleteMany({\r\n          where: {\r\n            botId: findTypebot.id,\r\n            remoteJid: remoteJid,\r\n          },\r\n        });\r\n      }\r\n      return;\r\n    }\r\n\r\n    const version = this.configService.get<Typebot>('TYPEBOT').API_VERSION;\r\n    let urlTypebot: string;\r\n    let reqData: {};\r\n    if (version === 'latest') {\r\n      urlTypebot = `${url}/api/v1/sessions/${session.sessionId.split('-')[1]}/continueChat`;\r\n      reqData = {\r\n        message: content,\r\n      };\r\n    } else {\r\n      urlTypebot = `${url}/api/v1/sendMessage`;\r\n      reqData = {\r\n        message: content,\r\n        sessionId: session.sessionId.split('-')[1],\r\n      };\r\n    }\r\n    const request = await axios.post(urlTypebot, reqData);\r\n\r\n    await this.sendWAMessage(\r\n      instance,\r\n      session,\r\n      {\r\n        expire: expire,\r\n        keywordFinish: keywordFinish,\r\n        delayMessage: delayMessage,\r\n        unknownMessage: unknownMessage,\r\n        listeningFromMe: listeningFromMe,\r\n        stopBotFromMe: stopBotFromMe,\r\n        keepOpen: keepOpen,\r\n      },\r\n      remoteJid,\r\n      request?.data?.messages,\r\n      request?.data?.input,\r\n      request?.data?.clientSideActions,\r\n    );\r\n\r\n    return;\r\n  }\r\n}\r\n"],"mappings":"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","names":["dayjs","fs","isBooleanString","dotenv","ConfigService","key","configService","packageJson","fs","formatDateLog","timestamp","dayjs","Color","Level","Type","Background","Logger","context","configService","value","type","types","level","typeValue","Color","packageJson","formatDateLog","getTypeMessage","msg","mediaId","configService","types","messageType","key","getMessageContent","typeKey","result","getConversationMessage","axios","fs","packageJson","sendTelemetry","route","telemetry","url","axios","TypebotService","waMonitor","configService","prismaRepository","Logger","instance","data","id","version","url","reqData","request","session","error","settings","remoteJid","messages","input","clientSideActions","processMessages","applyFormatting","err","findItemAndGetSecondsToWait","array","targetId","item","element","text","child","line","index","formats","formattedText","message","richText","listJson","titleMatch","descriptionMatch","buttonTextMatch","footerTextMatch","menuContent","sections","section","sectionTitle","rows","sectionData","row","buttonJson","thumbnailUrlMatch","footerMatch","buttonTypes","type","pattern","match","content","button","sendTelemetry","wait","resolve","items","msg","findTypebot","expire","typebot","keywordFinish","delayMessage","unknownMessage","listeningFromMe","stopBotFromMe","keepOpen","prefilledVariables","now","sessionUpdatedAt","diff","getConversationMessage","urlTypebot"]}
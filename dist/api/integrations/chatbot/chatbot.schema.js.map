{"version":3,"sources":["../../../../src/api/integrations/chatbot/chatbot.schema.ts","../../../../node_modules/uuid/dist/esm-node/rng.js","../../../../node_modules/uuid/dist/esm-node/stringify.js","../../../../node_modules/uuid/dist/esm-node/native.js","../../../../node_modules/uuid/dist/esm-node/v4.js","../../../../src/api/integrations/chatbot/chatwoot/validate/chatwoot.schema.ts","../../../../src/api/integrations/chatbot/dify/validate/dify.schema.ts","../../../../src/api/integrations/chatbot/evolutionBot/validate/evolutionBot.schema.ts","../../../../src/api/integrations/chatbot/flowise/validate/flowise.schema.ts","../../../../src/api/integrations/chatbot/openai/validate/openai.schema.ts","../../../../src/api/integrations/chatbot/typebot/validate/typebot.schema.ts"],"sourcesContent":["export * from '@api/integrations/chatbot/chatwoot/validate/chatwoot.schema';\r\nexport * from '@api/integrations/chatbot/dify/validate/dify.schema';\r\nexport * from '@api/integrations/chatbot/evolutionBot/validate/evolutionBot.schema';\r\nexport * from '@api/integrations/chatbot/flowise/validate/flowise.schema';\r\nexport * from '@api/integrations/chatbot/openai/validate/openai.schema';\r\nexport * from '@api/integrations/chatbot/typebot/validate/typebot.schema';\r\n","import crypto from 'crypto';\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\n\nlet poolPtr = rnds8Pool.length;\nexport default function rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    crypto.randomFillSync(rnds8Pool);\n    poolPtr = 0;\n  }\n\n  return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import crypto from 'crypto';\nexport default {\n  randomUUID: crypto.randomUUID\n};","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","import { JSONSchema7 } from 'json-schema';\r\nimport { v4 } from 'uuid';\r\n\r\nconst isNotEmpty = (...propertyNames: string[]): JSONSchema7 => {\r\n  const properties = {};\r\n  propertyNames.forEach(\r\n    (property) =>\r\n      (properties[property] = {\r\n        minLength: 1,\r\n        description: `The \"${property}\" cannot be empty`,\r\n      }),\r\n  );\r\n  return {\r\n    if: {\r\n      propertyNames: {\r\n        enum: [...propertyNames],\r\n      },\r\n    },\r\n    then: { properties },\r\n  };\r\n};\r\n\r\nexport const chatwootSchema: JSONSchema7 = {\r\n  $id: v4(),\r\n  type: 'object',\r\n  properties: {\r\n    enabled: { type: 'boolean', enum: [true, false] },\r\n    accountId: { type: 'string' },\r\n    token: { type: 'string' },\r\n    url: { type: 'string' },\r\n    signMsg: { type: 'boolean', enum: [true, false] },\r\n    signDelimiter: { type: ['string', 'null'] },\r\n    nameInbox: { type: ['string', 'null'] },\r\n    reopenConversation: { type: 'boolean', enum: [true, false] },\r\n    conversationPending: { type: 'boolean', enum: [true, false] },\r\n    autoCreate: { type: 'boolean', enum: [true, false] },\r\n    importContacts: { type: 'boolean', enum: [true, false] },\r\n    mergeBrazilContacts: { type: 'boolean', enum: [true, false] },\r\n    importMessages: { type: 'boolean', enum: [true, false] },\r\n    daysLimitImportMessages: { type: 'number' },\r\n    ignoreJids: { type: 'array', items: { type: 'string' } },\r\n  },\r\n  required: ['enabled', 'accountId', 'token', 'url', 'signMsg', 'reopenConversation', 'conversationPending'],\r\n  ...isNotEmpty('enabled', 'accountId', 'token', 'url', 'signMsg', 'reopenConversation', 'conversationPending'),\r\n};\r\n","import { JSONSchema7 } from 'json-schema';\r\nimport { v4 } from 'uuid';\r\n\r\nconst isNotEmpty = (...propertyNames: string[]): JSONSchema7 => {\r\n  const properties = {};\r\n  propertyNames.forEach(\r\n    (property) =>\r\n      (properties[property] = {\r\n        minLength: 1,\r\n        description: `The \"${property}\" cannot be empty`,\r\n      }),\r\n  );\r\n  return {\r\n    if: {\r\n      propertyNames: {\r\n        enum: [...propertyNames],\r\n      },\r\n    },\r\n    then: { properties },\r\n  };\r\n};\r\n\r\nexport const difySchema: JSONSchema7 = {\r\n  $id: v4(),\r\n  type: 'object',\r\n  properties: {\r\n    enabled: { type: 'boolean' },\r\n    description: { type: 'string' },\r\n    botType: { type: 'string', enum: ['chatBot', 'textGenerator', 'agent', 'workflow'] },\r\n    apiUrl: { type: 'string' },\r\n    apiKey: { type: 'string' },\r\n    triggerType: { type: 'string', enum: ['all', 'keyword', 'none', 'advanced'] },\r\n    triggerOperator: { type: 'string', enum: ['equals', 'contains', 'startsWith', 'endsWith', 'regex'] },\r\n    triggerValue: { type: 'string' },\r\n    expire: { type: 'integer' },\r\n    keywordFinish: { type: 'string' },\r\n    delayMessage: { type: 'integer' },\r\n    unknownMessage: { type: 'string' },\r\n    listeningFromMe: { type: 'boolean' },\r\n    stopBotFromMe: { type: 'boolean' },\r\n    keepOpen: { type: 'boolean' },\r\n    debounceTime: { type: 'integer' },\r\n    ignoreJids: { type: 'array', items: { type: 'string' } },\r\n    splitMessages: { type: 'boolean' },\r\n    timePerChar: { type: 'integer' },\r\n  },\r\n  required: ['enabled', 'botType', 'triggerType'],\r\n  ...isNotEmpty('enabled', 'botType', 'triggerType'),\r\n};\r\n\r\nexport const difyStatusSchema: JSONSchema7 = {\r\n  $id: v4(),\r\n  type: 'object',\r\n  properties: {\r\n    remoteJid: { type: 'string' },\r\n    status: { type: 'string', enum: ['opened', 'closed', 'paused', 'delete'] },\r\n  },\r\n  required: ['remoteJid', 'status'],\r\n  ...isNotEmpty('remoteJid', 'status'),\r\n};\r\n\r\nexport const difySettingSchema: JSONSchema7 = {\r\n  $id: v4(),\r\n  type: 'object',\r\n  properties: {\r\n    expire: { type: 'integer' },\r\n    keywordFinish: { type: 'string' },\r\n    delayMessage: { type: 'integer' },\r\n    unknownMessage: { type: 'string' },\r\n    listeningFromMe: { type: 'boolean' },\r\n    stopBotFromMe: { type: 'boolean' },\r\n    keepOpen: { type: 'boolean' },\r\n    debounceTime: { type: 'integer' },\r\n    ignoreJids: { type: 'array', items: { type: 'string' } },\r\n    difyIdFallback: { type: 'string' },\r\n    splitMessages: { type: 'boolean' },\r\n    timePerChar: { type: 'integer' },\r\n  },\r\n  required: [\r\n    'expire',\r\n    'keywordFinish',\r\n    'delayMessage',\r\n    'unknownMessage',\r\n    'listeningFromMe',\r\n    'stopBotFromMe',\r\n    'keepOpen',\r\n    'debounceTime',\r\n    'ignoreJids',\r\n    'splitMessages',\r\n    'timePerChar',\r\n  ],\r\n  ...isNotEmpty(\r\n    'expire',\r\n    'keywordFinish',\r\n    'delayMessage',\r\n    'unknownMessage',\r\n    'listeningFromMe',\r\n    'stopBotFromMe',\r\n    'keepOpen',\r\n    'debounceTime',\r\n    'ignoreJids',\r\n    'splitMessages',\r\n    'timePerChar',\r\n  ),\r\n};\r\n\r\nexport const difyIgnoreJidSchema: JSONSchema7 = {\r\n  $id: v4(),\r\n  type: 'object',\r\n  properties: {\r\n    remoteJid: { type: 'string' },\r\n    action: { type: 'string', enum: ['add', 'remove'] },\r\n  },\r\n  required: ['remoteJid', 'action'],\r\n  ...isNotEmpty('remoteJid', 'action'),\r\n};\r\n","import { JSONSchema7 } from 'json-schema';\r\nimport { v4 } from 'uuid';\r\n\r\nconst isNotEmpty = (...propertyNames: string[]): JSONSchema7 => {\r\n  const properties = {};\r\n  propertyNames.forEach(\r\n    (property) =>\r\n      (properties[property] = {\r\n        minLength: 1,\r\n        description: `The \"${property}\" cannot be empty`,\r\n      }),\r\n  );\r\n  return {\r\n    if: {\r\n      propertyNames: {\r\n        enum: [...propertyNames],\r\n      },\r\n    },\r\n    then: { properties },\r\n  };\r\n};\r\n\r\nexport const evolutionBotSchema: JSONSchema7 = {\r\n  $id: v4(),\r\n  type: 'object',\r\n  properties: {\r\n    enabled: { type: 'boolean' },\r\n    description: { type: 'string' },\r\n    apiUrl: { type: 'string' },\r\n    apiKey: { type: 'string' },\r\n    triggerType: { type: 'string', enum: ['all', 'keyword', 'none', 'advanced'] },\r\n    triggerOperator: { type: 'string', enum: ['equals', 'contains', 'startsWith', 'endsWith', 'regex'] },\r\n    triggerValue: { type: 'string' },\r\n    expire: { type: 'integer' },\r\n    keywordFinish: { type: 'string' },\r\n    delayMessage: { type: 'integer' },\r\n    unknownMessage: { type: 'string' },\r\n    listeningFromMe: { type: 'boolean' },\r\n    stopBotFromMe: { type: 'boolean' },\r\n    keepOpen: { type: 'boolean' },\r\n    debounceTime: { type: 'integer' },\r\n    ignoreJids: { type: 'array', items: { type: 'string' } },\r\n    splitMessages: { type: 'boolean' },\r\n    timePerChar: { type: 'integer' },\r\n  },\r\n  required: ['enabled', 'apiUrl', 'triggerType'],\r\n  ...isNotEmpty('enabled', 'apiUrl', 'triggerType'),\r\n};\r\n\r\nexport const evolutionBotStatusSchema: JSONSchema7 = {\r\n  $id: v4(),\r\n  type: 'object',\r\n  properties: {\r\n    remoteJid: { type: 'string' },\r\n    status: { type: 'string', enum: ['opened', 'closed', 'paused', 'delete'] },\r\n  },\r\n  required: ['remoteJid', 'status'],\r\n  ...isNotEmpty('remoteJid', 'status'),\r\n};\r\n\r\nexport const evolutionBotSettingSchema: JSONSchema7 = {\r\n  $id: v4(),\r\n  type: 'object',\r\n  properties: {\r\n    expire: { type: 'integer' },\r\n    keywordFinish: { type: 'string' },\r\n    delayMessage: { type: 'integer' },\r\n    unknownMessage: { type: 'string' },\r\n    listeningFromMe: { type: 'boolean' },\r\n    stopBotFromMe: { type: 'boolean' },\r\n    keepOpen: { type: 'boolean' },\r\n    debounceTime: { type: 'integer' },\r\n    ignoreJids: { type: 'array', items: { type: 'string' } },\r\n    botIdFallback: { type: 'string' },\r\n    splitMessages: { type: 'boolean' },\r\n    timePerChar: { type: 'integer' },\r\n  },\r\n  required: [\r\n    'expire',\r\n    'keywordFinish',\r\n    'delayMessage',\r\n    'unknownMessage',\r\n    'listeningFromMe',\r\n    'stopBotFromMe',\r\n    'keepOpen',\r\n    'debounceTime',\r\n    'ignoreJids',\r\n    'splitMessages',\r\n    'timePerChar',\r\n  ],\r\n  ...isNotEmpty(\r\n    'expire',\r\n    'keywordFinish',\r\n    'delayMessage',\r\n    'unknownMessage',\r\n    'listeningFromMe',\r\n    'stopBotFromMe',\r\n    'keepOpen',\r\n    'debounceTime',\r\n    'ignoreJids',\r\n    'splitMessages',\r\n    'timePerChar',\r\n  ),\r\n};\r\n\r\nexport const evolutionBotIgnoreJidSchema: JSONSchema7 = {\r\n  $id: v4(),\r\n  type: 'object',\r\n  properties: {\r\n    remoteJid: { type: 'string' },\r\n    action: { type: 'string', enum: ['add', 'remove'] },\r\n  },\r\n  required: ['remoteJid', 'action'],\r\n  ...isNotEmpty('remoteJid', 'action'),\r\n};\r\n","import { JSONSchema7 } from 'json-schema';\r\nimport { v4 } from 'uuid';\r\n\r\nconst isNotEmpty = (...propertyNames: string[]): JSONSchema7 => {\r\n  const properties = {};\r\n  propertyNames.forEach(\r\n    (property) =>\r\n      (properties[property] = {\r\n        minLength: 1,\r\n        description: `The \"${property}\" cannot be empty`,\r\n      }),\r\n  );\r\n  return {\r\n    if: {\r\n      propertyNames: {\r\n        enum: [...propertyNames],\r\n      },\r\n    },\r\n    then: { properties },\r\n  };\r\n};\r\n\r\nexport const flowiseSchema: JSONSchema7 = {\r\n  $id: v4(),\r\n  type: 'object',\r\n  properties: {\r\n    enabled: { type: 'boolean' },\r\n    description: { type: 'string' },\r\n    apiUrl: { type: 'string' },\r\n    apiKey: { type: 'string' },\r\n    triggerType: { type: 'string', enum: ['all', 'keyword', 'none', 'advanced'] },\r\n    triggerOperator: { type: 'string', enum: ['equals', 'contains', 'startsWith', 'endsWith', 'regex'] },\r\n    triggerValue: { type: 'string' },\r\n    expire: { type: 'integer' },\r\n    keywordFinish: { type: 'string' },\r\n    delayMessage: { type: 'integer' },\r\n    unknownMessage: { type: 'string' },\r\n    listeningFromMe: { type: 'boolean' },\r\n    stopBotFromMe: { type: 'boolean' },\r\n    keepOpen: { type: 'boolean' },\r\n    debounceTime: { type: 'integer' },\r\n    ignoreJids: { type: 'array', items: { type: 'string' } },\r\n  },\r\n  required: ['enabled', 'apiUrl', 'triggerType'],\r\n  ...isNotEmpty('enabled', 'apiUrl', 'triggerType'),\r\n};\r\n\r\nexport const flowiseStatusSchema: JSONSchema7 = {\r\n  $id: v4(),\r\n  type: 'object',\r\n  properties: {\r\n    remoteJid: { type: 'string' },\r\n    status: { type: 'string', enum: ['opened', 'closed', 'paused', 'delete'] },\r\n  },\r\n  required: ['remoteJid', 'status'],\r\n  ...isNotEmpty('remoteJid', 'status'),\r\n};\r\n\r\nexport const flowiseSettingSchema: JSONSchema7 = {\r\n  $id: v4(),\r\n  type: 'object',\r\n  properties: {\r\n    expire: { type: 'integer' },\r\n    keywordFinish: { type: 'string' },\r\n    delayMessage: { type: 'integer' },\r\n    unknownMessage: { type: 'string' },\r\n    listeningFromMe: { type: 'boolean' },\r\n    stopBotFromMe: { type: 'boolean' },\r\n    keepOpen: { type: 'boolean' },\r\n    debounceTime: { type: 'integer' },\r\n    ignoreJids: { type: 'array', items: { type: 'string' } },\r\n    botIdFallback: { type: 'string' },\r\n  },\r\n  required: [\r\n    'expire',\r\n    'keywordFinish',\r\n    'delayMessage',\r\n    'unknownMessage',\r\n    'listeningFromMe',\r\n    'stopBotFromMe',\r\n    'keepOpen',\r\n    'debounceTime',\r\n    'ignoreJids',\r\n  ],\r\n  ...isNotEmpty(\r\n    'expire',\r\n    'keywordFinish',\r\n    'delayMessage',\r\n    'unknownMessage',\r\n    'listeningFromMe',\r\n    'stopBotFromMe',\r\n    'keepOpen',\r\n    'debounceTime',\r\n    'ignoreJids',\r\n  ),\r\n};\r\n\r\nexport const flowiseIgnoreJidSchema: JSONSchema7 = {\r\n  $id: v4(),\r\n  type: 'object',\r\n  properties: {\r\n    remoteJid: { type: 'string' },\r\n    action: { type: 'string', enum: ['add', 'remove'] },\r\n  },\r\n  required: ['remoteJid', 'action'],\r\n  ...isNotEmpty('remoteJid', 'action'),\r\n};\r\n","import { JSONSchema7 } from 'json-schema';\r\nimport { v4 } from 'uuid';\r\n\r\nconst isNotEmpty = (...propertyNames: string[]): JSONSchema7 => {\r\n  const properties = {};\r\n  propertyNames.forEach(\r\n    (property) =>\r\n      (properties[property] = {\r\n        minLength: 1,\r\n        description: `The \"${property}\" cannot be empty`,\r\n      }),\r\n  );\r\n  return {\r\n    if: {\r\n      propertyNames: {\r\n        enum: [...propertyNames],\r\n      },\r\n    },\r\n    then: { properties },\r\n  };\r\n};\r\n\r\nexport const openaiSchema: JSONSchema7 = {\r\n  $id: v4(),\r\n  type: 'object',\r\n  properties: {\r\n    enabled: { type: 'boolean' },\r\n    description: { type: 'string' },\r\n    openaiCredsId: { type: 'string' },\r\n    botType: { type: 'string', enum: ['assistant', 'chatCompletion'] },\r\n    assistantId: { type: 'string' },\r\n    functionUrl: { type: 'string' },\r\n    model: { type: 'string' },\r\n    systemMessages: { type: 'array', items: { type: 'string' } },\r\n    assistantMessages: { type: 'array', items: { type: 'string' } },\r\n    userMessages: { type: 'array', items: { type: 'string' } },\r\n    maxTokens: { type: 'integer' },\r\n    triggerType: { type: 'string', enum: ['all', 'keyword', 'none', 'advanced'] },\r\n    triggerOperator: { type: 'string', enum: ['equals', 'contains', 'startsWith', 'endsWith', 'regex'] },\r\n    triggerValue: { type: 'string' },\r\n    expire: { type: 'integer' },\r\n    keywordFinish: { type: 'string' },\r\n    delayMessage: { type: 'integer' },\r\n    unknownMessage: { type: 'string' },\r\n    listeningFromMe: { type: 'boolean' },\r\n    stopBotFromMe: { type: 'boolean' },\r\n    keepOpen: { type: 'boolean' },\r\n    debounceTime: { type: 'integer' },\r\n    ignoreJids: { type: 'array', items: { type: 'string' } },\r\n  },\r\n  required: ['enabled', 'openaiCredsId', 'botType', 'triggerType'],\r\n  ...isNotEmpty('enabled', 'openaiCredsId', 'botType', 'triggerType'),\r\n};\r\n\r\nexport const openaiCredsSchema: JSONSchema7 = {\r\n  $id: v4(),\r\n  type: 'object',\r\n  properties: {\r\n    name: { type: 'string' },\r\n    apiKey: { type: 'string' },\r\n  },\r\n  required: ['name', 'apiKey'],\r\n  ...isNotEmpty('name', 'apiKey'),\r\n};\r\n\r\nexport const openaiStatusSchema: JSONSchema7 = {\r\n  $id: v4(),\r\n  type: 'object',\r\n  properties: {\r\n    remoteJid: { type: 'string' },\r\n    status: { type: 'string', enum: ['opened', 'closed', 'paused', 'delete'] },\r\n  },\r\n  required: ['remoteJid', 'status'],\r\n  ...isNotEmpty('remoteJid', 'status'),\r\n};\r\n\r\nexport const openaiSettingSchema: JSONSchema7 = {\r\n  $id: v4(),\r\n  type: 'object',\r\n  properties: {\r\n    openaiCredsId: { type: 'string' },\r\n    expire: { type: 'integer' },\r\n    keywordFinish: { type: 'string' },\r\n    delayMessage: { type: 'integer' },\r\n    unknownMessage: { type: 'string' },\r\n    listeningFromMe: { type: 'boolean' },\r\n    stopBotFromMe: { type: 'boolean' },\r\n    keepOpen: { type: 'boolean' },\r\n    debounceTime: { type: 'integer' },\r\n    speechToText: { type: 'boolean' },\r\n    ignoreJids: { type: 'array', items: { type: 'string' } },\r\n    openaiIdFallback: { type: 'string' },\r\n  },\r\n  required: [\r\n    'openaiCredsId',\r\n    'expire',\r\n    'keywordFinish',\r\n    'delayMessage',\r\n    'unknownMessage',\r\n    'listeningFromMe',\r\n    'stopBotFromMe',\r\n    'keepOpen',\r\n    'debounceTime',\r\n    'ignoreJids',\r\n  ],\r\n  ...isNotEmpty(\r\n    'openaiCredsId',\r\n    'expire',\r\n    'keywordFinish',\r\n    'delayMessage',\r\n    'unknownMessage',\r\n    'listeningFromMe',\r\n    'stopBotFromMe',\r\n    'keepOpen',\r\n    'debounceTime',\r\n    'ignoreJids',\r\n  ),\r\n};\r\n\r\nexport const openaiIgnoreJidSchema: JSONSchema7 = {\r\n  $id: v4(),\r\n  type: 'object',\r\n  properties: {\r\n    remoteJid: { type: 'string' },\r\n    action: { type: 'string', enum: ['add', 'remove'] },\r\n  },\r\n  required: ['remoteJid', 'action'],\r\n  ...isNotEmpty('remoteJid', 'action'),\r\n};\r\n","import { JSONSchema7 } from 'json-schema';\r\nimport { v4 } from 'uuid';\r\n\r\nconst isNotEmpty = (...propertyNames: string[]): JSONSchema7 => {\r\n  const properties = {};\r\n  propertyNames.forEach(\r\n    (property) =>\r\n      (properties[property] = {\r\n        minLength: 1,\r\n        description: `The \"${property}\" cannot be empty`,\r\n      }),\r\n  );\r\n  return {\r\n    if: {\r\n      propertyNames: {\r\n        enum: [...propertyNames],\r\n      },\r\n    },\r\n    then: { properties },\r\n  };\r\n};\r\n\r\nexport const typebotSchema: JSONSchema7 = {\r\n  $id: v4(),\r\n  type: 'object',\r\n  properties: {\r\n    enabled: { type: 'boolean' },\r\n    description: { type: 'string' },\r\n    url: { type: 'string' },\r\n    typebot: { type: 'string' },\r\n    triggerType: { type: 'string', enum: ['all', 'keyword', 'none', 'advanced'] },\r\n    triggerOperator: { type: 'string', enum: ['equals', 'contains', 'startsWith', 'endsWith', 'regex'] },\r\n    triggerValue: { type: 'string' },\r\n    expire: { type: 'integer' },\r\n    keywordFinish: { type: 'string' },\r\n    delayMessage: { type: 'integer' },\r\n    unknownMessage: { type: 'string' },\r\n    listeningFromMe: { type: 'boolean' },\r\n    stopBotFromMe: { type: 'boolean' },\r\n    ignoreJids: { type: 'array', items: { type: 'string' } },\r\n  },\r\n  required: ['enabled', 'url', 'typebot', 'triggerType'],\r\n  ...isNotEmpty('enabled', 'url', 'typebot', 'triggerType'),\r\n};\r\n\r\nexport const typebotStatusSchema: JSONSchema7 = {\r\n  $id: v4(),\r\n  type: 'object',\r\n  properties: {\r\n    remoteJid: { type: 'string' },\r\n    status: { type: 'string', enum: ['opened', 'closed', 'paused', 'delete'] },\r\n  },\r\n  required: ['remoteJid', 'status'],\r\n  ...isNotEmpty('remoteJid', 'status'),\r\n};\r\n\r\nexport const typebotStartSchema: JSONSchema7 = {\r\n  $id: v4(),\r\n  type: 'object',\r\n  properties: {\r\n    remoteJid: { type: 'string' },\r\n    url: { type: 'string' },\r\n    typebot: { type: 'string' },\r\n  },\r\n  required: ['remoteJid', 'url', 'typebot'],\r\n  ...isNotEmpty('remoteJid', 'url', 'typebot'),\r\n};\r\n\r\nexport const typebotSettingSchema: JSONSchema7 = {\r\n  $id: v4(),\r\n  type: 'object',\r\n  properties: {\r\n    expire: { type: 'integer' },\r\n    keywordFinish: { type: 'string' },\r\n    delayMessage: { type: 'integer' },\r\n    unknownMessage: { type: 'string' },\r\n    listeningFromMe: { type: 'boolean' },\r\n    stopBotFromMe: { type: 'boolean' },\r\n    keepOpen: { type: 'boolean' },\r\n    debounceTime: { type: 'integer' },\r\n    typebotIdFallback: { type: 'string' },\r\n    ignoreJids: { type: 'array', items: { type: 'string' } },\r\n  },\r\n  required: ['expire', 'keywordFinish', 'delayMessage', 'unknownMessage', 'listeningFromMe', 'stopBotFromMe'],\r\n  ...isNotEmpty('expire', 'keywordFinish', 'delayMessage', 'unknownMessage', 'listeningFromMe', 'stopBotFromMe'),\r\n};\r\n\r\nexport const typebotIgnoreJidSchema: JSONSchema7 = {\r\n  $id: v4(),\r\n  type: 'object',\r\n  properties: {\r\n    remoteJid: { type: 'string' },\r\n    action: { type: 'string', enum: ['add', 'remove'] },\r\n  },\r\n  required: ['remoteJid', 'action'],\r\n  ...isNotEmpty('remoteJid', 'action'),\r\n};\r\n"],"mappings":"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","names":["chatbot_schema_exports","__export","chatwootSchema","difyIgnoreJidSchema","difySchema","difySettingSchema","difyStatusSchema","evolutionBotIgnoreJidSchema","evolutionBotSchema","evolutionBotSettingSchema","evolutionBotStatusSchema","flowiseIgnoreJidSchema","flowiseSchema","flowiseSettingSchema","flowiseStatusSchema","openaiCredsSchema","openaiIgnoreJidSchema","openaiSchema","openaiSettingSchema","openaiStatusSchema","typebotIgnoreJidSchema","typebotSchema","typebotSettingSchema","typebotStartSchema","typebotStatusSchema","__toCommonJS","import_crypto","rnds8Pool","poolPtr","rng","crypto","byteToHex","i","unsafeStringify","arr","offset","import_crypto","native_default","crypto","v4","options","buf","offset","native_default","rnds","rng","i","unsafeStringify","v4_default","isNotEmpty","propertyNames","properties","property","chatwootSchema","v4_default","isNotEmpty","propertyNames","properties","property","difySchema","v4_default","difyStatusSchema","difySettingSchema","difyIgnoreJidSchema","isNotEmpty","propertyNames","properties","property","evolutionBotSchema","v4_default","evolutionBotStatusSchema","evolutionBotSettingSchema","evolutionBotIgnoreJidSchema","isNotEmpty","propertyNames","properties","property","flowiseSchema","v4_default","flowiseStatusSchema","flowiseSettingSchema","flowiseIgnoreJidSchema","isNotEmpty","propertyNames","properties","property","openaiSchema","v4_default","openaiCredsSchema","openaiStatusSchema","openaiSettingSchema","openaiIgnoreJidSchema","isNotEmpty","propertyNames","properties","property","typebotSchema","v4_default","typebotStatusSchema","typebotStartSchema","typebotSettingSchema","typebotIgnoreJidSchema"]}
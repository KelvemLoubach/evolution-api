{"version":3,"sources":["../../../src/api/integrations/chatbot/chatwoot/dto/chatwoot.dto.ts","../../../src/api/integrations/event/event.dto.ts","../../../src/api/integrations/integration.dto.ts"],"sourcesContent":["import { Constructor } from '@api/integrations/integration.dto';\r\n\r\nexport class ChatwootDto {\r\n  enabled?: boolean;\r\n  accountId?: string;\r\n  token?: string;\r\n  url?: string;\r\n  nameInbox?: string;\r\n  signMsg?: boolean;\r\n  signDelimiter?: string;\r\n  number?: string;\r\n  reopenConversation?: boolean;\r\n  conversationPending?: boolean;\r\n  mergeBrazilContacts?: boolean;\r\n  importContacts?: boolean;\r\n  importMessages?: boolean;\r\n  daysLimitImportMessages?: number;\r\n  autoCreate?: boolean;\r\n  organization?: string;\r\n  logo?: string;\r\n  ignoreJids?: string[];\r\n}\r\n\r\nexport function ChatwootInstanceMixin<TBase extends Constructor>(Base: TBase) {\r\n  return class extends Base {\r\n    chatwootAccountId?: string;\r\n    chatwootToken?: string;\r\n    chatwootUrl?: string;\r\n    chatwootSignMsg?: boolean;\r\n    chatwootReopenConversation?: boolean;\r\n    chatwootConversationPending?: boolean;\r\n    chatwootMergeBrazilContacts?: boolean;\r\n    chatwootImportContacts?: boolean;\r\n    chatwootImportMessages?: boolean;\r\n    chatwootDaysLimitImportMessages?: number;\r\n    chatwootNameInbox?: string;\r\n    chatwootOrganization?: string;\r\n    chatwootLogo?: string;\r\n    chatwootAutoCreate?: boolean;\r\n  };\r\n}\r\n","import { Constructor } from '@api/integrations/integration.dto';\r\nimport { JsonValue } from '@prisma/client/runtime/library';\r\n\r\nexport class EventDto {\r\n  webhook?: {\r\n    enabled?: boolean;\r\n    events?: string[];\r\n    url?: string;\r\n    headers?: JsonValue;\r\n    byEvents?: boolean;\r\n    base64?: boolean;\r\n  };\r\n\r\n  websocket?: {\r\n    enabled?: boolean;\r\n    events?: string[];\r\n  };\r\n\r\n  sqs?: {\r\n    enabled?: boolean;\r\n    events?: string[];\r\n  };\r\n\r\n  rabbitmq?: {\r\n    enabled?: boolean;\r\n    events?: string[];\r\n  };\r\n\r\n  pusher?: {\r\n    enabled?: boolean;\r\n    appId?: string;\r\n    key?: string;\r\n    secret?: string;\r\n    cluster?: string;\r\n    useTLS?: boolean;\r\n    events?: string[];\r\n  };\r\n}\r\n\r\nexport function EventInstanceMixin<TBase extends Constructor>(Base: TBase) {\r\n  return class extends Base {\r\n    webhook?: {\r\n      enabled?: boolean;\r\n      events?: string[];\r\n      headers?: JsonValue;\r\n      url?: string;\r\n      byEvents?: boolean;\r\n      base64?: boolean;\r\n    };\r\n\r\n    websocket?: {\r\n      enabled?: boolean;\r\n      events?: string[];\r\n    };\r\n\r\n    sqs?: {\r\n      enabled?: boolean;\r\n      events?: string[];\r\n    };\r\n\r\n    rabbitmq?: {\r\n      enabled?: boolean;\r\n      events?: string[];\r\n    };\r\n\r\n    pusher?: {\r\n      enabled?: boolean;\r\n      appId?: string;\r\n      key?: string;\r\n      secret?: string;\r\n      cluster?: string;\r\n      useTLS?: boolean;\r\n      events?: string[];\r\n    };\r\n  };\r\n}\r\n","import { ChatwootInstanceMixin } from '@api/integrations/chatbot/chatwoot/dto/chatwoot.dto';\r\nimport { EventInstanceMixin } from '@api/integrations/event/event.dto';\r\n\r\nexport type Constructor<T = {}> = new (...args: any[]) => T;\r\n\r\nexport class IntegrationDto extends EventInstanceMixin(ChatwootInstanceMixin(class {})) {}\r\n"],"mappings":"AAuBO,SAASA,EAAiDC,EAAa,CAC5E,OAAO,cAAcA,CAAK,CAe1B,CACF,CCDO,SAASC,EAA8CC,EAAa,CACzE,OAAO,cAAcA,CAAK,CAkC1B,CACF,CCtEO,IAAMC,EAAN,cAA6BC,EAAmBC,EAAsB,KAAM,CAAC,CAAC,CAAC,CAAE,CAAC","names":["ChatwootInstanceMixin","Base","EventInstanceMixin","Base","IntegrationDto","EventInstanceMixin","ChatwootInstanceMixin"]}